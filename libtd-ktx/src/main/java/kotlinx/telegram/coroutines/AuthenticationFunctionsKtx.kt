//
// NOTE: THIS FILE IS AUTO-GENERATED by the "TdApiKtxGenerator".kt
// See: https://github.com/tdlibx/td-ktx-generator/
//
package kotlinx.telegram.coroutines

import kotlinx.telegram.core.TelegramFlow
import org.drinkless.tdlib.TdApi
import org.drinkless.tdlib.TdApi.ResendCodeReason
import org.drinkless.tdlib.TdApi.Session

/**
 * Suspend function, which checks the authentication token of a bot; to log in as a bot. Works only
 * when the current authorization state is authorizationStateWaitPhoneNumber. Can be used instead of
 * setAuthenticationPhoneNumber and checkAuthenticationCode to log in.
 *
 * @param token The bot token.
 */
suspend fun TelegramFlow.checkAuthenticationBotToken(token: String?) =
    this.sendFunctionLaunch(TdApi.CheckAuthenticationBotToken(token))

/**
 * Suspend function, which checks the authentication code. Works only when the current authorization
 * state is authorizationStateWaitCode.
 *
 * @param code Authentication code to check.
 */
suspend fun TelegramFlow.checkAuthenticationCode(code: String?) =
    this.sendFunctionLaunch(TdApi.CheckAuthenticationCode(code))

/**
 * Suspend function, which confirms QR code authentication on another device. Returns created
 * session on success.
 *
 * @param link A link from a QR code. The link must be scanned by the in-app camera.
 *
 * @return [Session] Contains information about one session in a Telegram application used by the
 * current user. Sessions must be shown to the user in the returned order.
 */
suspend fun TelegramFlow.confirmQrCodeAuthentication(link: String?): Session =
    this.sendFunctionAsync(TdApi.ConfirmQrCodeAuthentication(link))

/**
 * Suspend function, which reports that authentication code wasn't delivered via SMS; for official
 * mobile applications only. Works only when the current authorization state is
 * authorizationStateWaitCode.
 *
 * @param mobileNetworkCode Current mobile network code.
 */
suspend fun TelegramFlow.reportAuthenticationCodeMissing(mobileNetworkCode: String?) =
    this.sendFunctionLaunch(TdApi.ReportAuthenticationCodeMissing(mobileNetworkCode))

/**
 * Suspend function, which requests QR code authentication by scanning a QR code on another logged
 * in device. Works only when the current authorization state is authorizationStateWaitPhoneNumber, or
 * if there is no pending authentication query and the current authorization state is
 * authorizationStateWaitEmailAddress, authorizationStateWaitEmailCode, authorizationStateWaitCode,
 * authorizationStateWaitRegistration, or authorizationStateWaitPassword.
 *
 * @param otherUserIds List of user identifiers of other users currently using the application.
 */
suspend fun TelegramFlow.requestQrCodeAuthentication(otherUserIds: LongArray?) =
    this.sendFunctionLaunch(TdApi.RequestQrCodeAuthentication(otherUserIds))

/**
 * Suspend function, which resends an authentication code to the user. Works only when the current
 * authorization state is authorizationStateWaitCode, the nextCodeType of the result is not null and
 * the server-specified timeout has passed, or when the current authorization state is
 * authorizationStateWaitEmailCode.
 *
 * @param reason Reason of code resending; pass null if unknown.
 */
suspend fun TelegramFlow.resendAuthenticationCode(reason: ResendCodeReason?) =
    this.sendFunctionLaunch(TdApi.ResendAuthenticationCode(reason))

/**
 * Suspend function, which sends Firebase Authentication SMS to the phone number of the user. Works
 * only when the current authorization state is authorizationStateWaitCode and the server returned code
 * of the type authenticationCodeTypeFirebaseAndroid or authenticationCodeTypeFirebaseIos.
 *
 * @param token Play Integrity API or SafetyNet Attestation API token for the Android application,
 * or secret from push notification for the iOS application.
 */
suspend fun TelegramFlow.sendAuthenticationFirebaseSms(token: String?) =
    this.sendFunctionLaunch(TdApi.SendAuthenticationFirebaseSms(token))
