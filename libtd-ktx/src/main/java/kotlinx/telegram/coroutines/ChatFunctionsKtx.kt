//
// NOTE: THIS FILE IS AUTO-GENERATED by the "TdApiKtxGenerator".kt
// See: https://github.com/tdlibx/td-ktx-generator/
//
package kotlinx.telegram.coroutines

import kotlin.Boolean
import kotlin.ByteArray
import kotlin.Int
import kotlin.IntArray
import kotlin.Long
import kotlin.LongArray
import kotlin.String
import kotlinx.telegram.core.TelegramFlow
import org.drinkless.tdlib.TdApi
import org.drinkless.tdlib.TdApi.ArchiveChatListSettings
import org.drinkless.tdlib.TdApi.BackgroundType
import org.drinkless.tdlib.TdApi.BusinessChatLink
import org.drinkless.tdlib.TdApi.BusinessChatLinkInfo
import org.drinkless.tdlib.TdApi.BusinessChatLinks
import org.drinkless.tdlib.TdApi.Chat
import org.drinkless.tdlib.TdApi.ChatAction
import org.drinkless.tdlib.TdApi.ChatActiveStories
import org.drinkless.tdlib.TdApi.ChatAdministrators
import org.drinkless.tdlib.TdApi.ChatAvailableReactions
import org.drinkless.tdlib.TdApi.ChatBoostFeatures
import org.drinkless.tdlib.TdApi.ChatBoostLevelFeatures
import org.drinkless.tdlib.TdApi.ChatBoostLink
import org.drinkless.tdlib.TdApi.ChatBoostLinkInfo
import org.drinkless.tdlib.TdApi.ChatBoostSlots
import org.drinkless.tdlib.TdApi.ChatBoostStatus
import org.drinkless.tdlib.TdApi.ChatFolder
import org.drinkless.tdlib.TdApi.ChatFolderIcon
import org.drinkless.tdlib.TdApi.ChatFolderInfo
import org.drinkless.tdlib.TdApi.ChatFolderInviteLink
import org.drinkless.tdlib.TdApi.ChatFolderInviteLinkInfo
import org.drinkless.tdlib.TdApi.ChatFolderInviteLinks
import org.drinkless.tdlib.TdApi.ChatInviteLink
import org.drinkless.tdlib.TdApi.ChatInviteLinkCounts
import org.drinkless.tdlib.TdApi.ChatInviteLinkInfo
import org.drinkless.tdlib.TdApi.ChatInviteLinkMember
import org.drinkless.tdlib.TdApi.ChatInviteLinkMembers
import org.drinkless.tdlib.TdApi.ChatInviteLinks
import org.drinkless.tdlib.TdApi.ChatJoinRequest
import org.drinkless.tdlib.TdApi.ChatJoinRequests
import org.drinkless.tdlib.TdApi.ChatList
import org.drinkless.tdlib.TdApi.ChatLists
import org.drinkless.tdlib.TdApi.ChatLocation
import org.drinkless.tdlib.TdApi.ChatMember
import org.drinkless.tdlib.TdApi.ChatMemberStatus
import org.drinkless.tdlib.TdApi.ChatMembers
import org.drinkless.tdlib.TdApi.ChatMembersFilter
import org.drinkless.tdlib.TdApi.ChatMessageSenders
import org.drinkless.tdlib.TdApi.ChatNotificationSettings
import org.drinkless.tdlib.TdApi.ChatPermissions
import org.drinkless.tdlib.TdApi.ChatRevenueStatistics
import org.drinkless.tdlib.TdApi.ChatRevenueTransactions
import org.drinkless.tdlib.TdApi.ChatStatistics
import org.drinkless.tdlib.TdApi.Chats
import org.drinkless.tdlib.TdApi.ChatsNearby
import org.drinkless.tdlib.TdApi.CheckChatUsernameResult
import org.drinkless.tdlib.TdApi.Count
import org.drinkless.tdlib.TdApi.CreatedBasicGroupChat
import org.drinkless.tdlib.TdApi.DraftMessage
import org.drinkless.tdlib.TdApi.FailedToAddMembers
import org.drinkless.tdlib.TdApi.FoundChatBoosts
import org.drinkless.tdlib.TdApi.FoundChatMessages
import org.drinkless.tdlib.TdApi.GroupCallId
import org.drinkless.tdlib.TdApi.HttpUrl
import org.drinkless.tdlib.TdApi.InputBackground
import org.drinkless.tdlib.TdApi.InputBusinessChatLink
import org.drinkless.tdlib.TdApi.InputChatPhoto
import org.drinkless.tdlib.TdApi.Location
import org.drinkless.tdlib.TdApi.Message
import org.drinkless.tdlib.TdApi.MessageCalendar
import org.drinkless.tdlib.TdApi.MessagePositions
import org.drinkless.tdlib.TdApi.MessageSender
import org.drinkless.tdlib.TdApi.MessageSenders
import org.drinkless.tdlib.TdApi.Messages
import org.drinkless.tdlib.TdApi.NewChatPrivacySettings
import org.drinkless.tdlib.TdApi.NotificationSettingsScope
import org.drinkless.tdlib.TdApi.PublicChatType
import org.drinkless.tdlib.TdApi.ReactionType
import org.drinkless.tdlib.TdApi.RecommendedChatFolders
import org.drinkless.tdlib.TdApi.ReportChatSponsoredMessageResult
import org.drinkless.tdlib.TdApi.ReportReason
import org.drinkless.tdlib.TdApi.RtmpUrl
import org.drinkless.tdlib.TdApi.SearchMessagesFilter
import org.drinkless.tdlib.TdApi.SecretChat
import org.drinkless.tdlib.TdApi.SponsoredMessages
import org.drinkless.tdlib.TdApi.Stories
import org.drinkless.tdlib.TdApi.StoryInteractions
import org.drinkless.tdlib.TdApi.StoryList
import org.drinkless.tdlib.TdApi.TopChatCategory

/**
 * Suspend function, which adds a chat folder by an invite link.
 *
 * @param inviteLink Invite link for the chat folder.  
 * @param chatIds Identifiers of the chats added to the chat folder. The chats are automatically
 * joined if they aren't joined yet.
 */
suspend fun TelegramFlow.addChatFolderByInviteLink(inviteLink: String?, chatIds: LongArray?) =
    this.sendFunctionLaunch(TdApi.AddChatFolderByInviteLink(inviteLink, chatIds))

/**
 * Suspend function, which adds a new member to a chat; requires canInviteUsers member right.
 * Members can't be added to private or secret chats. Returns information about members that weren't
 * added.
 *
 * @param chatId Chat identifier.  
 * @param userId Identifier of the user.  
 * @param forwardLimit The number of earlier messages from the chat to be forwarded to the new
 * member; up to 100. Ignored for supergroups and channels, or if the added user is a bot.
 *
 * @return [FailedToAddMembers] Represents a list of users that has failed to be added to a chat.
 */
suspend fun TelegramFlow.addChatMember(
  chatId: Long,
  userId: Long,
  forwardLimit: Int
): FailedToAddMembers = this.sendFunctionAsync(TdApi.AddChatMember(chatId, userId, forwardLimit))

/**
 * Suspend function, which adds multiple new members to a chat; requires canInviteUsers member
 * right. Currently, this method is only available for supergroups and channels. This method can't be
 * used to join a chat. Members can't be added to a channel if it has more than 200 members. Returns
 * information about members that weren't added.
 *
 * @param chatId Chat identifier.  
 * @param userIds Identifiers of the users to be added to the chat. The maximum number of added
 * users is 20 for supergroups and 100 for channels.
 *
 * @return [FailedToAddMembers] Represents a list of users that has failed to be added to a chat.
 */
suspend fun TelegramFlow.addChatMembers(chatId: Long, userIds: LongArray?): FailedToAddMembers =
    this.sendFunctionAsync(TdApi.AddChatMembers(chatId, userIds))

/**
 * Suspend function, which adds a chat to a chat list. A chat can't be simultaneously in Main and
 * Archive chat lists, so it is automatically removed from another one if needed.
 *
 * @param chatId Chat identifier.  
 * @param chatList The chat list. Use getChatListsToAddChat to get suitable chat lists.
 */
suspend fun TelegramFlow.addChatToList(chatId: Long, chatList: ChatList?) =
    this.sendFunctionLaunch(TdApi.AddChatToList(chatId, chatList))

/**
 * Suspend function, which adds a chat to the list of recently found chats. The chat is added to the
 * beginning of the list. If the chat is already in the list, it will be removed from the list first.
 *
 * @param chatId Identifier of the chat to add.
 */
suspend fun TelegramFlow.addRecentlyFoundChat(chatId: Long) =
    this.sendFunctionLaunch(TdApi.AddRecentlyFoundChat(chatId))

/**
 * Suspend function, which bans a member in a chat; requires canRestrictMembers administrator right.
 * Members can't be banned in private or secret chats. In supergroups and channels, the user will not
 * be able to return to the group on their own using invite links, etc., unless unbanned first.
 *
 * @param chatId Chat identifier.  
 * @param memberId Member identifier.  
 * @param bannedUntilDate Point in time (Unix timestamp) when the user will be unbanned; 0 if never.
 * If the user is banned for more than 366 days or for less than 30 seconds from the current time, the
 * user is considered to be banned forever. Ignored in basic groups and if a chat is banned.  
 * @param revokeMessages Pass true to delete all messages in the chat for the user that is being
 * removed. Always true for supergroups and channels.
 */
suspend fun TelegramFlow.banChatMember(
  chatId: Long,
  memberId: MessageSender?,
  bannedUntilDate: Int,
  revokeMessages: Boolean
) = this.sendFunctionLaunch(TdApi.BanChatMember(chatId, memberId, bannedUntilDate, revokeMessages))

/**
 * Suspend function, which boosts a chat and returns the list of available chat boost slots for the
 * current user after the boost.
 *
 * @param chatId Identifier of the chat.  
 * @param slotIds Identifiers of boost slots of the current user from which to apply boosts to the
 * chat.
 *
 * @return [ChatBoostSlots] Contains a list of chat boost slots.
 */
suspend fun TelegramFlow.boostChat(chatId: Long, slotIds: IntArray?): ChatBoostSlots =
    this.sendFunctionAsync(TdApi.BoostChat(chatId, slotIds))

/**
 * Suspend function, which checks the validity of an invite link for a chat folder and returns
 * information about the corresponding chat folder.
 *
 * @param inviteLink Invite link to be checked.
 *
 * @return [ChatFolderInviteLinkInfo] Contains information about an invite link to a chat folder.
 */
suspend fun TelegramFlow.checkChatFolderInviteLink(inviteLink: String?): ChatFolderInviteLinkInfo =
    this.sendFunctionAsync(TdApi.CheckChatFolderInviteLink(inviteLink))

/**
 * Suspend function, which checks the validity of an invite link for a chat and returns information
 * about the corresponding chat.
 *
 * @param inviteLink Invite link to be checked.
 *
 * @return [ChatInviteLinkInfo] Contains information about a chat invite link.
 */
suspend fun TelegramFlow.checkChatInviteLink(inviteLink: String?): ChatInviteLinkInfo =
    this.sendFunctionAsync(TdApi.CheckChatInviteLink(inviteLink))

/**
 * Suspend function, which checks whether a username can be set for a chat.
 *
 * @param chatId Chat identifier; must be identifier of a supergroup chat, or a channel chat, or a
 * private chat with self, or 0 if the chat is being created.  
 * @param username Username to be checked.
 *
 * @return [CheckChatUsernameResult] This class is an abstract base class.
 */
suspend fun TelegramFlow.checkChatUsername(chatId: Long, username: String?): CheckChatUsernameResult
    = this.sendFunctionAsync(TdApi.CheckChatUsername(chatId, username))

/**
 * Suspend function, which checks whether the maximum number of owned public chats has been reached.
 * Returns corresponding error if the limit was reached. The limit can be increased with Telegram
 * Premium.
 *
 * @param type Type of the public chats, for which to check the limit.
 */
suspend fun TelegramFlow.checkCreatedPublicChatsLimit(type: PublicChatType?) =
    this.sendFunctionLaunch(TdApi.CheckCreatedPublicChatsLimit(type))

/**
 * Suspend function, which clears the list of recently found chats.
 */
suspend fun TelegramFlow.clearRecentlyFoundChats() =
    this.sendFunctionLaunch(TdApi.ClearRecentlyFoundChats())

/**
 * Suspend function, which informs TDLib that the user opened the sponsored chat via the button, the
 * name, the photo, or a mention in the sponsored message.
 *
 * @param chatId Chat identifier of the sponsored message.  
 * @param messageId Identifier of the sponsored message.
 */
suspend fun TelegramFlow.clickChatSponsoredMessage(chatId: Long, messageId: Long) =
    this.sendFunctionLaunch(TdApi.ClickChatSponsoredMessage(chatId, messageId))

/**
 * Suspend function, which informs TDLib that the chat is closed by the user. Many useful activities
 * depend on the chat being opened or closed.
 *
 * @param chatId Chat identifier.
 */
suspend fun TelegramFlow.closeChat(chatId: Long) = this.sendFunctionLaunch(TdApi.CloseChat(chatId))

/**
 * Suspend function, which closes a secret chat, effectively transferring its state to
 * secretChatStateClosed.
 *
 * @param secretChatId Secret chat identifier.
 */
suspend fun TelegramFlow.closeSecretChat(secretChatId: Int) =
    this.sendFunctionLaunch(TdApi.CloseSecretChat(secretChatId))

/**
 * Suspend function, which returns an existing chat corresponding to a known basic group.
 *
 * @param basicGroupId Basic group identifier.  
 * @param force Pass true to create the chat without a network request. In this case all information
 * about the chat except its type, title and photo can be incorrect.
 *
 * @return [Chat] A chat. (Can be a private chat, basic group, supergroup, or secret chat.)
 */
suspend fun TelegramFlow.createBasicGroupChat(basicGroupId: Long, force: Boolean): Chat =
    this.sendFunctionAsync(TdApi.CreateBasicGroupChat(basicGroupId, force))

/**
 * Suspend function, which creates a business chat link for the current account. Requires Telegram
 * Business subscription. There can be up to getOption(&quot;business_chat_link_count_max&quot;) links
 * created. Returns the created link.
 *
 * @param linkInfo Information about the link to create.
 *
 * @return [BusinessChatLink] Contains information about a business chat link.
 */
suspend fun TelegramFlow.createBusinessChatLink(linkInfo: InputBusinessChatLink?): BusinessChatLink
    = this.sendFunctionAsync(TdApi.CreateBusinessChatLink(linkInfo))

/**
 * Suspend function, which creates new chat folder. Returns information about the created chat
 * folder. There can be up to getOption(&quot;chat_folder_count_max&quot;) chat folders, but the limit
 * can be increased with Telegram Premium.
 *
 * @param folder The new chat folder.
 *
 * @return [ChatFolderInfo] Contains basic information about a chat folder.
 */
suspend fun TelegramFlow.createChatFolder(folder: ChatFolder?): ChatFolderInfo =
    this.sendFunctionAsync(TdApi.CreateChatFolder(folder))

/**
 * Suspend function, which creates a new invite link for a chat folder. A link can be created for a
 * chat folder if it has only pinned and included chats.
 *
 * @param chatFolderId Chat folder identifier.  
 * @param name Name of the link; 0-32 characters.  
 * @param chatIds Identifiers of chats to be accessible by the invite link. Use
 * getChatsForChatFolderInviteLink to get suitable chats. Basic groups will be automatically converted
 * to supergroups before link creation.
 *
 * @return [ChatFolderInviteLink] Contains a chat folder invite link.
 */
suspend fun TelegramFlow.createChatFolderInviteLink(
  chatFolderId: Int,
  name: String?,
  chatIds: LongArray?
): ChatFolderInviteLink = this.sendFunctionAsync(TdApi.CreateChatFolderInviteLink(chatFolderId,
    name, chatIds))

/**
 * Suspend function, which creates a new invite link for a chat. Available for basic groups,
 * supergroups, and channels. Requires administrator privileges and canInviteUsers right in the chat.
 *
 * @param chatId Chat identifier.  
 * @param name Invite link name; 0-32 characters.  
 * @param expirationDate Point in time (Unix timestamp) when the link will expire; pass 0 if never. 
 * 
 * @param memberLimit The maximum number of chat members that can join the chat via the link
 * simultaneously; 0-99999; pass 0 if not limited.  
 * @param createsJoinRequest Pass true if users joining the chat via the link need to be approved by
 * chat administrators. In this case, memberLimit must be 0.
 *
 * @return [ChatInviteLink] Contains a chat invite link.
 */
suspend fun TelegramFlow.createChatInviteLink(
  chatId: Long,
  name: String?,
  expirationDate: Int,
  memberLimit: Int,
  createsJoinRequest: Boolean
): ChatInviteLink = this.sendFunctionAsync(TdApi.CreateChatInviteLink(chatId, name, expirationDate,
    memberLimit, createsJoinRequest))

/**
 * Suspend function, which creates a new basic group and sends a corresponding
 * messageBasicGroupChatCreate. Returns information about the newly created chat.
 *
 * @param userIds Identifiers of users to be added to the basic group; may be empty to create a
 * basic group without other members.  
 * @param title Title of the new basic group; 1-128 characters.  
 * @param messageAutoDeleteTime Message auto-delete time value, in seconds; must be from 0 up to 365
 * * 86400 and be divisible by 86400. If 0, then messages aren't deleted automatically.
 *
 * @return [CreatedBasicGroupChat] Contains information about a newly created basic group chat.
 */
suspend fun TelegramFlow.createNewBasicGroupChat(
  userIds: LongArray?,
  title: String?,
  messageAutoDeleteTime: Int
): CreatedBasicGroupChat = this.sendFunctionAsync(TdApi.CreateNewBasicGroupChat(userIds, title,
    messageAutoDeleteTime))

/**
 * Suspend function, which creates a new secret chat. Returns the newly created chat.
 *
 * @param userId Identifier of the target user.
 *
 * @return [Chat] A chat. (Can be a private chat, basic group, supergroup, or secret chat.)
 */
suspend fun TelegramFlow.createNewSecretChat(userId: Long): Chat =
    this.sendFunctionAsync(TdApi.CreateNewSecretChat(userId))

/**
 * Suspend function, which creates a new supergroup or channel and sends a corresponding
 * messageSupergroupChatCreate. Returns the newly created chat.
 *
 * @param title Title of the new chat; 1-128 characters.  
 * @param isForum Pass true to create a forum supergroup chat.  
 * @param isChannel Pass true to create a channel chat; ignored if a forum is created.  
 * @param description Chat description; 0-255 characters.  
 * @param location Chat location if a location-based supergroup is being created; pass null to
 * create an ordinary supergroup chat.  
 * @param messageAutoDeleteTime Message auto-delete time value, in seconds; must be from 0 up to 365
 * * 86400 and be divisible by 86400. If 0, then messages aren't deleted automatically.  
 * @param forImport Pass true to create a supergroup for importing messages using importMessages.
 *
 * @return [Chat] A chat. (Can be a private chat, basic group, supergroup, or secret chat.)
 */
suspend fun TelegramFlow.createNewSupergroupChat(
  title: String?,
  isForum: Boolean,
  isChannel: Boolean,
  description: String?,
  location: ChatLocation?,
  messageAutoDeleteTime: Int,
  forImport: Boolean
): Chat = this.sendFunctionAsync(TdApi.CreateNewSupergroupChat(title, isForum, isChannel,
    description, location, messageAutoDeleteTime, forImport))

/**
 * Suspend function, which returns an existing chat corresponding to a given user.
 *
 * @param userId User identifier.  
 * @param force Pass true to create the chat without a network request. In this case all information
 * about the chat except its type, title and photo can be incorrect.
 *
 * @return [Chat] A chat. (Can be a private chat, basic group, supergroup, or secret chat.)
 */
suspend fun TelegramFlow.createPrivateChat(userId: Long, force: Boolean): Chat =
    this.sendFunctionAsync(TdApi.CreatePrivateChat(userId, force))

/**
 * Suspend function, which returns an existing chat corresponding to a known secret chat.
 *
 * @param secretChatId Secret chat identifier.
 *
 * @return [Chat] A chat. (Can be a private chat, basic group, supergroup, or secret chat.)
 */
suspend fun TelegramFlow.createSecretChat(secretChatId: Int): Chat =
    this.sendFunctionAsync(TdApi.CreateSecretChat(secretChatId))

/**
 * Suspend function, which returns an existing chat corresponding to a known supergroup or channel.
 *
 * @param supergroupId Supergroup or channel identifier.  
 * @param force Pass true to create the chat without a network request. In this case all information
 * about the chat except its type, title and photo can be incorrect.
 *
 * @return [Chat] A chat. (Can be a private chat, basic group, supergroup, or secret chat.)
 */
suspend fun TelegramFlow.createSupergroupChat(supergroupId: Long, force: Boolean): Chat =
    this.sendFunctionAsync(TdApi.CreateSupergroupChat(supergroupId, force))

/**
 * Suspend function, which creates a video chat (a group call bound to a chat). Available only for
 * basic groups, supergroups and channels; requires canManageVideoChats administrator right.
 *
 * @param chatId Identifier of a chat in which the video chat will be created.  
 * @param title Group call title; if empty, chat title will be used.  
 * @param startDate Point in time (Unix timestamp) when the group call is supposed to be started by
 * an administrator; 0 to start the video chat immediately. The date must be at least 10 seconds and at
 * most 8 days in the future.  
 * @param isRtmpStream Pass true to create an RTMP stream instead of an ordinary video chat;
 * requires owner privileges.
 *
 * @return [GroupCallId] Contains the group call identifier.
 */
suspend fun TelegramFlow.createVideoChat(
  chatId: Long,
  title: String?,
  startDate: Int,
  isRtmpStream: Boolean
): GroupCallId = this.sendFunctionAsync(TdApi.CreateVideoChat(chatId, title, startDate,
    isRtmpStream))

/**
 * Suspend function, which deletes all revoked chat invite links created by a given chat
 * administrator. Requires administrator privileges and canInviteUsers right in the chat for own links
 * and owner privileges for other links.
 *
 * @param chatId Chat identifier.  
 * @param creatorUserId User identifier of a chat administrator, which links will be deleted. Must
 * be an identifier of the current user for non-owner.
 */
suspend fun TelegramFlow.deleteAllRevokedChatInviteLinks(chatId: Long, creatorUserId: Long) =
    this.sendFunctionLaunch(TdApi.DeleteAllRevokedChatInviteLinks(chatId, creatorUserId))

/**
 * Suspend function, which deletes a business chat link of the current account.
 *
 * @param link The link to delete.
 */
suspend fun TelegramFlow.deleteBusinessChatLink(link: String?) =
    this.sendFunctionLaunch(TdApi.DeleteBusinessChatLink(link))

/**
 * Suspend function, which deletes a chat along with all messages in the corresponding chat for all
 * chat members. For group chats this will release the usernames and remove all members. Use the field
 * chat.canBeDeletedForAllUsers to find whether the method can be applied to the chat.
 *
 * @param chatId Chat identifier.
 */
suspend fun TelegramFlow.deleteChat(chatId: Long) =
    this.sendFunctionLaunch(TdApi.DeleteChat(chatId))

/**
 * Suspend function, which deletes background in a specific chat.
 *
 * @param chatId Chat identifier.  
 * @param restorePrevious Pass true to restore previously set background. Can be used only in
 * private and secret chats with non-deleted users if userFullInfo.setChatBackground == true. Supposed
 * to be used from messageChatSetBackground messages with the currently set background that was set for
 * both sides by the other user.
 */
suspend fun TelegramFlow.deleteChatBackground(chatId: Long, restorePrevious: Boolean) =
    this.sendFunctionLaunch(TdApi.DeleteChatBackground(chatId, restorePrevious))

/**
 * Suspend function, which deletes existing chat folder.
 *
 * @param chatFolderId Chat folder identifier.  
 * @param leaveChatIds Identifiers of the chats to leave. The chats must be pinned or always
 * included in the folder.
 */
suspend fun TelegramFlow.deleteChatFolder(chatFolderId: Int, leaveChatIds: LongArray?) =
    this.sendFunctionLaunch(TdApi.DeleteChatFolder(chatFolderId, leaveChatIds))

/**
 * Suspend function, which deletes an invite link for a chat folder.
 *
 * @param chatFolderId Chat folder identifier.  
 * @param inviteLink Invite link to be deleted.
 */
suspend fun TelegramFlow.deleteChatFolderInviteLink(chatFolderId: Int, inviteLink: String?) =
    this.sendFunctionLaunch(TdApi.DeleteChatFolderInviteLink(chatFolderId, inviteLink))

/**
 * Suspend function, which deletes all messages in the chat. Use chat.canBeDeletedOnlyForSelf and
 * chat.canBeDeletedForAllUsers fields to find whether and how the method can be applied to the chat.
 *
 * @param chatId Chat identifier.  
 * @param removeFromChatList Pass true to remove the chat from all chat lists.  
 * @param revoke Pass true to delete chat history for all users.
 */
suspend fun TelegramFlow.deleteChatHistory(
  chatId: Long,
  removeFromChatList: Boolean,
  revoke: Boolean
) = this.sendFunctionLaunch(TdApi.DeleteChatHistory(chatId, removeFromChatList, revoke))

/**
 * Suspend function, which deletes all messages between the specified dates in a chat. Supported
 * only for private chats and basic groups. Messages sent in the last 30 seconds will not be deleted.
 *
 * @param chatId Chat identifier.  
 * @param minDate The minimum date of the messages to delete.  
 * @param maxDate The maximum date of the messages to delete.  
 * @param revoke Pass true to delete chat messages for all users; private chats only.
 */
suspend fun TelegramFlow.deleteChatMessagesByDate(
  chatId: Long,
  minDate: Int,
  maxDate: Int,
  revoke: Boolean
) = this.sendFunctionLaunch(TdApi.DeleteChatMessagesByDate(chatId, minDate, maxDate, revoke))

/**
 * Suspend function, which deletes all messages sent by the specified message sender in a chat.
 * Supported only for supergroups; requires canDeleteMessages administrator privileges.
 *
 * @param chatId Chat identifier.  
 * @param senderId Identifier of the sender of messages to delete.
 */
suspend fun TelegramFlow.deleteChatMessagesBySender(chatId: Long, senderId: MessageSender?) =
    this.sendFunctionLaunch(TdApi.DeleteChatMessagesBySender(chatId, senderId))

/**
 * Suspend function, which deletes the default reply markup from a chat. Must be called after a
 * one-time keyboard or a replyMarkupForceReply reply markup has been used. An updateChatReplyMarkup
 * update will be sent if the reply markup is changed.
 *
 * @param chatId Chat identifier.  
 * @param messageId The message identifier of the used keyboard.
 */
suspend fun TelegramFlow.deleteChatReplyMarkup(chatId: Long, messageId: Long) =
    this.sendFunctionLaunch(TdApi.DeleteChatReplyMarkup(chatId, messageId))

/**
 * Suspend function, which deletes revoked chat invite links. Requires administrator privileges and
 * canInviteUsers right in the chat for own links and owner privileges for other links.
 *
 * @param chatId Chat identifier.  
 * @param inviteLink Invite link to revoke.
 */
suspend fun TelegramFlow.deleteRevokedChatInviteLink(chatId: Long, inviteLink: String?) =
    this.sendFunctionLaunch(TdApi.DeleteRevokedChatInviteLink(chatId, inviteLink))

/**
 * Suspend function, which edits a business chat link of the current account. Requires Telegram
 * Business subscription. Returns the edited link.
 *
 * @param link The link to edit.  
 * @param linkInfo New description of the link.
 *
 * @return [BusinessChatLink] Contains information about a business chat link.
 */
suspend fun TelegramFlow.editBusinessChatLink(link: String?, linkInfo: InputBusinessChatLink?):
    BusinessChatLink = this.sendFunctionAsync(TdApi.EditBusinessChatLink(link, linkInfo))

/**
 * Suspend function, which edits existing chat folder. Returns information about the edited chat
 * folder.
 *
 * @param chatFolderId Chat folder identifier.  
 * @param folder The edited chat folder.
 *
 * @return [ChatFolderInfo] Contains basic information about a chat folder.
 */
suspend fun TelegramFlow.editChatFolder(chatFolderId: Int, folder: ChatFolder?): ChatFolderInfo =
    this.sendFunctionAsync(TdApi.EditChatFolder(chatFolderId, folder))

/**
 * Suspend function, which edits an invite link for a chat folder.
 *
 * @param chatFolderId Chat folder identifier.  
 * @param inviteLink Invite link to be edited.  
 * @param name New name of the link; 0-32 characters.  
 * @param chatIds New identifiers of chats to be accessible by the invite link. Use
 * getChatsForChatFolderInviteLink to get suitable chats. Basic groups will be automatically converted
 * to supergroups before link editing.
 *
 * @return [ChatFolderInviteLink] Contains a chat folder invite link.
 */
suspend fun TelegramFlow.editChatFolderInviteLink(
  chatFolderId: Int,
  inviteLink: String?,
  name: String?,
  chatIds: LongArray?
): ChatFolderInviteLink = this.sendFunctionAsync(TdApi.EditChatFolderInviteLink(chatFolderId,
    inviteLink, name, chatIds))

/**
 * Suspend function, which edits a non-primary invite link for a chat. Available for basic groups,
 * supergroups, and channels. Requires administrator privileges and canInviteUsers right in the chat
 * for own links and owner privileges for other links.
 *
 * @param chatId Chat identifier.  
 * @param inviteLink Invite link to be edited.  
 * @param name Invite link name; 0-32 characters.  
 * @param expirationDate Point in time (Unix timestamp) when the link will expire; pass 0 if never. 
 * 
 * @param memberLimit The maximum number of chat members that can join the chat via the link
 * simultaneously; 0-99999; pass 0 if not limited.  
 * @param createsJoinRequest Pass true if users joining the chat via the link need to be approved by
 * chat administrators. In this case, memberLimit must be 0.
 *
 * @return [ChatInviteLink] Contains a chat invite link.
 */
suspend fun TelegramFlow.editChatInviteLink(
  chatId: Long,
  inviteLink: String?,
  name: String?,
  expirationDate: Int,
  memberLimit: Int,
  createsJoinRequest: Boolean
): ChatInviteLink = this.sendFunctionAsync(TdApi.EditChatInviteLink(chatId, inviteLink, name,
    expirationDate, memberLimit, createsJoinRequest))

/**
 * Suspend function, which returns settings for automatic moving of chats to and from the Archive
 * chat lists.
 *
 * @return [ArchiveChatListSettings] Contains settings for automatic moving of chats to and from the
 * Archive chat lists.
 */
suspend fun TelegramFlow.getArchiveChatListSettings(): ArchiveChatListSettings =
    this.sendFunctionAsync(TdApi.GetArchiveChatListSettings())

/**
 * Suspend function, which returns the list of available chat boost slots for the current user.
 *
 * @return [ChatBoostSlots] Contains a list of chat boost slots.
 */
suspend fun TelegramFlow.getAvailableChatBoostSlots(): ChatBoostSlots =
    this.sendFunctionAsync(TdApi.GetAvailableChatBoostSlots())

/**
 * Suspend function, which returns information about a business chat link.
 *
 * @param linkName Name of the link.
 *
 * @return [BusinessChatLinkInfo] Contains information about a business chat link.
 */
suspend fun TelegramFlow.getBusinessChatLinkInfo(linkName: String?): BusinessChatLinkInfo =
    this.sendFunctionAsync(TdApi.GetBusinessChatLinkInfo(linkName))

/**
 * Suspend function, which returns business chat links created for the current account.
 *
 * @return [BusinessChatLinks] Contains a list of business chat links created by the user.
 */
suspend fun TelegramFlow.getBusinessChatLinks(): BusinessChatLinks =
    this.sendFunctionAsync(TdApi.GetBusinessChatLinks())

/**
 * Suspend function, which returns information about a chat by its identifier; this is an offline
 * request if the current user is not a bot.
 *
 * @param chatId Chat identifier.
 *
 * @return [Chat] A chat. (Can be a private chat, basic group, supergroup, or secret chat.)
 */
suspend fun TelegramFlow.getChat(chatId: Long): Chat = this.sendFunctionAsync(TdApi.GetChat(chatId))

/**
 * Suspend function, which returns the list of active stories posted by the given chat.
 *
 * @param chatId Chat identifier.
 *
 * @return [ChatActiveStories] Describes active stories posted by a chat.
 */
suspend fun TelegramFlow.getChatActiveStories(chatId: Long): ChatActiveStories =
    this.sendFunctionAsync(TdApi.GetChatActiveStories(chatId))

/**
 * Suspend function, which returns a list of administrators of the chat with their custom titles.
 *
 * @param chatId Chat identifier.
 *
 * @return [ChatAdministrators] Represents a list of chat administrators.
 */
suspend fun TelegramFlow.getChatAdministrators(chatId: Long): ChatAdministrators =
    this.sendFunctionAsync(TdApi.GetChatAdministrators(chatId))

/**
 * Suspend function, which returns the list of all stories posted by the given chat; requires
 * canEditStories right in the chat. The stories are returned in a reverse chronological order (i.e.,
 * in order of decreasing storyId). For optimal performance, the number of returned stories is chosen
 * by TDLib.
 *
 * @param chatId Chat identifier.  
 * @param fromStoryId Identifier of the story starting from which stories must be returned; use 0 to
 * get results from the last story.  
 * @param limit The maximum number of stories to be returned For optimal performance, the number of
 * returned stories is chosen by TDLib and can be smaller than the specified limit.
 *
 * @return [Stories] Represents a list of stories.
 */
suspend fun TelegramFlow.getChatArchivedStories(
  chatId: Long,
  fromStoryId: Int,
  limit: Int
): Stories = this.sendFunctionAsync(TdApi.GetChatArchivedStories(chatId, fromStoryId, limit))

/**
 * Suspend function, which returns the list of message sender identifiers, which can be used to send
 * messages in a chat.
 *
 * @param chatId Chat identifier.
 *
 * @return [ChatMessageSenders] Represents a list of message senders, which can be used to send
 * messages in a chat.
 */
suspend fun TelegramFlow.getChatAvailableMessageSenders(chatId: Long): ChatMessageSenders =
    this.sendFunctionAsync(TdApi.GetChatAvailableMessageSenders(chatId))

/**
 * Suspend function, which returns the list of features available for different chat boost levels;
 * this is an offline request.
 *
 * @param isChannel Pass true to get the list of features for channels; pass false to get the list
 * of features for supergroups.
 *
 * @return [ChatBoostFeatures] Contains a list of features available on the first chat boost levels.
 */
suspend fun TelegramFlow.getChatBoostFeatures(isChannel: Boolean): ChatBoostFeatures =
    this.sendFunctionAsync(TdApi.GetChatBoostFeatures(isChannel))

/**
 * Suspend function, which returns the list of features available on the specific chat boost level;
 * this is an offline request.
 *
 * @param isChannel Pass true to get the list of features for channels; pass false to get the list
 * of features for supergroups.  
 * @param level Chat boost level.
 *
 * @return [ChatBoostLevelFeatures] Contains a list of features available on a specific chat boost
 * level.
 */
suspend fun TelegramFlow.getChatBoostLevelFeatures(isChannel: Boolean, level: Int):
    ChatBoostLevelFeatures = this.sendFunctionAsync(TdApi.GetChatBoostLevelFeatures(isChannel,
    level))

/**
 * Suspend function, which returns an HTTPS link to boost the specified supergroup or channel chat.
 *
 * @param chatId Identifier of the chat.
 *
 * @return [ChatBoostLink] Contains an HTTPS link to boost a chat.
 */
suspend fun TelegramFlow.getChatBoostLink(chatId: Long): ChatBoostLink =
    this.sendFunctionAsync(TdApi.GetChatBoostLink(chatId))

/**
 * Suspend function, which returns information about a link to boost a chat. Can be called for any
 * internal link of the type internalLinkTypeChatBoost.
 *
 * @param url The link to boost a chat.
 *
 * @return [ChatBoostLinkInfo] Contains information about a link to boost a chat.
 */
suspend fun TelegramFlow.getChatBoostLinkInfo(url: String?): ChatBoostLinkInfo =
    this.sendFunctionAsync(TdApi.GetChatBoostLinkInfo(url))

/**
 * Suspend function, which returns the current boost status for a supergroup or a channel chat.
 *
 * @param chatId Identifier of the chat.
 *
 * @return [ChatBoostStatus] Describes current boost status of a chat.
 */
suspend fun TelegramFlow.getChatBoostStatus(chatId: Long): ChatBoostStatus =
    this.sendFunctionAsync(TdApi.GetChatBoostStatus(chatId))

/**
 * Suspend function, which returns the list of boosts applied to a chat; requires administrator
 * rights in the chat.
 *
 * @param chatId Identifier of the chat.  
 * @param onlyGiftCodes Pass true to receive only boosts received from gift codes and giveaways
 * created by the chat.  
 * @param offset Offset of the first entry to return as received from the previous request; use
 * empty string to get the first chunk of results.  
 * @param limit The maximum number of boosts to be returned; up to 100. For optimal performance, the
 * number of returned boosts can be smaller than the specified limit.
 *
 * @return [FoundChatBoosts] Contains a list of boosts applied to a chat.
 */
suspend fun TelegramFlow.getChatBoosts(
  chatId: Long,
  onlyGiftCodes: Boolean,
  offset: String?,
  limit: Int
): FoundChatBoosts = this.sendFunctionAsync(TdApi.GetChatBoosts(chatId, onlyGiftCodes, offset,
    limit))

/**
 * Suspend function, which returns information about a chat folder by its identifier.
 *
 * @param chatFolderId Chat folder identifier.
 *
 * @return [ChatFolder] Represents a folder for user chats.
 */
suspend fun TelegramFlow.getChatFolder(chatFolderId: Int): ChatFolder =
    this.sendFunctionAsync(TdApi.GetChatFolder(chatFolderId))

/**
 * Suspend function, which returns approximate number of chats in a being created chat folder. Main
 * and archive chat lists must be fully preloaded for this function to work correctly.
 *
 * @param folder The new chat folder.
 *
 * @return [Count] Contains a counter.
 */
suspend fun TelegramFlow.getChatFolderChatCount(folder: ChatFolder?): Count =
    this.sendFunctionAsync(TdApi.GetChatFolderChatCount(folder))

/**
 * Suspend function, which returns identifiers of pinned or always included chats from a chat
 * folder, which are suggested to be left when the chat folder is deleted.
 *
 * @param chatFolderId Chat folder identifier.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.getChatFolderChatsToLeave(chatFolderId: Int): Chats =
    this.sendFunctionAsync(TdApi.GetChatFolderChatsToLeave(chatFolderId))

/**
 * Suspend function, which returns default icon name for a folder. Can be called synchronously.
 *
 * @param folder Chat folder.
 *
 * @return [ChatFolderIcon] Represents an icon for a chat folder.
 */
suspend fun TelegramFlow.getChatFolderDefaultIconName(folder: ChatFolder?): ChatFolderIcon =
    this.sendFunctionAsync(TdApi.GetChatFolderDefaultIconName(folder))

/**
 * Suspend function, which returns invite links created by the current user for a shareable chat
 * folder.
 *
 * @param chatFolderId Chat folder identifier.
 *
 * @return [ChatFolderInviteLinks] Represents a list of chat folder invite links.
 */
suspend fun TelegramFlow.getChatFolderInviteLinks(chatFolderId: Int): ChatFolderInviteLinks =
    this.sendFunctionAsync(TdApi.GetChatFolderInviteLinks(chatFolderId))

/**
 * Suspend function, which returns new chats added to a shareable chat folder by its owner. The
 * method must be called at most once in getOption(&quot;chat_folder_new_chats_update_period&quot;) for
 * the given chat folder.
 *
 * @param chatFolderId Chat folder identifier.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.getChatFolderNewChats(chatFolderId: Int): Chats =
    this.sendFunctionAsync(TdApi.GetChatFolderNewChats(chatFolderId))

/**
 * Suspend function, which returns messages in a chat. The messages are returned in a reverse
 * chronological order (i.e., in order of decreasing messageId). For optimal performance, the number of
 * returned messages is chosen by TDLib. This is an offline request if onlyLocal is true.
 *
 * @param chatId Chat identifier.  
 * @param fromMessageId Identifier of the message starting from which history must be fetched; use 0
 * to get results from the last message.  
 * @param offset Specify 0 to get results from exactly the message fromMessageId or a negative
 * offset up to 99 to get additionally some newer messages.  
 * @param limit The maximum number of messages to be returned; must be positive and can't be greater
 * than 100. If the offset is negative, the limit must be greater than or equal to -offset. For optimal
 * performance, the number of returned messages is chosen by TDLib and can be smaller than the
 * specified limit.  
 * @param onlyLocal Pass true to get only messages that are available without sending network
 * requests.
 *
 * @return [Messages] Contains a list of messages.
 */
suspend fun TelegramFlow.getChatHistory(
  chatId: Long,
  fromMessageId: Long,
  offset: Int,
  limit: Int,
  onlyLocal: Boolean
): Messages = this.sendFunctionAsync(TdApi.GetChatHistory(chatId, fromMessageId, offset, limit,
    onlyLocal))

/**
 * Suspend function, which returns information about an invite link. Requires administrator
 * privileges and canInviteUsers right in the chat to get own links and owner privileges to get other
 * links.
 *
 * @param chatId Chat identifier.  
 * @param inviteLink Invite link to get.
 *
 * @return [ChatInviteLink] Contains a chat invite link.
 */
suspend fun TelegramFlow.getChatInviteLink(chatId: Long, inviteLink: String?): ChatInviteLink =
    this.sendFunctionAsync(TdApi.GetChatInviteLink(chatId, inviteLink))

/**
 * Suspend function, which returns the list of chat administrators with number of their invite
 * links. Requires owner privileges in the chat.
 *
 * @param chatId Chat identifier.
 *
 * @return [ChatInviteLinkCounts] Contains a list of chat invite link counts.
 */
suspend fun TelegramFlow.getChatInviteLinkCounts(chatId: Long): ChatInviteLinkCounts =
    this.sendFunctionAsync(TdApi.GetChatInviteLinkCounts(chatId))

/**
 * Suspend function, which returns chat members joined a chat via an invite link. Requires
 * administrator privileges and canInviteUsers right in the chat for own links and owner privileges for
 * other links.
 *
 * @param chatId Chat identifier.  
 * @param inviteLink Invite link for which to return chat members.  
 * @param offsetMember A chat member from which to return next chat members; pass null to get
 * results from the beginning.  
 * @param limit The maximum number of chat members to return; up to 100.
 *
 * @return [ChatInviteLinkMembers] Contains a list of chat members joined a chat via an invite link.
 */
suspend fun TelegramFlow.getChatInviteLinkMembers(
  chatId: Long,
  inviteLink: String?,
  offsetMember: ChatInviteLinkMember?,
  limit: Int
): ChatInviteLinkMembers = this.sendFunctionAsync(TdApi.GetChatInviteLinkMembers(chatId, inviteLink,
    offsetMember, limit))

/**
 * Suspend function, which returns invite links for a chat created by specified administrator.
 * Requires administrator privileges and canInviteUsers right in the chat to get own links and owner
 * privileges to get other links.
 *
 * @param chatId Chat identifier.  
 * @param creatorUserId User identifier of a chat administrator. Must be an identifier of the
 * current user for non-owner.  
 * @param isRevoked Pass true if revoked links needs to be returned instead of active or expired.  
 * @param offsetDate Creation date of an invite link starting after which to return invite links;
 * use 0 to get results from the beginning.  
 * @param offsetInviteLink Invite link starting after which to return invite links; use empty string
 * to get results from the beginning.  
 * @param limit The maximum number of invite links to return; up to 100.
 *
 * @return [ChatInviteLinks] Contains a list of chat invite links.
 */
suspend fun TelegramFlow.getChatInviteLinks(
  chatId: Long,
  creatorUserId: Long,
  isRevoked: Boolean,
  offsetDate: Int,
  offsetInviteLink: String?,
  limit: Int
): ChatInviteLinks = this.sendFunctionAsync(TdApi.GetChatInviteLinks(chatId, creatorUserId,
    isRevoked, offsetDate, offsetInviteLink, limit))

/**
 * Suspend function, which returns pending join requests in a chat.
 *
 * @param chatId Chat identifier.  
 * @param inviteLink Invite link for which to return join requests. If empty, all join requests will
 * be returned. Requires administrator privileges and canInviteUsers right in the chat for own links
 * and owner privileges for other links.  
 * @param query A query to search for in the first names, last names and usernames of the users to
 * return.  
 * @param offsetRequest A chat join request from which to return next requests; pass null to get
 * results from the beginning.  
 * @param limit The maximum number of requests to join the chat to return.
 *
 * @return [ChatJoinRequests] Contains a list of requests to join a chat.
 */
suspend fun TelegramFlow.getChatJoinRequests(
  chatId: Long,
  inviteLink: String?,
  query: String?,
  offsetRequest: ChatJoinRequest?,
  limit: Int
): ChatJoinRequests = this.sendFunctionAsync(TdApi.GetChatJoinRequests(chatId, inviteLink, query,
    offsetRequest, limit))

/**
 * Suspend function, which returns chat lists to which the chat can be added. This is an offline
 * request.
 *
 * @param chatId Chat identifier.
 *
 * @return [ChatLists] Contains a list of chat lists.
 */
suspend fun TelegramFlow.getChatListsToAddChat(chatId: Long): ChatLists =
    this.sendFunctionAsync(TdApi.GetChatListsToAddChat(chatId))

/**
 * Suspend function, which returns information about a single member of a chat.
 *
 * @param chatId Chat identifier.  
 * @param memberId Member identifier.
 *
 * @return [ChatMember] Describes a user or a chat as a member of another chat.
 */
suspend fun TelegramFlow.getChatMember(chatId: Long, memberId: MessageSender?): ChatMember =
    this.sendFunctionAsync(TdApi.GetChatMember(chatId, memberId))

/**
 * Suspend function, which returns the last message sent in a chat no later than the specified date.
 *
 * @param chatId Chat identifier.  
 * @param date Point in time (Unix timestamp) relative to which to search for messages.
 *
 * @return [Message] Describes a message.
 */
suspend fun TelegramFlow.getChatMessageByDate(chatId: Long, date: Int): Message =
    this.sendFunctionAsync(TdApi.GetChatMessageByDate(chatId, date))

/**
 * Suspend function, which returns information about the next messages of the specified type in the
 * chat split by days. Returns the results in reverse chronological order. Can return partial result
 * for the last returned day. Behavior of this method depends on the value of the option
 * &quot;utc_time_offset&quot;.
 *
 * @param chatId Identifier of the chat in which to return information about messages.  
 * @param filter Filter for message content. Filters searchMessagesFilterEmpty,
 * searchMessagesFilterMention, searchMessagesFilterUnreadMention, and
 * searchMessagesFilterUnreadReaction are unsupported in this function.  
 * @param fromMessageId The message identifier from which to return information about messages; use
 * 0 to get results from the last message.  
 * @param savedMessagesTopicId If not0, only messages in the specified Saved Messages topic will be
 * considered; pass 0 to consider all messages, or for chats other than Saved Messages.
 *
 * @return [MessageCalendar] Contains information about found messages, split by days according to
 * the option &quot;utc_time_offset&quot;.
 */
suspend fun TelegramFlow.getChatMessageCalendar(
  chatId: Long,
  filter: SearchMessagesFilter?,
  fromMessageId: Long,
  savedMessagesTopicId: Long
): MessageCalendar = this.sendFunctionAsync(TdApi.GetChatMessageCalendar(chatId, filter,
    fromMessageId, savedMessagesTopicId))

/**
 * Suspend function, which returns approximate number of messages of the specified type in the chat.
 *
 * @param chatId Identifier of the chat in which to count messages.  
 * @param filter Filter for message content; searchMessagesFilterEmpty is unsupported in this
 * function.  
 * @param savedMessagesTopicId If not 0, only messages in the specified Saved Messages topic will be
 * counted; pass 0 to count all messages, or for chats other than Saved Messages.  
 * @param returnLocal Pass true to get the number of messages without sending network requests,
 * or -1 if the number of messages is unknown locally.
 *
 * @return [Count] Contains a counter.
 */
suspend fun TelegramFlow.getChatMessageCount(
  chatId: Long,
  filter: SearchMessagesFilter?,
  savedMessagesTopicId: Long,
  returnLocal: Boolean
): Count = this.sendFunctionAsync(TdApi.GetChatMessageCount(chatId, filter, savedMessagesTopicId,
    returnLocal))

/**
 * Suspend function, which returns approximate 1-based position of a message among messages, which
 * can be found by the specified filter in the chat. Cannot be used in secret chats.
 *
 * @param chatId Identifier of the chat in which to find message position.  
 * @param messageId Message identifier.  
 * @param filter Filter for message content; searchMessagesFilterEmpty,
 * searchMessagesFilterUnreadMention, searchMessagesFilterUnreadReaction, and
 * searchMessagesFilterFailedToSend are unsupported in this function.  
 * @param messageThreadId If not 0, only messages in the specified thread will be considered;
 * supergroups only.  
 * @param savedMessagesTopicId If not 0, only messages in the specified Saved Messages topic will be
 * considered; pass 0 to consider all relevant messages, or for chats other than Saved Messages.
 *
 * @return [Count] Contains a counter.
 */
suspend fun TelegramFlow.getChatMessagePosition(
  chatId: Long,
  messageId: Long,
  filter: SearchMessagesFilter?,
  messageThreadId: Long,
  savedMessagesTopicId: Long
): Count = this.sendFunctionAsync(TdApi.GetChatMessagePosition(chatId, messageId, filter,
    messageThreadId, savedMessagesTopicId))

/**
 * Suspend function, which returns the list of chats with non-default notification settings for new
 * messages.
 *
 * @param scope If specified, only chats from the scope will be returned; pass null to return chats
 * from all scopes.  
 * @param compareSound Pass true to include in the response chats with only non-default sound.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.getChatNotificationSettingsExceptions(scope: NotificationSettingsScope?,
    compareSound: Boolean): Chats =
    this.sendFunctionAsync(TdApi.GetChatNotificationSettingsExceptions(scope, compareSound))

/**
 * Suspend function, which returns information about a newest pinned message in the chat.
 *
 * @param chatId Identifier of the chat the message belongs to.
 *
 * @return [Message] Describes a message.
 */
suspend fun TelegramFlow.getChatPinnedMessage(chatId: Long): Message =
    this.sendFunctionAsync(TdApi.GetChatPinnedMessage(chatId))

/**
 * Suspend function, which returns the list of stories that posted by the given chat to its chat
 * page. If fromStoryId == 0, then pinned stories are returned first. Then, stories are returned in a
 * reverse chronological order (i.e., in order of decreasing storyId). For optimal performance, the
 * number of returned stories is chosen by TDLib.
 *
 * @param chatId Chat identifier.  
 * @param fromStoryId Identifier of the story starting from which stories must be returned; use 0 to
 * get results from pinned and the newest story.  
 * @param limit The maximum number of stories to be returned For optimal performance, the number of
 * returned stories is chosen by TDLib and can be smaller than the specified limit.
 *
 * @return [Stories] Represents a list of stories.
 */
suspend fun TelegramFlow.getChatPostedToChatPageStories(
  chatId: Long,
  fromStoryId: Int,
  limit: Int
): Stories = this.sendFunctionAsync(TdApi.GetChatPostedToChatPageStories(chatId, fromStoryId,
    limit))

/**
 * Suspend function, which returns detailed revenue statistics about a chat. Currently, this method
 * can be used only for channels if supergroupFullInfo.canGetRevenueStatistics == true.
 *
 * @param chatId Chat identifier.  
 * @param isDark Pass true if a dark theme is used by the application.
 *
 * @return [ChatRevenueStatistics] A detailed statistics about revenue earned from sponsored
 * messages in a chat.
 */
suspend fun TelegramFlow.getChatRevenueStatistics(chatId: Long, isDark: Boolean):
    ChatRevenueStatistics = this.sendFunctionAsync(TdApi.GetChatRevenueStatistics(chatId, isDark))

/**
 * Suspend function, which returns the list of revenue transactions for a chat. Currently, this
 * method can be used only for channels if supergroupFullInfo.canGetRevenueStatistics == true.
 *
 * @param chatId Chat identifier.  
 * @param offset Number of transactions to skip.  
 * @param limit The maximum number of transactions to be returned; up to 200.
 *
 * @return [ChatRevenueTransactions] Contains a list of chat revenue transactions.
 */
suspend fun TelegramFlow.getChatRevenueTransactions(
  chatId: Long,
  offset: Int,
  limit: Int
): ChatRevenueTransactions = this.sendFunctionAsync(TdApi.GetChatRevenueTransactions(chatId, offset,
    limit))

/**
 * Suspend function, which returns URL for chat revenue withdrawal; requires owner privileges in the
 * chat. Currently, this method can be used only for channels if
 * supergroupFullInfo.canGetRevenueStatistics == true and
 * getOption(&quot;can_withdraw_chat_revenue&quot;).
 *
 * @param chatId Chat identifier.  
 * @param password The 2-step verification password of the current user.
 *
 * @return [HttpUrl] Contains an HTTP URL.
 */
suspend fun TelegramFlow.getChatRevenueWithdrawalUrl(chatId: Long, password: String?): HttpUrl =
    this.sendFunctionAsync(TdApi.GetChatRevenueWithdrawalUrl(chatId, password))

/**
 * Suspend function, which returns all scheduled messages in a chat. The messages are returned in a
 * reverse chronological order (i.e., in order of decreasing messageId).
 *
 * @param chatId Chat identifier.
 *
 * @return [Messages] Contains a list of messages.
 */
suspend fun TelegramFlow.getChatScheduledMessages(chatId: Long): Messages =
    this.sendFunctionAsync(TdApi.GetChatScheduledMessages(chatId))

/**
 * Suspend function, which returns approximate number of chats similar to the given chat.
 *
 * @param chatId Identifier of the target chat; must be an identifier of a channel chat.  
 * @param returnLocal Pass true to get the number of chats without sending network requests, or -1
 * if the number of chats is unknown locally.
 *
 * @return [Count] Contains a counter.
 */
suspend fun TelegramFlow.getChatSimilarChatCount(chatId: Long, returnLocal: Boolean): Count =
    this.sendFunctionAsync(TdApi.GetChatSimilarChatCount(chatId, returnLocal))

/**
 * Suspend function, which returns a list of chats similar to the given chat.
 *
 * @param chatId Identifier of the target chat; must be an identifier of a channel chat.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.getChatSimilarChats(chatId: Long): Chats =
    this.sendFunctionAsync(TdApi.GetChatSimilarChats(chatId))

/**
 * Suspend function, which returns sparse positions of messages of the specified type in the chat to
 * be used for shared media scroll implementation. Returns the results in reverse chronological order
 * (i.e., in order of decreasing messageId). Cannot be used in secret chats or with
 * searchMessagesFilterFailedToSend filter without an enabled message database.
 *
 * @param chatId Identifier of the chat in which to return information about message positions.  
 * @param filter Filter for message content. Filters searchMessagesFilterEmpty,
 * searchMessagesFilterMention, searchMessagesFilterUnreadMention, and
 * searchMessagesFilterUnreadReaction are unsupported in this function.  
 * @param fromMessageId The message identifier from which to return information about message
 * positions.  
 * @param limit The expected number of message positions to be returned; 50-2000. A smaller number
 * of positions can be returned, if there are not enough appropriate messages.  
 * @param savedMessagesTopicId If not 0, only messages in the specified Saved Messages topic will be
 * considered; pass 0 to consider all messages, or for chats other than Saved Messages.
 *
 * @return [MessagePositions] Contains a list of message positions.
 */
suspend fun TelegramFlow.getChatSparseMessagePositions(
  chatId: Long,
  filter: SearchMessagesFilter?,
  fromMessageId: Long,
  limit: Int,
  savedMessagesTopicId: Long
): MessagePositions = this.sendFunctionAsync(TdApi.GetChatSparseMessagePositions(chatId, filter,
    fromMessageId, limit, savedMessagesTopicId))

/**
 * Suspend function, which returns sponsored messages to be shown in a chat; for channel chats only.
 *
 * @param chatId Identifier of the chat.
 *
 * @return [SponsoredMessages] Contains a list of sponsored messages.
 */
suspend fun TelegramFlow.getChatSponsoredMessages(chatId: Long): SponsoredMessages =
    this.sendFunctionAsync(TdApi.GetChatSponsoredMessages(chatId))

/**
 * Suspend function, which returns detailed statistics about a chat. Currently, this method can be
 * used only for supergroups and channels. Can be used only if supergroupFullInfo.canGetStatistics ==
 * true.
 *
 * @param chatId Chat identifier.  
 * @param isDark Pass true if a dark theme is used by the application.
 *
 * @return [ChatStatistics] This class is an abstract base class.
 */
suspend fun TelegramFlow.getChatStatistics(chatId: Long, isDark: Boolean): ChatStatistics =
    this.sendFunctionAsync(TdApi.GetChatStatistics(chatId, isDark))

/**
 * Suspend function, which returns interactions with a story posted in a chat. Can be used only if
 * story is posted on behalf of a chat and the user is an administrator in the chat.
 *
 * @param storySenderChatId The identifier of the sender of the story.  
 * @param storyId Story identifier.  
 * @param reactionType Pass the default heart reaction or a suggested reaction type to receive only
 * interactions with the specified reaction type; pass null to receive all interactions.  
 * @param preferForwards Pass true to get forwards and reposts first, then reactions, then other
 * views; pass false to get interactions sorted just by interaction date.  
 * @param offset Offset of the first entry to return as received from the previous request; use
 * empty string to get the first chunk of results.  
 * @param limit The maximum number of story interactions to return.
 *
 * @return [StoryInteractions] Represents a list of interactions with a story.
 */
suspend fun TelegramFlow.getChatStoryInteractions(
  storySenderChatId: Long,
  storyId: Int,
  reactionType: ReactionType?,
  preferForwards: Boolean,
  offset: String?,
  limit: Int
): StoryInteractions = this.sendFunctionAsync(TdApi.GetChatStoryInteractions(storySenderChatId,
    storyId, reactionType, preferForwards, offset, limit))

/**
 * Suspend function, which returns an ordered list of chats from the beginning of a chat list. For
 * informational purposes only. Use loadChats and updates processing instead to maintain chat lists in
 * a consistent state.
 *
 * @param chatList The chat list in which to return chats; pass null to get chats from the main chat
 * list.  
 * @param limit The maximum number of chats to be returned.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.getChats(chatList: ChatList?, limit: Int): Chats =
    this.sendFunctionAsync(TdApi.GetChats(chatList, limit))

/**
 * Suspend function, which returns identifiers of chats from a chat folder, suitable for adding to a
 * chat folder invite link.
 *
 * @param chatFolderId Chat folder identifier.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.getChatsForChatFolderInviteLink(chatFolderId: Int): Chats =
    this.sendFunctionAsync(TdApi.GetChatsForChatFolderInviteLink(chatFolderId))

/**
 * Suspend function, which returns supergroup and channel chats in which the current user has the
 * right to post stories. The chats must be rechecked with canSendStory before actually trying to post
 * a story there.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.getChatsToSendStories(): Chats =
    this.sendFunctionAsync(TdApi.GetChatsToSendStories())

/**
 * Suspend function, which returns a list of public chats of the specified type, owned by the user.
 *
 * @param type Type of the public chats to return.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.getCreatedPublicChats(type: PublicChatType?): Chats =
    this.sendFunctionAsync(TdApi.GetCreatedPublicChats(type))

/**
 * Suspend function, which returns a list of recently inactive supergroups and channels. Can be used
 * when user reaches limit on the number of joined supergroups and channels and receives
 * CHANNELSTOOMUCH error. Also, the limit can be increased with Telegram Premium.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.getInactiveSupergroupChats(): Chats =
    this.sendFunctionAsync(TdApi.GetInactiveSupergroupChats())

/**
 * Suspend function, which returns privacy settings for new chat creation.
 *
 * @return [NewChatPrivacySettings] Contains privacy settings for new chats with non-contacts.
 */
suspend fun TelegramFlow.getNewChatPrivacySettings(): NewChatPrivacySettings =
    this.sendFunctionAsync(TdApi.GetNewChatPrivacySettings())

/**
 * Suspend function, which returns recently opened chats; this is an offline request. Returns chats
 * in the order of last opening.
 *
 * @param limit The maximum number of chats to be returned.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.getRecentlyOpenedChats(limit: Int): Chats =
    this.sendFunctionAsync(TdApi.GetRecentlyOpenedChats(limit))

/**
 * Suspend function, which returns recommended chat folders for the current user.
 *
 * @return [RecommendedChatFolders] Contains a list of recommended chat folders.
 */
suspend fun TelegramFlow.getRecommendedChatFolders(): RecommendedChatFolders =
    this.sendFunctionAsync(TdApi.GetRecommendedChatFolders())

/**
 * Suspend function, which returns a list of channel chats recommended to the current user.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.getRecommendedChats(): Chats =
    this.sendFunctionAsync(TdApi.GetRecommendedChats())

/**
 * Suspend function, which returns information about a secret chat by its identifier. This is an
 * offline request.
 *
 * @param secretChatId Secret chat identifier.
 *
 * @return [SecretChat] Represents a secret chat.
 */
suspend fun TelegramFlow.getSecretChat(secretChatId: Int): SecretChat =
    this.sendFunctionAsync(TdApi.GetSecretChat(secretChatId))

/**
 * Suspend function, which returns a list of basic group and supergroup chats, which can be used as
 * a discussion group for a channel. Returned basic group chats must be first upgraded to supergroups
 * before they can be set as a discussion group. To set a returned supergroup as a discussion group,
 * access to its old messages must be enabled using toggleSupergroupIsAllHistoryAvailable first.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.getSuitableDiscussionChats(): Chats =
    this.sendFunctionAsync(TdApi.GetSuitableDiscussionChats())

/**
 * Suspend function, which returns a list of channel chats, which can be used as a personal chat.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.getSuitablePersonalChats(): Chats =
    this.sendFunctionAsync(TdApi.GetSuitablePersonalChats())

/**
 * Suspend function, which returns a list of frequently used chats.
 *
 * @param category Category of chats to be returned.  
 * @param limit The maximum number of chats to be returned; up to 30.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.getTopChats(category: TopChatCategory?, limit: Int): Chats =
    this.sendFunctionAsync(TdApi.GetTopChats(category, limit))

/**
 * Suspend function, which returns the list of boosts applied to a chat by a given user; requires
 * administrator rights in the chat; for bots only.
 *
 * @param chatId Identifier of the chat.  
 * @param userId Identifier of the user.
 *
 * @return [FoundChatBoosts] Contains a list of boosts applied to a chat.
 */
suspend fun TelegramFlow.getUserChatBoosts(chatId: Long, userId: Long): FoundChatBoosts =
    this.sendFunctionAsync(TdApi.GetUserChatBoosts(chatId, userId))

/**
 * Suspend function, which returns the list of participant identifiers, on whose behalf a video chat
 * in the chat can be joined.
 *
 * @param chatId Chat identifier.
 *
 * @return [MessageSenders] Represents a list of message senders.
 */
suspend fun TelegramFlow.getVideoChatAvailableParticipants(chatId: Long): MessageSenders =
    this.sendFunctionAsync(TdApi.GetVideoChatAvailableParticipants(chatId))

/**
 * Suspend function, which returns RTMP URL for streaming to the chat; requires owner privileges.
 *
 * @param chatId Chat identifier.
 *
 * @return [RtmpUrl] Represents an RTMP URL.
 */
suspend fun TelegramFlow.getVideoChatRtmpUrl(chatId: Long): RtmpUrl =
    this.sendFunctionAsync(TdApi.GetVideoChatRtmpUrl(chatId))

/**
 * Suspend function, which adds the current user as a new member to a chat. Private and secret chats
 * can't be joined using this method. May return an error with a message
 * &quot;INVITE_REQUEST_SENT&quot; if only a join request was created.
 *
 * @param chatId Chat identifier.
 */
suspend fun TelegramFlow.joinChat(chatId: Long) = this.sendFunctionLaunch(TdApi.JoinChat(chatId))

/**
 * Suspend function, which uses an invite link to add the current user to the chat if possible. May
 * return an error with a message &quot;INVITE_REQUEST_SENT&quot; if only a join request was created.
 *
 * @param inviteLink Invite link to use.
 *
 * @return [Chat] A chat. (Can be a private chat, basic group, supergroup, or secret chat.)
 */
suspend fun TelegramFlow.joinChatByInviteLink(inviteLink: String?): Chat =
    this.sendFunctionAsync(TdApi.JoinChatByInviteLink(inviteLink))

/**
 * Suspend function, which removes the current user from chat members. Private and secret chats
 * can't be left using this method.
 *
 * @param chatId Chat identifier.
 */
suspend fun TelegramFlow.leaveChat(chatId: Long) = this.sendFunctionLaunch(TdApi.LeaveChat(chatId))

/**
 * Suspend function, which loads more chats from a chat list. The loaded chats and their positions
 * in the chat list will be sent through updates. Chats are sorted by the pair (chat.position.order,
 * chat.id) in descending order. Returns a 404 error if all chats have been loaded.
 *
 * @param chatList The chat list in which to load chats; pass null to load chats from the main chat
 * list.  
 * @param limit The maximum number of chats to be loaded. For optimal performance, the number of
 * loaded chats is chosen by TDLib and can be smaller than the specified limit, even if the end of the
 * list is not reached.
 */
suspend fun TelegramFlow.loadChats(chatList: ChatList?, limit: Int) =
    this.sendFunctionLaunch(TdApi.LoadChats(chatList, limit))

/**
 * Suspend function, which informs TDLib that the chat is opened by the user. Many useful activities
 * depend on the chat being opened or closed (e.g., in supergroups and channels all updates are
 * received only for opened chats).
 *
 * @param chatId Chat identifier.
 */
suspend fun TelegramFlow.openChat(chatId: Long) = this.sendFunctionLaunch(TdApi.OpenChat(chatId))

/**
 * Suspend function, which informs TDLib that a chat was opened from the list of similar chats. The
 * method is independent of openChat and closeChat methods.
 *
 * @param chatId Identifier of the original chat, which similar chats were requested.  
 * @param openedChatId Identifier of the opened chat.
 */
suspend fun TelegramFlow.openChatSimilarChat(chatId: Long, openedChatId: Long) =
    this.sendFunctionLaunch(TdApi.OpenChatSimilarChat(chatId, openedChatId))

/**
 * Suspend function, which pins a message in a chat; requires canPinMessages member right if the
 * chat is a basic group or supergroup, or canEditMessages administrator right if the chat is a
 * channel.
 *
 * @param chatId Identifier of the chat.  
 * @param messageId Identifier of the new pinned message.  
 * @param disableNotification Pass true to disable notification about the pinned message.
 * Notifications are always disabled in channels and private chats.  
 * @param onlyForSelf Pass true to pin the message only for self; private chats only.
 */
suspend fun TelegramFlow.pinChatMessage(
  chatId: Long,
  messageId: Long,
  disableNotification: Boolean,
  onlyForSelf: Boolean
) = this.sendFunctionLaunch(TdApi.PinChatMessage(chatId, messageId, disableNotification,
    onlyForSelf))

/**
 * Suspend function, which process new chats added to a shareable chat folder by its owner.
 *
 * @param chatFolderId Chat folder identifier.  
 * @param addedChatIds Identifiers of the new chats, which are added to the chat folder. The chats
 * are automatically joined if they aren't joined yet.
 */
suspend fun TelegramFlow.processChatFolderNewChats(chatFolderId: Int, addedChatIds: LongArray?) =
    this.sendFunctionLaunch(TdApi.ProcessChatFolderNewChats(chatFolderId, addedChatIds))

/**
 * Suspend function, which handles a pending join request in a chat.
 *
 * @param chatId Chat identifier.  
 * @param userId Identifier of the user that sent the request.  
 * @param approve Pass true to approve the request; pass false to decline it.
 */
suspend fun TelegramFlow.processChatJoinRequest(
  chatId: Long,
  userId: Long,
  approve: Boolean
) = this.sendFunctionLaunch(TdApi.ProcessChatJoinRequest(chatId, userId, approve))

/**
 * Suspend function, which handles all pending join requests for a given link in a chat.
 *
 * @param chatId Chat identifier.  
 * @param inviteLink Invite link for which to process join requests. If empty, all join requests
 * will be processed. Requires administrator privileges and canInviteUsers right in the chat for own
 * links and owner privileges for other links.  
 * @param approve Pass true to approve all requests; pass false to decline them.
 */
suspend fun TelegramFlow.processChatJoinRequests(
  chatId: Long,
  inviteLink: String?,
  approve: Boolean
) = this.sendFunctionLaunch(TdApi.ProcessChatJoinRequests(chatId, inviteLink, approve))

/**
 * Suspend function, which marks all mentions in a chat as read.
 *
 * @param chatId Chat identifier.
 */
suspend fun TelegramFlow.readAllChatMentions(chatId: Long) =
    this.sendFunctionLaunch(TdApi.ReadAllChatMentions(chatId))

/**
 * Suspend function, which marks all reactions in a chat or a forum topic as read.
 *
 * @param chatId Chat identifier.
 */
suspend fun TelegramFlow.readAllChatReactions(chatId: Long) =
    this.sendFunctionLaunch(TdApi.ReadAllChatReactions(chatId))

/**
 * Suspend function, which traverse all chats in a chat list and marks all messages in the chats as
 * read.
 *
 * @param chatList Chat list in which to mark all chats as read.
 */
suspend fun TelegramFlow.readChatList(chatList: ChatList?) =
    this.sendFunctionLaunch(TdApi.ReadChatList(chatList))

/**
 * Suspend function, which removes the connected business bot from a specific chat by adding the
 * chat to businessRecipients.excludedChatIds.
 *
 * @param chatId Chat identifier.
 */
suspend fun TelegramFlow.removeBusinessConnectedBotFromChat(chatId: Long) =
    this.sendFunctionLaunch(TdApi.RemoveBusinessConnectedBotFromChat(chatId))

/**
 * Suspend function, which removes a chat action bar without any other action.
 *
 * @param chatId Chat identifier.
 */
suspend fun TelegramFlow.removeChatActionBar(chatId: Long) =
    this.sendFunctionLaunch(TdApi.RemoveChatActionBar(chatId))

/**
 * Suspend function, which removes a chat from the list of recently found chats.
 *
 * @param chatId Identifier of the chat to be removed.
 */
suspend fun TelegramFlow.removeRecentlyFoundChat(chatId: Long) =
    this.sendFunctionLaunch(TdApi.RemoveRecentlyFoundChat(chatId))

/**
 * Suspend function, which removes a chat from the list of frequently used chats. Supported only if
 * the chat info database is enabled.
 *
 * @param category Category of frequently used chats.  
 * @param chatId Chat identifier.
 */
suspend fun TelegramFlow.removeTopChat(category: TopChatCategory?, chatId: Long) =
    this.sendFunctionLaunch(TdApi.RemoveTopChat(category, chatId))

/**
 * Suspend function, which changes the order of chat folders.
 *
 * @param chatFolderIds Identifiers of chat folders in the new correct order.  
 * @param mainChatListPosition Position of the main chat list among chat folders, 0-based. Can be
 * non-zero only for Premium users.
 */
suspend fun TelegramFlow.reorderChatFolders(chatFolderIds: IntArray?, mainChatListPosition: Int) =
    this.sendFunctionLaunch(TdApi.ReorderChatFolders(chatFolderIds, mainChatListPosition))

/**
 * Suspend function, which replaces current primary invite link for a chat with a new primary invite
 * link. Available for basic groups, supergroups, and channels. Requires administrator privileges and
 * canInviteUsers right.
 *
 * @param chatId Chat identifier.
 *
 * @return [ChatInviteLink] Contains a chat invite link.
 */
suspend fun TelegramFlow.replacePrimaryChatInviteLink(chatId: Long): ChatInviteLink =
    this.sendFunctionAsync(TdApi.ReplacePrimaryChatInviteLink(chatId))

/**
 * Suspend function, which replaces the current RTMP URL for streaming to the chat; requires owner
 * privileges.
 *
 * @param chatId Chat identifier.
 *
 * @return [RtmpUrl] Represents an RTMP URL.
 */
suspend fun TelegramFlow.replaceVideoChatRtmpUrl(chatId: Long): RtmpUrl =
    this.sendFunctionAsync(TdApi.ReplaceVideoChatRtmpUrl(chatId))

/**
 * Suspend function, which reports a chat to the Telegram moderators. A chat can be reported only
 * from the chat action bar, or if chat.canBeReported.
 *
 * @param chatId Chat identifier.  
 * @param messageIds Identifiers of reported messages; may be empty to report the whole chat.  
 * @param reason The reason for reporting the chat.  
 * @param text Additional report details; 0-1024 characters.
 */
suspend fun TelegramFlow.reportChat(
  chatId: Long,
  messageIds: LongArray?,
  reason: ReportReason?,
  text: String?
) = this.sendFunctionLaunch(TdApi.ReportChat(chatId, messageIds, reason, text))

/**
 * Suspend function, which reports a chat photo to the Telegram moderators. A chat photo can be
 * reported only if chat.canBeReported.
 *
 * @param chatId Chat identifier.  
 * @param fileId Identifier of the photo to report. Only full photos from chatPhoto can be reported.
 *  
 * @param reason The reason for reporting the chat photo.  
 * @param text Additional report details; 0-1024 characters.
 */
suspend fun TelegramFlow.reportChatPhoto(
  chatId: Long,
  fileId: Int,
  reason: ReportReason?,
  text: String?
) = this.sendFunctionLaunch(TdApi.ReportChatPhoto(chatId, fileId, reason, text))

/**
 * Suspend function, which reports a sponsored message to Telegram moderators.
 *
 * @param chatId Chat identifier of the sponsored message.  
 * @param messageId Identifier of the sponsored message.  
 * @param optionId Option identifier chosen by the user; leave empty for the initial request.
 *
 * @return [ReportChatSponsoredMessageResult] This class is an abstract base class.
 */
suspend fun TelegramFlow.reportChatSponsoredMessage(
  chatId: Long,
  messageId: Long,
  optionId: ByteArray?
): ReportChatSponsoredMessageResult =
    this.sendFunctionAsync(TdApi.ReportChatSponsoredMessage(chatId, messageId, optionId))

/**
 * Suspend function, which revokes invite link for a chat. Available for basic groups, supergroups,
 * and channels. Requires administrator privileges and canInviteUsers right in the chat for own links
 * and owner privileges for other links. If a primary link is revoked, then additionally to the revoked
 * link returns new primary link.
 *
 * @param chatId Chat identifier.  
 * @param inviteLink Invite link to be revoked.
 *
 * @return [ChatInviteLinks] Contains a list of chat invite links.
 */
suspend fun TelegramFlow.revokeChatInviteLink(chatId: Long, inviteLink: String?): ChatInviteLinks =
    this.sendFunctionAsync(TdApi.RevokeChatInviteLink(chatId, inviteLink))

/**
 * Suspend function, which searches for a specified query in the first name, last name and usernames
 * of the members of a specified chat. Requires administrator rights if the chat is a channel.
 *
 * @param chatId Chat identifier.  
 * @param query Query to search for.  
 * @param limit The maximum number of users to be returned; up to 200.  
 * @param filter The type of users to search for; pass null to search among all chat members.
 *
 * @return [ChatMembers] Contains a list of chat members.
 */
suspend fun TelegramFlow.searchChatMembers(
  chatId: Long,
  query: String?,
  limit: Int,
  filter: ChatMembersFilter?
): ChatMembers = this.sendFunctionAsync(TdApi.SearchChatMembers(chatId, query, limit, filter))

/**
 * Suspend function, which searches for messages with given words in the chat. Returns the results
 * in reverse chronological order, i.e. in order of decreasing messageId. Cannot be used in secret
 * chats with a non-empty query (searchSecretMessages must be used instead), or without an enabled
 * message database. For optimal performance, the number of returned messages is chosen by TDLib and
 * can be smaller than the specified limit. A combination of query, senderId, filter and
 * messageThreadId search criteria is expected to be supported, only if it is required for Telegram
 * official application implementation.
 *
 * @param chatId Identifier of the chat in which to search messages.  
 * @param query Query to search for.  
 * @param senderId Identifier of the sender of messages to search for; pass null to search for
 * messages from any sender. Not supported in secret chats.  
 * @param fromMessageId Identifier of the message starting from which history must be fetched; use 0
 * to get results from the last message.  
 * @param offset Specify 0 to get results from exactly the message fromMessageId or a negative
 * offset to get the specified message and some newer messages.  
 * @param limit The maximum number of messages to be returned; must be positive and can't be greater
 * than 100. If the offset is negative, the limit must be greater than -offset. For optimal
 * performance, the number of returned messages is chosen by TDLib and can be smaller than the
 * specified limit.  
 * @param filter Additional filter for messages to search; pass null to search for all messages.  
 * @param messageThreadId If not 0, only messages in the specified thread will be returned;
 * supergroups only.  
 * @param savedMessagesTopicId If not 0, only messages in the specified Saved Messages topic will be
 * returned; pass 0 to return all messages, or for chats other than Saved Messages.
 *
 * @return [FoundChatMessages] Contains a list of messages found by a search in a given chat.
 */
suspend fun TelegramFlow.searchChatMessages(
  chatId: Long,
  query: String?,
  senderId: MessageSender?,
  fromMessageId: Long,
  offset: Int,
  limit: Int,
  filter: SearchMessagesFilter?,
  messageThreadId: Long,
  savedMessagesTopicId: Long
): FoundChatMessages = this.sendFunctionAsync(TdApi.SearchChatMessages(chatId, query, senderId,
    fromMessageId, offset, limit, filter, messageThreadId, savedMessagesTopicId))

/**
 * Suspend function, which returns information about the recent locations of chat members that were
 * sent to the chat. Returns up to 1 location message per user.
 *
 * @param chatId Chat identifier.  
 * @param limit The maximum number of messages to be returned.
 *
 * @return [Messages] Contains a list of messages.
 */
suspend fun TelegramFlow.searchChatRecentLocationMessages(chatId: Long, limit: Int): Messages =
    this.sendFunctionAsync(TdApi.SearchChatRecentLocationMessages(chatId, limit))

/**
 * Suspend function, which searches for the specified query in the title and username of already
 * known chats; this is an offline request. Returns chats in the order seen in the main chat list.
 *
 * @param query Query to search for. If the query is empty, returns up to 50 recently found chats.  
 * @param limit The maximum number of chats to be returned.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.searchChats(query: String?, limit: Int): Chats =
    this.sendFunctionAsync(TdApi.SearchChats(query, limit))

/**
 * Suspend function, which returns a list of users and location-based supergroups nearby. The list
 * of users nearby will be updated for 60 seconds after the request by the updates updateUsersNearby.
 * The request must be sent again every 25 seconds with adjusted location to not miss new chats.
 *
 * @param location Current user location.
 *
 * @return [ChatsNearby] Represents a list of chats located nearby.
 */
suspend fun TelegramFlow.searchChatsNearby(location: Location?): ChatsNearby =
    this.sendFunctionAsync(TdApi.SearchChatsNearby(location))

/**
 * Suspend function, which searches for the specified query in the title and username of already
 * known chats via request to the server. Returns chats in the order seen in the main chat list.
 *
 * @param query Query to search for.  
 * @param limit The maximum number of chats to be returned.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.searchChatsOnServer(query: String?, limit: Int): Chats =
    this.sendFunctionAsync(TdApi.SearchChatsOnServer(query, limit))

/**
 * Suspend function, which searches a public chat by its username. Currently, only private chats,
 * supergroups and channels can be public. Returns the chat if found; otherwise, an error is returned.
 *
 * @param username Username to be resolved.
 *
 * @return [Chat] A chat. (Can be a private chat, basic group, supergroup, or secret chat.)
 */
suspend fun TelegramFlow.searchPublicChat(username: String?): Chat =
    this.sendFunctionAsync(TdApi.SearchPublicChat(username))

/**
 * Suspend function, which searches public chats by looking for specified query in their username
 * and title. Currently, only private chats, supergroups and channels can be public. Returns a
 * meaningful number of results. Excludes private chats with contacts and chats from the chat list from
 * the results.
 *
 * @param query Query to search for.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.searchPublicChats(query: String?): Chats =
    this.sendFunctionAsync(TdApi.SearchPublicChats(query))

/**
 * Suspend function, which searches for the specified query in the title and username of up to 50
 * recently found chats; this is an offline request.
 *
 * @param query Query to search for.  
 * @param limit The maximum number of chats to be returned.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.searchRecentlyFoundChats(query: String?, limit: Int): Chats =
    this.sendFunctionAsync(TdApi.SearchRecentlyFoundChats(query, limit))

/**
 * Suspend function, which sends a notification about user activity in a chat.
 *
 * @param chatId Chat identifier.  
 * @param messageThreadId If not 0, the message thread identifier in which the action was performed.
 *  
 * @param businessConnectionId Unique identifier of business connection on behalf of which to send
 * the request; for bots only.  
 * @param action The action description; pass null to cancel the currently active action.
 */
suspend fun TelegramFlow.sendChatAction(
  chatId: Long,
  messageThreadId: Long,
  businessConnectionId: String?,
  action: ChatAction?
) = this.sendFunctionLaunch(TdApi.SendChatAction(chatId, messageThreadId, businessConnectionId,
    action))

/**
 * Suspend function, which changes settings for automatic moving of chats to and from the Archive
 * chat lists.
 *
 * @param settings New settings.
 */
suspend fun TelegramFlow.setArchiveChatListSettings(settings: ArchiveChatListSettings?) =
    this.sendFunctionLaunch(TdApi.SetArchiveChatListSettings(settings))

/**
 * Suspend function, which changes accent color and background custom emoji of a channel chat.
 * Requires canChangeInfo administrator right.
 *
 * @param chatId Chat identifier.  
 * @param accentColorId Identifier of the accent color to use. The chat must have at least
 * accentColor.minChannelChatBoostLevel boost level to pass the corresponding color.  
 * @param backgroundCustomEmojiId Identifier of a custom emoji to be shown on the reply header and
 * link preview background; 0 if none. Use chatBoostLevelFeatures.canSetBackgroundCustomEmoji to check
 * whether a custom emoji can be set.
 */
suspend fun TelegramFlow.setChatAccentColor(
  chatId: Long,
  accentColorId: Int,
  backgroundCustomEmojiId: Long
) = this.sendFunctionLaunch(TdApi.SetChatAccentColor(chatId, accentColorId,
    backgroundCustomEmojiId))

/**
 * Suspend function, which changes story list in which stories from the chat are shown.
 *
 * @param chatId Identifier of the chat that posted stories.  
 * @param storyList New list for active stories posted by the chat.
 */
suspend fun TelegramFlow.setChatActiveStoriesList(chatId: Long, storyList: StoryList?) =
    this.sendFunctionLaunch(TdApi.SetChatActiveStoriesList(chatId, storyList))

/**
 * Suspend function, which changes reactions, available in a chat. Available for basic groups,
 * supergroups, and channels. Requires canChangeInfo member right.
 *
 * @param chatId Identifier of the chat.  
 * @param availableReactions Reactions available in the chat. All explicitly specified emoji
 * reactions must be active. In channel chats up to the chat's boost level custom emoji reactions can
 * be explicitly specified.
 */
suspend fun TelegramFlow.setChatAvailableReactions(chatId: Long,
    availableReactions: ChatAvailableReactions?) =
    this.sendFunctionLaunch(TdApi.SetChatAvailableReactions(chatId, availableReactions))

/**
 * Suspend function, which sets the background in a specific chat. Supported only in private and
 * secret chats with non-deleted users, and in chats with sufficient boost level and canChangeInfo
 * administrator right.
 *
 * @param chatId Chat identifier.  
 * @param background The input background to use; pass null to create a new filled or chat theme
 * background.  
 * @param type Background type; pass null to use default background type for the chosen background;
 * backgroundTypeChatTheme isn't supported for private and secret chats. Use
 * chatBoostLevelFeatures.chatThemeBackgroundCount and chatBoostLevelFeatures.canSetCustomBackground to
 * check whether the background type can be set in the boosted chat.  
 * @param darkThemeDimming Dimming of the background in dark themes, as a percentage; 0-100. Applied
 * only to Wallpaper and Fill types of background.  
 * @param onlyForSelf Pass true to set background only for self; pass false to set background for
 * all chat users. Always false for backgrounds set in boosted chats. Background can be set for both
 * users only by Telegram Premium users and if set background isn't of the type
 * inputBackgroundPrevious.
 */
suspend fun TelegramFlow.setChatBackground(
  chatId: Long,
  background: InputBackground?,
  type: BackgroundType?,
  darkThemeDimming: Int,
  onlyForSelf: Boolean
) = this.sendFunctionLaunch(TdApi.SetChatBackground(chatId, background, type, darkThemeDimming,
    onlyForSelf))

/**
 * Suspend function, which changes application-specific data associated with a chat.
 *
 * @param chatId Chat identifier.  
 * @param clientData New value of clientData.
 */
suspend fun TelegramFlow.setChatClientData(chatId: Long, clientData: String?) =
    this.sendFunctionLaunch(TdApi.SetChatClientData(chatId, clientData))

/**
 * Suspend function, which changes information about a chat. Available for basic groups,
 * supergroups, and channels. Requires canChangeInfo member right.
 *
 * @param chatId Identifier of the chat.  
 * @param description New chat description; 0-255 characters.
 */
suspend fun TelegramFlow.setChatDescription(chatId: Long, description: String?) =
    this.sendFunctionLaunch(TdApi.SetChatDescription(chatId, description))

/**
 * Suspend function, which changes the discussion group of a channel chat; requires canChangeInfo
 * administrator right in the channel if it is specified.
 *
 * @param chatId Identifier of the channel chat. Pass 0 to remove a link from the supergroup passed
 * in the second argument to a linked channel chat (requires canPinMessages member right in the
 * supergroup).  
 * @param discussionChatId Identifier of a new channel's discussion group. Use 0 to remove the
 * discussion group. Use the method getSuitableDiscussionChats to find all suitable groups. Basic group
 * chats must be first upgraded to supergroup chats. If new chat members don't have access to old
 * messages in the supergroup, then toggleSupergroupIsAllHistoryAvailable must be used first to change
 * that.
 */
suspend fun TelegramFlow.setChatDiscussionGroup(chatId: Long, discussionChatId: Long) =
    this.sendFunctionLaunch(TdApi.SetChatDiscussionGroup(chatId, discussionChatId))

/**
 * Suspend function, which changes the draft message in a chat.
 *
 * @param chatId Chat identifier.  
 * @param messageThreadId If not 0, the message thread identifier in which the draft was changed.  
 * @param draftMessage New draft message; pass null to remove the draft. All files in draft message
 * content must be of the type inputFileLocal. Media thumbnails and captions are ignored.
 */
suspend fun TelegramFlow.setChatDraftMessage(
  chatId: Long,
  messageThreadId: Long,
  draftMessage: DraftMessage?
) = this.sendFunctionLaunch(TdApi.SetChatDraftMessage(chatId, messageThreadId, draftMessage))

/**
 * Suspend function, which changes the location of a chat. Available only for some location-based
 * supergroups, use supergroupFullInfo.canSetLocation to check whether the method is allowed to use.
 *
 * @param chatId Chat identifier.  
 * @param location New location for the chat; must be valid and not null.
 */
suspend fun TelegramFlow.setChatLocation(chatId: Long, location: ChatLocation?) =
    this.sendFunctionLaunch(TdApi.SetChatLocation(chatId, location))

/**
 * Suspend function, which changes the status of a chat member; requires canInviteUsers member right
 * to add a chat member, canPromoteMembers administrator right to change administrator rights of the
 * member, and canRestrictMembers administrator right to change restrictions of a user. This function
 * is currently not suitable for transferring chat ownership; use transferChatOwnership instead. Use
 * addChatMember or banChatMember if some additional parameters needs to be passed.
 *
 * @param chatId Chat identifier.  
 * @param memberId Member identifier. Chats can be only banned and unbanned in supergroups and
 * channels.  
 * @param status The new status of the member in the chat.
 */
suspend fun TelegramFlow.setChatMemberStatus(
  chatId: Long,
  memberId: MessageSender?,
  status: ChatMemberStatus?
) = this.sendFunctionLaunch(TdApi.SetChatMemberStatus(chatId, memberId, status))

/**
 * Suspend function, which changes the message auto-delete or self-destruct (for secret chats) time
 * in a chat. Requires changeInfo administrator right in basic groups, supergroups and channels Message
 * auto-delete time can't be changed in a chat with the current user (Saved Messages) and the chat
 * 777000 (Telegram).
 *
 * @param chatId Chat identifier.  
 * @param messageAutoDeleteTime New time value, in seconds; unless the chat is secret, it must be
 * from 0 up to 365 * 86400 and be divisible by 86400. If 0, then messages aren't deleted
 * automatically.
 */
suspend fun TelegramFlow.setChatMessageAutoDeleteTime(chatId: Long, messageAutoDeleteTime: Int) =
    this.sendFunctionLaunch(TdApi.SetChatMessageAutoDeleteTime(chatId, messageAutoDeleteTime))

/**
 * Suspend function, which selects a message sender to send messages in a chat.
 *
 * @param chatId Chat identifier.  
 * @param messageSenderId New message sender for the chat.
 */
suspend fun TelegramFlow.setChatMessageSender(chatId: Long, messageSenderId: MessageSender?) =
    this.sendFunctionLaunch(TdApi.SetChatMessageSender(chatId, messageSenderId))

/**
 * Suspend function, which changes the notification settings of a chat. Notification settings of a
 * chat with the current user (Saved Messages) can't be changed.
 *
 * @param chatId Chat identifier.  
 * @param notificationSettings New notification settings for the chat. If the chat is muted for more
 * than 366 days, it is considered to be muted forever.
 */
suspend fun TelegramFlow.setChatNotificationSettings(chatId: Long,
    notificationSettings: ChatNotificationSettings?) =
    this.sendFunctionLaunch(TdApi.SetChatNotificationSettings(chatId, notificationSettings))

/**
 * Suspend function, which changes the chat members permissions. Supported only for basic groups and
 * supergroups. Requires canRestrictMembers administrator right.
 *
 * @param chatId Chat identifier.  
 * @param permissions New non-administrator members permissions in the chat.
 */
suspend fun TelegramFlow.setChatPermissions(chatId: Long, permissions: ChatPermissions?) =
    this.sendFunctionLaunch(TdApi.SetChatPermissions(chatId, permissions))

/**
 * Suspend function, which changes the photo of a chat. Supported only for basic groups, supergroups
 * and channels. Requires canChangeInfo member right.
 *
 * @param chatId Chat identifier.  
 * @param photo New chat photo; pass null to delete the chat photo.
 */
suspend fun TelegramFlow.setChatPhoto(chatId: Long, photo: InputChatPhoto?) =
    this.sendFunctionLaunch(TdApi.SetChatPhoto(chatId, photo))

/**
 * Suspend function, which changes the list of pinned stories on a chat page; requires
 * canEditStories right in the chat.
 *
 * @param chatId Identifier of the chat that posted the stories.  
 * @param storyIds New list of pinned stories. All stories must be posted to the chat page first.
 * There can be up to getOption(&quot;pinned_story_count_max&quot;) pinned stories on a chat page.
 */
suspend fun TelegramFlow.setChatPinnedStories(chatId: Long, storyIds: IntArray?) =
    this.sendFunctionLaunch(TdApi.SetChatPinnedStories(chatId, storyIds))

/**
 * Suspend function, which changes accent color and background custom emoji for profile of a
 * supergroup or channel chat. Requires canChangeInfo administrator right.
 *
 * @param chatId Chat identifier.  
 * @param profileAccentColorId Identifier of the accent color to use for profile; pass -1 if none.
 * The chat must have at least profileAccentColor.minSupergroupChatBoostLevel for supergroups or
 * profileAccentColor.minChannelChatBoostLevel for channels boost level to pass the corresponding
 * color.  
 * @param profileBackgroundCustomEmojiId Identifier of a custom emoji to be shown on the chat's
 * profile photo background; 0 if none. Use chatBoostLevelFeatures.canSetProfileBackgroundCustomEmoji
 * to check whether a custom emoji can be set.
 */
suspend fun TelegramFlow.setChatProfileAccentColor(
  chatId: Long,
  profileAccentColorId: Int,
  profileBackgroundCustomEmojiId: Long
) = this.sendFunctionLaunch(TdApi.SetChatProfileAccentColor(chatId, profileAccentColorId,
    profileBackgroundCustomEmojiId))

/**
 * Suspend function, which changes the slow mode delay of a chat. Available only for supergroups;
 * requires canRestrictMembers right.
 *
 * @param chatId Chat identifier.  
 * @param slowModeDelay New slow mode delay for the chat, in seconds; must be one of 0, 10, 30, 60,
 * 300, 900, 3600.
 */
suspend fun TelegramFlow.setChatSlowModeDelay(chatId: Long, slowModeDelay: Int) =
    this.sendFunctionLaunch(TdApi.SetChatSlowModeDelay(chatId, slowModeDelay))

/**
 * Suspend function, which changes the chat theme. Supported only in private and secret chats.
 *
 * @param chatId Chat identifier.  
 * @param themeName Name of the new chat theme; pass an empty string to return the default theme.
 */
suspend fun TelegramFlow.setChatTheme(chatId: Long, themeName: String?) =
    this.sendFunctionLaunch(TdApi.SetChatTheme(chatId, themeName))

/**
 * Suspend function, which changes the chat title. Supported only for basic groups, supergroups and
 * channels. Requires canChangeInfo member right.
 *
 * @param chatId Chat identifier.  
 * @param title New title of the chat; 1-128 characters.
 */
suspend fun TelegramFlow.setChatTitle(chatId: Long, title: String?) =
    this.sendFunctionLaunch(TdApi.SetChatTitle(chatId, title))

/**
 * Suspend function, which changes privacy settings for new chat creation; can be used only if
 * getOption(&quot;can_set_new_chat_privacy_settings&quot;).
 *
 * @param settings New settings.
 */
suspend fun TelegramFlow.setNewChatPrivacySettings(settings: NewChatPrivacySettings?) =
    this.sendFunctionLaunch(TdApi.SetNewChatPrivacySettings(settings))

/**
 * Suspend function, which changes the personal chat of the current user.
 *
 * @param chatId Identifier of the new personal chat; pass 0 to remove the chat. Use
 * getSuitablePersonalChats to get suitable chats.
 */
suspend fun TelegramFlow.setPersonalChat(chatId: Long) =
    this.sendFunctionLaunch(TdApi.SetPersonalChat(chatId))

/**
 * Suspend function, which changes the order of pinned chats.
 *
 * @param chatList Chat list in which to change the order of pinned chats.  
 * @param chatIds The new list of pinned chats.
 */
suspend fun TelegramFlow.setPinnedChats(chatList: ChatList?, chatIds: LongArray?) =
    this.sendFunctionLaunch(TdApi.SetPinnedChats(chatList, chatIds))

/**
 * Suspend function, which changes default participant identifier, on whose behalf a video chat in
 * the chat will be joined.
 *
 * @param chatId Chat identifier.  
 * @param defaultParticipantId Default group call participant identifier to join the video chats.
 */
suspend fun TelegramFlow.setVideoChatDefaultParticipant(chatId: Long,
    defaultParticipantId: MessageSender?) =
    this.sendFunctionLaunch(TdApi.SetVideoChatDefaultParticipant(chatId, defaultParticipantId))

/**
 * Suspend function, which shares a chat after pressing a keyboardButtonTypeRequestChat button with
 * the bot.
 *
 * @param chatId Identifier of the chat with the bot.  
 * @param messageId Identifier of the message with the button.  
 * @param buttonId Identifier of the button.  
 * @param sharedChatId Identifier of the shared chat.  
 * @param onlyCheck Pass true to check that the chat can be shared by the button instead of actually
 * sharing it. Doesn't check botIsMember and botAdministratorRights restrictions. If the bot must be a
 * member, then all chats from getGroupsInCommon and all chats, where the user can add the bot, are
 * suitable. In the latter case the bot will be automatically added to the chat. If the bot must be an
 * administrator, then all chats, where the bot already has requested rights or can be added to
 * administrators by the user, are suitable. In the latter case the bot will be automatically granted
 * requested rights.
 */
suspend fun TelegramFlow.shareChatWithBot(
  chatId: Long,
  messageId: Long,
  buttonId: Int,
  sharedChatId: Long,
  onlyCheck: Boolean
) = this.sendFunctionLaunch(TdApi.ShareChatWithBot(chatId, messageId, buttonId, sharedChatId,
    onlyCheck))

/**
 * Suspend function, which pauses or resumes the connected business bot in a specific chat.
 *
 * @param chatId Chat identifier.  
 * @param isPaused Pass true to pause the connected bot in the chat; pass false to resume the bot.
 */
suspend fun TelegramFlow.toggleBusinessConnectedBotChatIsPaused(chatId: Long, isPaused: Boolean) =
    this.sendFunctionLaunch(TdApi.ToggleBusinessConnectedBotChatIsPaused(chatId, isPaused))

/**
 * Suspend function, which changes the value of the default disableNotification parameter, used when
 * a message is sent to a chat.
 *
 * @param chatId Chat identifier.  
 * @param defaultDisableNotification New value of defaultDisableNotification.
 */
suspend fun TelegramFlow.toggleChatDefaultDisableNotification(chatId: Long,
    defaultDisableNotification: Boolean) =
    this.sendFunctionLaunch(TdApi.ToggleChatDefaultDisableNotification(chatId,
    defaultDisableNotification))

/**
 * Suspend function, which toggles whether chat folder tags are enabled.
 *
 * @param areTagsEnabled Pass true to enable folder tags; pass false to disable them.
 */
suspend fun TelegramFlow.toggleChatFolderTags(areTagsEnabled: Boolean) =
    this.sendFunctionLaunch(TdApi.ToggleChatFolderTags(areTagsEnabled))

/**
 * Suspend function, which changes the ability of users to save, forward, or copy chat content.
 * Supported only for basic groups, supergroups and channels. Requires owner privileges.
 *
 * @param chatId Chat identifier.  
 * @param hasProtectedContent New value of hasProtectedContent.
 */
suspend fun TelegramFlow.toggleChatHasProtectedContent(chatId: Long, hasProtectedContent: Boolean) =
    this.sendFunctionLaunch(TdApi.ToggleChatHasProtectedContent(chatId, hasProtectedContent))

/**
 * Suspend function, which changes the marked as unread state of a chat.
 *
 * @param chatId Chat identifier.  
 * @param isMarkedAsUnread New value of isMarkedAsUnread.
 */
suspend fun TelegramFlow.toggleChatIsMarkedAsUnread(chatId: Long, isMarkedAsUnread: Boolean) =
    this.sendFunctionLaunch(TdApi.ToggleChatIsMarkedAsUnread(chatId, isMarkedAsUnread))

/**
 * Suspend function, which changes the pinned state of a chat. There can be up to
 * getOption(&quot;pinned_chat_count_max&quot;)/getOption(&quot;pinned_archived_chat_count_max&quot;)
 * pinned non-secret chats and the same number of secret chats in the main/archive chat list. The limit
 * can be increased with Telegram Premium.
 *
 * @param chatList Chat list in which to change the pinned state of the chat.  
 * @param chatId Chat identifier.  
 * @param isPinned Pass true to pin the chat; pass false to unpin it.
 */
suspend fun TelegramFlow.toggleChatIsPinned(
  chatList: ChatList?,
  chatId: Long,
  isPinned: Boolean
) = this.sendFunctionLaunch(TdApi.ToggleChatIsPinned(chatList, chatId, isPinned))

/**
 * Suspend function, which changes the translatable state of a chat.
 *
 * @param chatId Chat identifier.  
 * @param isTranslatable New value of isTranslatable.
 */
suspend fun TelegramFlow.toggleChatIsTranslatable(chatId: Long, isTranslatable: Boolean) =
    this.sendFunctionLaunch(TdApi.ToggleChatIsTranslatable(chatId, isTranslatable))

/**
 * Suspend function, which changes the viewAsTopics setting of a forum chat or Saved Messages.
 *
 * @param chatId Chat identifier.  
 * @param viewAsTopics New value of viewAsTopics.
 */
suspend fun TelegramFlow.toggleChatViewAsTopics(chatId: Long, viewAsTopics: Boolean) =
    this.sendFunctionLaunch(TdApi.ToggleChatViewAsTopics(chatId, viewAsTopics))

/**
 * Suspend function, which toggles whether a session can accept incoming secret chats.
 *
 * @param sessionId Session identifier.  
 * @param canAcceptSecretChats Pass true to allow accepting secret chats by the session; pass false
 * otherwise.
 */
suspend fun TelegramFlow.toggleSessionCanAcceptSecretChats(sessionId: Long,
    canAcceptSecretChats: Boolean) =
    this.sendFunctionLaunch(TdApi.ToggleSessionCanAcceptSecretChats(sessionId,
    canAcceptSecretChats))

/**
 * Suspend function, which toggles whether a story is accessible after expiration. Can be called
 * only if story.canToggleIsPostedToChatPage == true.
 *
 * @param storySenderChatId Identifier of the chat that posted the story.  
 * @param storyId Identifier of the story.  
 * @param isPostedToChatPage Pass true to make the story accessible after expiration; pass false to
 * make it private.
 */
suspend fun TelegramFlow.toggleStoryIsPostedToChatPage(
  storySenderChatId: Long,
  storyId: Int,
  isPostedToChatPage: Boolean
) = this.sendFunctionLaunch(TdApi.ToggleStoryIsPostedToChatPage(storySenderChatId, storyId,
    isPostedToChatPage))

/**
 * Suspend function, which changes the owner of a chat; requires owner privileges in the chat. Use
 * the method canTransferOwnership to check whether the ownership can be transferred from the current
 * session. Available only for supergroups and channel chats.
 *
 * @param chatId Chat identifier.  
 * @param userId Identifier of the user to which transfer the ownership. The ownership can't be
 * transferred to a bot or to a deleted user.  
 * @param password The 2-step verification password of the current user.
 */
suspend fun TelegramFlow.transferChatOwnership(
  chatId: Long,
  userId: Long,
  password: String?
) = this.sendFunctionLaunch(TdApi.TransferChatOwnership(chatId, userId, password))

/**
 * Suspend function, which removes all pinned messages from a chat; requires canPinMessages member
 * right if the chat is a basic group or supergroup, or canEditMessages administrator right if the chat
 * is a channel.
 *
 * @param chatId Identifier of the chat.
 */
suspend fun TelegramFlow.unpinAllChatMessages(chatId: Long) =
    this.sendFunctionLaunch(TdApi.UnpinAllChatMessages(chatId))

/**
 * Suspend function, which removes a pinned message from a chat; requires canPinMessages member
 * right if the chat is a basic group or supergroup, or canEditMessages administrator right if the chat
 * is a channel.
 *
 * @param chatId Identifier of the chat.  
 * @param messageId Identifier of the removed pinned message.
 */
suspend fun TelegramFlow.unpinChatMessage(chatId: Long, messageId: Long) =
    this.sendFunctionLaunch(TdApi.UnpinChatMessage(chatId, messageId))

/**
 * Suspend function, which creates a new supergroup from an existing basic group and sends a
 * corresponding messageChatUpgradeTo and messageChatUpgradeFrom; requires owner privileges.
 * Deactivates the original basic group.
 *
 * @param chatId Identifier of the chat to upgrade.
 *
 * @return [Chat] A chat. (Can be a private chat, basic group, supergroup, or secret chat.)
 */
suspend fun TelegramFlow.upgradeBasicGroupChatToSupergroupChat(chatId: Long): Chat =
    this.sendFunctionAsync(TdApi.UpgradeBasicGroupChatToSupergroupChat(chatId))
