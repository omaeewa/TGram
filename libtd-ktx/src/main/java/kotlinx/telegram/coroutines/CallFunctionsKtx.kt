//
// NOTE: THIS FILE IS AUTO-GENERATED by the "TdApiKtxGenerator".kt
// See: https://github.com/tdlibx/td-ktx-generator/
//
package kotlinx.telegram.coroutines

import kotlin.Array
import kotlin.Boolean
import kotlin.ByteArray
import kotlin.Int
import kotlin.IntArray
import kotlin.Long
import kotlin.LongArray
import kotlin.String
import kotlinx.telegram.core.TelegramFlow
import org.drinkless.tdlib.TdApi
import org.drinkless.tdlib.TdApi.CallId
import org.drinkless.tdlib.TdApi.CallProblem
import org.drinkless.tdlib.TdApi.CallProtocol
import org.drinkless.tdlib.TdApi.FilePart
import org.drinkless.tdlib.TdApi.FoundMessages
import org.drinkless.tdlib.TdApi.GroupCall
import org.drinkless.tdlib.TdApi.GroupCallStreams
import org.drinkless.tdlib.TdApi.GroupCallVideoQuality
import org.drinkless.tdlib.TdApi.HttpUrl
import org.drinkless.tdlib.TdApi.MessageSender
import org.drinkless.tdlib.TdApi.TestBytes
import org.drinkless.tdlib.TdApi.TestInt
import org.drinkless.tdlib.TdApi.TestString
import org.drinkless.tdlib.TdApi.TestVectorInt
import org.drinkless.tdlib.TdApi.TestVectorIntObject
import org.drinkless.tdlib.TdApi.TestVectorString
import org.drinkless.tdlib.TdApi.TestVectorStringObject
import org.drinkless.tdlib.TdApi.Text

/**
 * Suspend function, which accepts an incoming call.
 *
 * @param callId Call identifier.  
 * @param protocol The call protocols supported by the application.
 */
suspend fun TelegramFlow.acceptCall(callId: Int, protocol: CallProtocol?) =
    this.sendFunctionLaunch(TdApi.AcceptCall(callId, protocol))

/**
 * Suspend function, which creates a new call.
 *
 * @param userId Identifier of the user to be called.  
 * @param protocol The call protocols supported by the application.  
 * @param isVideo Pass true to create a video call.
 *
 * @return [CallId] Contains the call identifier.
 */
suspend fun TelegramFlow.createCall(
  userId: Long,
  protocol: CallProtocol?,
  isVideo: Boolean
): CallId = this.sendFunctionAsync(TdApi.CreateCall(userId, protocol, isVideo))

/**
 * Suspend function, which deletes all call messages.
 *
 * @param revoke Pass true to delete the messages for all users.
 */
suspend fun TelegramFlow.deleteAllCallMessages(revoke: Boolean) =
    this.sendFunctionLaunch(TdApi.DeleteAllCallMessages(revoke))

/**
 * Suspend function, which discards a call.
 *
 * @param callId Call identifier.  
 * @param isDisconnected Pass true if the user was disconnected.  
 * @param duration The call duration, in seconds.  
 * @param isVideo Pass true if the call was a video call.  
 * @param connectionId Identifier of the connection used during the call.
 */
suspend fun TelegramFlow.discardCall(
  callId: Int,
  isDisconnected: Boolean,
  duration: Int,
  isVideo: Boolean,
  connectionId: Long
) = this.sendFunctionLaunch(TdApi.DiscardCall(callId, isDisconnected, duration, isVideo,
    connectionId))

/**
 * Suspend function, which ends a group call. Requires groupCall.canBeManaged.
 *
 * @param groupCallId Group call identifier.
 */
suspend fun TelegramFlow.endGroupCall(groupCallId: Int) =
    this.sendFunctionLaunch(TdApi.EndGroupCall(groupCallId))

/**
 * Suspend function, which ends recording of an active group call. Requires groupCall.canBeManaged
 * group call flag.
 *
 * @param groupCallId Group call identifier.
 */
suspend fun TelegramFlow.endGroupCallRecording(groupCallId: Int) =
    this.sendFunctionLaunch(TdApi.EndGroupCallRecording(groupCallId))

/**
 * Suspend function, which ends screen sharing in a joined group call.
 *
 * @param groupCallId Group call identifier.
 */
suspend fun TelegramFlow.endGroupCallScreenSharing(groupCallId: Int) =
    this.sendFunctionLaunch(TdApi.EndGroupCallScreenSharing(groupCallId))

/**
 * Suspend function, which returns information about a group call.
 *
 * @param groupCallId Group call identifier.
 *
 * @return [GroupCall] Describes a group call.
 */
suspend fun TelegramFlow.getGroupCall(groupCallId: Int): GroupCall =
    this.sendFunctionAsync(TdApi.GetGroupCall(groupCallId))

/**
 * Suspend function, which returns invite link to a video chat in a public chat.
 *
 * @param groupCallId Group call identifier.  
 * @param canSelfUnmute Pass true if the invite link needs to contain an invite hash, passing which
 * to joinGroupCall would allow the invited user to unmute themselves. Requires groupCall.canBeManaged
 * group call flag.
 *
 * @return [HttpUrl] Contains an HTTP URL.
 */
suspend fun TelegramFlow.getGroupCallInviteLink(groupCallId: Int, canSelfUnmute: Boolean): HttpUrl =
    this.sendFunctionAsync(TdApi.GetGroupCallInviteLink(groupCallId, canSelfUnmute))

/**
 * Suspend function, which returns a file with a segment of a group call stream in a modified OGG
 * format for audio or MPEG-4 format for video.
 *
 * @param groupCallId Group call identifier.  
 * @param timeOffset Point in time when the stream segment begins; Unix timestamp in milliseconds.  
 * @param scale Segment duration scale; 0-1. Segment's duration is 1000/(2**scale) milliseconds.  
 * @param channelId Identifier of an audio/video channel to get as received from tgcalls.  
 * @param videoQuality Video quality as received from tgcalls; pass null to get the worst available
 * quality.
 *
 * @return [FilePart] Contains a part of a file.
 */
suspend fun TelegramFlow.getGroupCallStreamSegment(
  groupCallId: Int,
  timeOffset: Long,
  scale: Int,
  channelId: Int,
  videoQuality: GroupCallVideoQuality?
): FilePart = this.sendFunctionAsync(TdApi.GetGroupCallStreamSegment(groupCallId, timeOffset, scale,
    channelId, videoQuality))

/**
 * Suspend function, which returns information about available group call streams.
 *
 * @param groupCallId Group call identifier.
 *
 * @return [GroupCallStreams] Represents a list of group call streams.
 */
suspend fun TelegramFlow.getGroupCallStreams(groupCallId: Int): GroupCallStreams =
    this.sendFunctionAsync(TdApi.GetGroupCallStreams(groupCallId))

/**
 * Suspend function, which invites users to an active group call. Sends a service message of type
 * messageInviteVideoChatParticipants for video chats.
 *
 * @param groupCallId Group call identifier.  
 * @param userIds User identifiers. At most 10 users can be invited simultaneously.
 */
suspend fun TelegramFlow.inviteGroupCallParticipants(groupCallId: Int, userIds: LongArray?) =
    this.sendFunctionLaunch(TdApi.InviteGroupCallParticipants(groupCallId, userIds))

/**
 * Suspend function, which joins an active group call. Returns join response payload for tgcalls.
 *
 * @param groupCallId Group call identifier.  
 * @param participantId Identifier of a group call participant, which will be used to join the call;
 * pass null to join as self; video chats only.  
 * @param audioSourceId Caller audio channel synchronization source identifier; received from
 * tgcalls.  
 * @param payload Group call join payload; received from tgcalls.  
 * @param isMuted Pass true to join the call with muted microphone.  
 * @param isMyVideoEnabled Pass true if the user's video is enabled.  
 * @param inviteHash If non-empty, invite hash to be used to join the group call without being muted
 * by administrators.
 *
 * @return [Text] Contains some text.
 */
suspend fun TelegramFlow.joinGroupCall(
  groupCallId: Int,
  participantId: MessageSender?,
  audioSourceId: Int,
  payload: String?,
  isMuted: Boolean,
  isMyVideoEnabled: Boolean,
  inviteHash: String?
): Text = this.sendFunctionAsync(TdApi.JoinGroupCall(groupCallId, participantId, audioSourceId,
    payload, isMuted, isMyVideoEnabled, inviteHash))

/**
 * Suspend function, which leaves a group call.
 *
 * @param groupCallId Group call identifier.
 */
suspend fun TelegramFlow.leaveGroupCall(groupCallId: Int) =
    this.sendFunctionLaunch(TdApi.LeaveGroupCall(groupCallId))

/**
 * Suspend function, which loads more participants of a group call. The loaded participants will be
 * received through updates. Use the field groupCall.loadedAllParticipants to check whether all
 * participants have already been loaded.
 *
 * @param groupCallId Group call identifier. The group call must be previously received through
 * getGroupCall and must be joined or being joined.  
 * @param limit The maximum number of participants to load; up to 100.
 */
suspend fun TelegramFlow.loadGroupCallParticipants(groupCallId: Int, limit: Int) =
    this.sendFunctionLaunch(TdApi.LoadGroupCallParticipants(groupCallId, limit))

/**
 * Suspend function, which revokes invite link for a group call. Requires groupCall.canBeManaged
 * group call flag.
 *
 * @param groupCallId Group call identifier.
 */
suspend fun TelegramFlow.revokeGroupCallInviteLink(groupCallId: Int) =
    this.sendFunctionLaunch(TdApi.RevokeGroupCallInviteLink(groupCallId))

/**
 * Suspend function, which searches for call messages. Returns the results in reverse chronological
 * order (i.e., in order of decreasing messageId). For optimal performance, the number of returned
 * messages is chosen by TDLib.
 *
 * @param offset Offset of the first entry to return as received from the previous request; use
 * empty string to get the first chunk of results.  
 * @param limit The maximum number of messages to be returned; up to 100. For optimal performance,
 * the number of returned messages is chosen by TDLib and can be smaller than the specified limit.  
 * @param onlyMissed Pass true to search only for messages with missed/declined calls.
 *
 * @return [FoundMessages] Contains a list of messages found by a search.
 */
suspend fun TelegramFlow.searchCallMessages(
  offset: String?,
  limit: Int,
  onlyMissed: Boolean
): FoundMessages = this.sendFunctionAsync(TdApi.SearchCallMessages(offset, limit, onlyMissed))

/**
 * Suspend function, which sends debug information for a call to Telegram servers.
 *
 * @param callId Call identifier.  
 * @param debugInformation Debug information in application-specific format.
 */
suspend fun TelegramFlow.sendCallDebugInformation(callId: Int, debugInformation: String?) =
    this.sendFunctionLaunch(TdApi.SendCallDebugInformation(callId, debugInformation))

/**
 * Suspend function, which sends a call rating.
 *
 * @param callId Call identifier.  
 * @param rating Call rating; 1-5.  
 * @param comment An optional user comment if the rating is less than 5.  
 * @param problems List of the exact types of problems with the call, specified by the user.
 */
suspend fun TelegramFlow.sendCallRating(
  callId: Int,
  rating: Int,
  comment: String?,
  problems: Array<CallProblem>?
) = this.sendFunctionLaunch(TdApi.SendCallRating(callId, rating, comment, problems))

/**
 * Suspend function, which sends call signaling data.
 *
 * @param callId Call identifier.  
 * @param data The data.
 */
suspend fun TelegramFlow.sendCallSignalingData(callId: Int, data: ByteArray?) =
    this.sendFunctionLaunch(TdApi.SendCallSignalingData(callId, data))

/**
 * Suspend function, which informs TDLib that speaking state of a participant of an active group has
 * changed.
 *
 * @param groupCallId Group call identifier.  
 * @param audioSource Group call participant's synchronization audio source identifier, or 0 for the
 * current user.  
 * @param isSpeaking Pass true if the user is speaking.
 */
suspend fun TelegramFlow.setGroupCallParticipantIsSpeaking(
  groupCallId: Int,
  audioSource: Int,
  isSpeaking: Boolean
) = this.sendFunctionLaunch(TdApi.SetGroupCallParticipantIsSpeaking(groupCallId, audioSource,
    isSpeaking))

/**
 * Suspend function, which changes volume level of a participant of an active group call. If the
 * current user can manage the group call, then the participant's volume level will be changed for all
 * users with the default volume level.
 *
 * @param groupCallId Group call identifier.  
 * @param participantId Participant identifier.  
 * @param volumeLevel New participant's volume level; 1-20000 in hundreds of percents.
 */
suspend fun TelegramFlow.setGroupCallParticipantVolumeLevel(
  groupCallId: Int,
  participantId: MessageSender?,
  volumeLevel: Int
) = this.sendFunctionLaunch(TdApi.SetGroupCallParticipantVolumeLevel(groupCallId, participantId,
    volumeLevel))

/**
 * Suspend function, which sets group call title. Requires groupCall.canBeManaged group call flag.
 *
 * @param groupCallId Group call identifier.  
 * @param title New group call title; 1-64 characters.
 */
suspend fun TelegramFlow.setGroupCallTitle(groupCallId: Int, title: String?) =
    this.sendFunctionLaunch(TdApi.SetGroupCallTitle(groupCallId, title))

/**
 * Suspend function, which starts recording of an active group call. Requires groupCall.canBeManaged
 * group call flag.
 *
 * @param groupCallId Group call identifier.  
 * @param title Group call recording title; 0-64 characters.  
 * @param recordVideo Pass true to record a video file instead of an audio file.  
 * @param usePortraitOrientation Pass true to use portrait orientation for video instead of
 * landscape one.
 */
suspend fun TelegramFlow.startGroupCallRecording(
  groupCallId: Int,
  title: String?,
  recordVideo: Boolean,
  usePortraitOrientation: Boolean
) = this.sendFunctionLaunch(TdApi.StartGroupCallRecording(groupCallId, title, recordVideo,
    usePortraitOrientation))

/**
 * Suspend function, which starts screen sharing in a joined group call. Returns join response
 * payload for tgcalls.
 *
 * @param groupCallId Group call identifier.  
 * @param audioSourceId Screen sharing audio channel synchronization source identifier; received
 * from tgcalls.  
 * @param payload Group call join payload; received from tgcalls.
 *
 * @return [Text] Contains some text.
 */
suspend fun TelegramFlow.startGroupCallScreenSharing(
  groupCallId: Int,
  audioSourceId: Int,
  payload: String?
): Text = this.sendFunctionAsync(TdApi.StartGroupCallScreenSharing(groupCallId, audioSourceId,
    payload))

/**
 * Suspend function, which starts a scheduled group call.
 *
 * @param groupCallId Group call identifier.
 */
suspend fun TelegramFlow.startScheduledGroupCall(groupCallId: Int) =
    this.sendFunctionLaunch(TdApi.StartScheduledGroupCall(groupCallId))

/**
 * Suspend function, which returns the received bytes; for testing only. This is an offline method.
 * Can be called before authorization.
 *
 * @param x Bytes to return.
 *
 * @return [TestBytes] A simple object containing a sequence of bytes; for testing only.
 */
suspend fun TelegramFlow.testCallBytes(x: ByteArray?): TestBytes =
    this.sendFunctionAsync(TdApi.TestCallBytes(x))

/**
 * Suspend function, which does nothing; for testing only. This is an offline method. Can be called
 * before authorization.
 */
suspend fun TelegramFlow.testCallEmpty() = this.sendFunctionLaunch(TdApi.TestCallEmpty())

/**
 * Suspend function, which returns the received string; for testing only. This is an offline method.
 * Can be called before authorization.
 *
 * @param x String to return.
 *
 * @return [TestString] A simple object containing a string; for testing only.
 */
suspend fun TelegramFlow.testCallString(x: String?): TestString =
    this.sendFunctionAsync(TdApi.TestCallString(x))

/**
 * Suspend function, which returns the received vector of numbers; for testing only. This is an
 * offline method. Can be called before authorization.
 *
 * @param x Vector of numbers to return.
 *
 * @return [TestVectorInt] A simple object containing a vector of numbers; for testing only.
 */
suspend fun TelegramFlow.testCallVectorInt(x: IntArray?): TestVectorInt =
    this.sendFunctionAsync(TdApi.TestCallVectorInt(x))

/**
 * Suspend function, which returns the received vector of objects containing a number; for testing
 * only. This is an offline method. Can be called before authorization.
 *
 * @param x Vector of objects to return.
 *
 * @return [TestVectorIntObject] A simple object containing a vector of objects that hold a number;
 * for testing only.
 */
suspend fun TelegramFlow.testCallVectorIntObject(x: Array<TestInt>?): TestVectorIntObject =
    this.sendFunctionAsync(TdApi.TestCallVectorIntObject(x))

/**
 * Suspend function, which returns the received vector of strings; for testing only. This is an
 * offline method. Can be called before authorization.
 *
 * @param x Vector of strings to return.
 *
 * @return [TestVectorString] A simple object containing a vector of strings; for testing only.
 */
suspend fun TelegramFlow.testCallVectorString(x: Array<String>?): TestVectorString =
    this.sendFunctionAsync(TdApi.TestCallVectorString(x))

/**
 * Suspend function, which returns the received vector of objects containing a string; for testing
 * only. This is an offline method. Can be called before authorization.
 *
 * @param x Vector of objects to return.
 *
 * @return [TestVectorStringObject] A simple object containing a vector of objects that hold a
 * string; for testing only.
 */
suspend fun TelegramFlow.testCallVectorStringObject(x: Array<TestString>?): TestVectorStringObject =
    this.sendFunctionAsync(TdApi.TestCallVectorStringObject(x))

/**
 * Suspend function, which toggles whether the current user will receive a notification when the
 * group call starts; scheduled group calls only.
 *
 * @param groupCallId Group call identifier.  
 * @param enabledStartNotification New value of the enabledStartNotification setting.
 */
suspend fun TelegramFlow.toggleGroupCallEnabledStartNotification(groupCallId: Int,
    enabledStartNotification: Boolean) =
    this.sendFunctionLaunch(TdApi.ToggleGroupCallEnabledStartNotification(groupCallId,
    enabledStartNotification))

/**
 * Suspend function, which toggles whether current user's video is enabled.
 *
 * @param groupCallId Group call identifier.  
 * @param isMyVideoEnabled Pass true if the current user's video is enabled.
 */
suspend fun TelegramFlow.toggleGroupCallIsMyVideoEnabled(groupCallId: Int,
    isMyVideoEnabled: Boolean) =
    this.sendFunctionLaunch(TdApi.ToggleGroupCallIsMyVideoEnabled(groupCallId, isMyVideoEnabled))

/**
 * Suspend function, which toggles whether current user's video is paused.
 *
 * @param groupCallId Group call identifier.  
 * @param isMyVideoPaused Pass true if the current user's video is paused.
 */
suspend fun TelegramFlow.toggleGroupCallIsMyVideoPaused(groupCallId: Int, isMyVideoPaused: Boolean)
    = this.sendFunctionLaunch(TdApi.ToggleGroupCallIsMyVideoPaused(groupCallId, isMyVideoPaused))

/**
 * Suspend function, which toggles whether new participants of a group call can be unmuted only by
 * administrators of the group call. Requires groupCall.canToggleMuteNewParticipants group call flag.
 *
 * @param groupCallId Group call identifier.  
 * @param muteNewParticipants New value of the muteNewParticipants setting.
 */
suspend fun TelegramFlow.toggleGroupCallMuteNewParticipants(groupCallId: Int,
    muteNewParticipants: Boolean) =
    this.sendFunctionLaunch(TdApi.ToggleGroupCallMuteNewParticipants(groupCallId,
    muteNewParticipants))

/**
 * Suspend function, which toggles whether a group call participant hand is rased.
 *
 * @param groupCallId Group call identifier.  
 * @param participantId Participant identifier.  
 * @param isHandRaised Pass true if the user's hand needs to be raised. Only self hand can be
 * raised. Requires groupCall.canBeManaged group call flag to lower other's hand.
 */
suspend fun TelegramFlow.toggleGroupCallParticipantIsHandRaised(
  groupCallId: Int,
  participantId: MessageSender?,
  isHandRaised: Boolean
) = this.sendFunctionLaunch(TdApi.ToggleGroupCallParticipantIsHandRaised(groupCallId, participantId,
    isHandRaised))

/**
 * Suspend function, which toggles whether a participant of an active group call is muted, unmuted,
 * or allowed to unmute themselves.
 *
 * @param groupCallId Group call identifier.  
 * @param participantId Participant identifier.  
 * @param isMuted Pass true to mute the user; pass false to unmute them.
 */
suspend fun TelegramFlow.toggleGroupCallParticipantIsMuted(
  groupCallId: Int,
  participantId: MessageSender?,
  isMuted: Boolean
) = this.sendFunctionLaunch(TdApi.ToggleGroupCallParticipantIsMuted(groupCallId, participantId,
    isMuted))

/**
 * Suspend function, which pauses or unpauses screen sharing in a joined group call.
 *
 * @param groupCallId Group call identifier.  
 * @param isPaused Pass true to pause screen sharing; pass false to unpause it.
 */
suspend fun TelegramFlow.toggleGroupCallScreenSharingIsPaused(groupCallId: Int, isPaused: Boolean) =
    this.sendFunctionLaunch(TdApi.ToggleGroupCallScreenSharingIsPaused(groupCallId, isPaused))

/**
 * Suspend function, which toggles whether a session can accept incoming calls.
 *
 * @param sessionId Session identifier.  
 * @param canAcceptCalls Pass true to allow accepting incoming calls by the session; pass false
 * otherwise.
 */
suspend fun TelegramFlow.toggleSessionCanAcceptCalls(sessionId: Long, canAcceptCalls: Boolean) =
    this.sendFunctionLaunch(TdApi.ToggleSessionCanAcceptCalls(sessionId, canAcceptCalls))
