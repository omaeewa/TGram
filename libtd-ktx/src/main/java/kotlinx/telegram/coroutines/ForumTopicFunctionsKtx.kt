//
// NOTE: THIS FILE IS AUTO-GENERATED by the "TdApiKtxGenerator".kt
// See: https://github.com/tdlibx/td-ktx-generator/
//
package kotlinx.telegram.coroutines

import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.LongArray
import kotlin.String
import kotlinx.telegram.core.TelegramFlow
import org.drinkless.tdlib.TdApi
import org.drinkless.tdlib.TdApi.ChatNotificationSettings
import org.drinkless.tdlib.TdApi.ForumTopic
import org.drinkless.tdlib.TdApi.ForumTopicIcon
import org.drinkless.tdlib.TdApi.ForumTopicInfo
import org.drinkless.tdlib.TdApi.ForumTopics
import org.drinkless.tdlib.TdApi.MessageLink
import org.drinkless.tdlib.TdApi.Stickers

/**
 * Suspend function, which creates a topic in a forum supergroup chat; requires canManageTopics
 * administrator or canCreateTopics member right in the supergroup.
 *
 * @param chatId Identifier of the chat.  
 * @param name Name of the topic; 1-128 characters.  
 * @param icon Icon of the topic. Icon color must be one of 0x6FB9F0, 0xFFD67E, 0xCB86DB, 0x8EEE98,
 * 0xFF93B2, or 0xFB6F5F. Telegram Premium users can use any custom emoji as topic icon, other users
 * can use only a custom emoji returned by getForumTopicDefaultIcons.
 *
 * @return [ForumTopicInfo] Contains basic information about a forum topic.
 */
suspend fun TelegramFlow.createForumTopic(
  chatId: Long,
  name: String?,
  icon: ForumTopicIcon?
): ForumTopicInfo = this.sendFunctionAsync(TdApi.CreateForumTopic(chatId, name, icon))

/**
 * Suspend function, which deletes all messages in a forum topic; requires canDeleteMessages
 * administrator right in the supergroup unless the user is creator of the topic, the topic has no
 * messages from other users and has at most 11 messages.
 *
 * @param chatId Identifier of the chat.  
 * @param messageThreadId Message thread identifier of the forum topic.
 */
suspend fun TelegramFlow.deleteForumTopic(chatId: Long, messageThreadId: Long) =
    this.sendFunctionLaunch(TdApi.DeleteForumTopic(chatId, messageThreadId))

/**
 * Suspend function, which edits title and icon of a topic in a forum supergroup chat; requires
 * canManageTopics right in the supergroup unless the user is creator of the topic.
 *
 * @param chatId Identifier of the chat.  
 * @param messageThreadId Message thread identifier of the forum topic.  
 * @param name New name of the topic; 0-128 characters. If empty, the previous topic name is kept.  
 * @param editIconCustomEmoji Pass true to edit the icon of the topic. Icon of the General topic
 * can't be edited.  
 * @param iconCustomEmojiId Identifier of the new custom emoji for topic icon; pass 0 to remove the
 * custom emoji. Ignored if editIconCustomEmoji is false. Telegram Premium users can use any custom
 * emoji, other users can use only a custom emoji returned by getForumTopicDefaultIcons.
 */
suspend fun TelegramFlow.editForumTopic(
  chatId: Long,
  messageThreadId: Long,
  name: String?,
  editIconCustomEmoji: Boolean,
  iconCustomEmojiId: Long
) = this.sendFunctionLaunch(TdApi.EditForumTopic(chatId, messageThreadId, name, editIconCustomEmoji,
    iconCustomEmojiId))

/**
 * Suspend function, which returns information about a forum topic.
 *
 * @param chatId Identifier of the chat.  
 * @param messageThreadId Message thread identifier of the forum topic.
 *
 * @return [ForumTopic] Describes a forum topic.
 */
suspend fun TelegramFlow.getForumTopic(chatId: Long, messageThreadId: Long): ForumTopic =
    this.sendFunctionAsync(TdApi.GetForumTopic(chatId, messageThreadId))

/**
 * Suspend function, which returns the list of custom emoji, which can be used as forum topic icon
 * by all users.
 *
 * @return [Stickers] Represents a list of stickers.
 */
suspend fun TelegramFlow.getForumTopicDefaultIcons(): Stickers =
    this.sendFunctionAsync(TdApi.GetForumTopicDefaultIcons())

/**
 * Suspend function, which returns an HTTPS link to a topic in a forum chat. This is an offline
 * request.
 *
 * @param chatId Identifier of the chat.  
 * @param messageThreadId Message thread identifier of the forum topic.
 *
 * @return [MessageLink] Contains an HTTPS link to a message in a supergroup or channel, or a forum
 * topic.
 */
suspend fun TelegramFlow.getForumTopicLink(chatId: Long, messageThreadId: Long): MessageLink =
    this.sendFunctionAsync(TdApi.GetForumTopicLink(chatId, messageThreadId))

/**
 * Suspend function, which returns found forum topics in a forum chat. This is a temporary method
 * for getting information about topic list from the server.
 *
 * @param chatId Identifier of the forum chat.  
 * @param query Query to search for in the forum topic's name.  
 * @param offsetDate The date starting from which the results need to be fetched. Use 0 or any date
 * in the future to get results from the last topic.  
 * @param offsetMessageId The message identifier of the last message in the last found topic, or 0
 * for the first request.  
 * @param offsetMessageThreadId The message thread identifier of the last found topic, or 0 for the
 * first request.  
 * @param limit The maximum number of forum topics to be returned; up to 100. For optimal
 * performance, the number of returned forum topics is chosen by TDLib and can be smaller than the
 * specified limit.
 *
 * @return [ForumTopics] Describes a list of forum topics.
 */
suspend fun TelegramFlow.getForumTopics(
  chatId: Long,
  query: String?,
  offsetDate: Int,
  offsetMessageId: Long,
  offsetMessageThreadId: Long,
  limit: Int
): ForumTopics = this.sendFunctionAsync(TdApi.GetForumTopics(chatId, query, offsetDate,
    offsetMessageId, offsetMessageThreadId, limit))

/**
 * Suspend function, which changes the notification settings of a forum topic.
 *
 * @param chatId Chat identifier.  
 * @param messageThreadId Message thread identifier of the forum topic.  
 * @param notificationSettings New notification settings for the forum topic. If the topic is muted
 * for more than 366 days, it is considered to be muted forever.
 */
suspend fun TelegramFlow.setForumTopicNotificationSettings(
  chatId: Long,
  messageThreadId: Long,
  notificationSettings: ChatNotificationSettings?
) = this.sendFunctionLaunch(TdApi.SetForumTopicNotificationSettings(chatId, messageThreadId,
    notificationSettings))

/**
 * Suspend function, which changes the order of pinned forum topics; requires canManageTopics right
 * in the supergroup.
 *
 * @param chatId Chat identifier.  
 * @param messageThreadIds The new list of pinned forum topics.
 */
suspend fun TelegramFlow.setPinnedForumTopics(chatId: Long, messageThreadIds: LongArray?) =
    this.sendFunctionLaunch(TdApi.SetPinnedForumTopics(chatId, messageThreadIds))

/**
 * Suspend function, which toggles whether a topic is closed in a forum supergroup chat; requires
 * canManageTopics right in the supergroup unless the user is creator of the topic.
 *
 * @param chatId Identifier of the chat.  
 * @param messageThreadId Message thread identifier of the forum topic.  
 * @param isClosed Pass true to close the topic; pass false to reopen it.
 */
suspend fun TelegramFlow.toggleForumTopicIsClosed(
  chatId: Long,
  messageThreadId: Long,
  isClosed: Boolean
) = this.sendFunctionLaunch(TdApi.ToggleForumTopicIsClosed(chatId, messageThreadId, isClosed))

/**
 * Suspend function, which changes the pinned state of a forum topic; requires canManageTopics right
 * in the supergroup. There can be up to getOption(&quot;pinned_forum_topic_count_max&quot;) pinned
 * forum topics.
 *
 * @param chatId Chat identifier.  
 * @param messageThreadId Message thread identifier of the forum topic.  
 * @param isPinned Pass true to pin the topic; pass false to unpin it.
 */
suspend fun TelegramFlow.toggleForumTopicIsPinned(
  chatId: Long,
  messageThreadId: Long,
  isPinned: Boolean
) = this.sendFunctionLaunch(TdApi.ToggleForumTopicIsPinned(chatId, messageThreadId, isPinned))

/**
 * Suspend function, which toggles whether a General topic is hidden in a forum supergroup chat;
 * requires canManageTopics right in the supergroup.
 *
 * @param chatId Identifier of the chat.  
 * @param isHidden Pass true to hide and close the General topic; pass false to unhide it.
 */
suspend fun TelegramFlow.toggleGeneralForumTopicIsHidden(chatId: Long, isHidden: Boolean) =
    this.sendFunctionLaunch(TdApi.ToggleGeneralForumTopicIsHidden(chatId, isHidden))
