//
// NOTE: THIS FILE IS AUTO-GENERATED by the "TdApiKtxGenerator".kt
// See: https://github.com/tdlibx/td-ktx-generator/
//
package kotlinx.telegram.coroutines

import kotlin.Int
import kotlin.String
import kotlinx.telegram.core.TelegramFlow
import org.drinkless.tdlib.TdApi
import org.drinkless.tdlib.TdApi.FoundStories
import org.drinkless.tdlib.TdApi.LocationAddress
import org.drinkless.tdlib.TdApi.StoryList

/**
 * Suspend function, which loads more active stories from a story list. The loaded stories will be
 * sent through updates. Active stories are sorted by the pair (activeStories.order,
 * activeStories.storySenderChatId) in descending order. Returns a 404 error if all active stories have
 * been loaded.
 *
 * @param storyList The story list in which to load active stories.
 */
suspend fun TelegramFlow.loadActiveStories(storyList: StoryList?) =
    this.sendFunctionLaunch(TdApi.LoadActiveStories(storyList))

/**
 * Suspend function, which searches for public stories by the given address location. For optimal
 * performance, the number of returned stories is chosen by TDLib and can be smaller than the specified
 * limit.
 *
 * @param address Address of the location.  
 * @param offset Offset of the first entry to return as received from the previous request; use
 * empty string to get the first chunk of results.  
 * @param limit The maximum number of stories to be returned; up to 100. For optimal performance,
 * the number of returned stories is chosen by TDLib and can be smaller than the specified limit.
 *
 * @return [FoundStories] Contains a list of stories found by a search.
 */
suspend fun TelegramFlow.searchPublicStoriesByLocation(
  address: LocationAddress?,
  offset: String?,
  limit: Int
): FoundStories = this.sendFunctionAsync(TdApi.SearchPublicStoriesByLocation(address, offset,
    limit))

/**
 * Suspend function, which searches for public stories containing the given hashtag or cashtag. For
 * optimal performance, the number of returned stories is chosen by TDLib and can be smaller than the
 * specified limit.
 *
 * @param tag Hashtag or cashtag to search for.  
 * @param offset Offset of the first entry to return as received from the previous request; use
 * empty string to get the first chunk of results.  
 * @param limit The maximum number of stories to be returned; up to 100. For optimal performance,
 * the number of returned stories is chosen by TDLib and can be smaller than the specified limit.
 *
 * @return [FoundStories] Contains a list of stories found by a search.
 */
suspend fun TelegramFlow.searchPublicStoriesByTag(
  tag: String?,
  offset: String?,
  limit: Int
): FoundStories = this.sendFunctionAsync(TdApi.SearchPublicStoriesByTag(tag, offset, limit))

/**
 * Suspend function, which searches for public stories from the given venue. For optimal
 * performance, the number of returned stories is chosen by TDLib and can be smaller than the specified
 * limit.
 *
 * @param venueProvider Provider of the venue.  
 * @param venueId Identifier of the venue in the provider database.  
 * @param offset Offset of the first entry to return as received from the previous request; use
 * empty string to get the first chunk of results.  
 * @param limit The maximum number of stories to be returned; up to 100. For optimal performance,
 * the number of returned stories is chosen by TDLib and can be smaller than the specified limit.
 *
 * @return [FoundStories] Contains a list of stories found by a search.
 */
suspend fun TelegramFlow.searchPublicStoriesByVenue(
  venueProvider: String?,
  venueId: String?,
  offset: String?,
  limit: Int
): FoundStories = this.sendFunctionAsync(TdApi.SearchPublicStoriesByVenue(venueProvider, venueId,
    offset, limit))
