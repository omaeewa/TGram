//
// NOTE: THIS FILE IS AUTO-GENERATED by the "TdApiKtxGenerator".kt
// See: https://github.com/tdlibx/td-ktx-generator/
//
package kotlinx.telegram.coroutines

import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlinx.telegram.core.TelegramFlow
import org.drinkless.tdlib.TdApi
import org.drinkless.tdlib.TdApi.AvailableReactions
import org.drinkless.tdlib.TdApi.CanSendStoryResult
import org.drinkless.tdlib.TdApi.Chats
import org.drinkless.tdlib.TdApi.FormattedText
import org.drinkless.tdlib.TdApi.InputStoryAreas
import org.drinkless.tdlib.TdApi.InputStoryContent
import org.drinkless.tdlib.TdApi.PublicForwards
import org.drinkless.tdlib.TdApi.ReactionType
import org.drinkless.tdlib.TdApi.ReportReason
import org.drinkless.tdlib.TdApi.Story
import org.drinkless.tdlib.TdApi.StoryFullId
import org.drinkless.tdlib.TdApi.StoryInteractions
import org.drinkless.tdlib.TdApi.StoryPrivacySettings
import org.drinkless.tdlib.TdApi.StoryStatistics

/**
 * Suspend function, which activates stealth mode for stories, which hides all views of stories from
 * the current user in the last &quot;story_stealth_mode_past_period&quot; seconds and for the next
 * &quot;story_stealth_mode_future_period&quot; seconds; for Telegram Premium users only.
 */
suspend fun TelegramFlow.activateStoryStealthMode() =
    this.sendFunctionLaunch(TdApi.ActivateStoryStealthMode())

/**
 * Suspend function, which checks whether the current user can send a story on behalf of a chat;
 * requires canPostStories right for supergroup and channel chats.
 *
 * @param chatId Chat identifier.
 *
 * @return [CanSendStoryResult] This class is an abstract base class.
 */
suspend fun TelegramFlow.canSendStory(chatId: Long): CanSendStoryResult =
    this.sendFunctionAsync(TdApi.CanSendStory(chatId))

/**
 * Suspend function, which informs TDLib that a story is closed by the user.
 *
 * @param storySenderChatId The identifier of the sender of the story to close.  
 * @param storyId The identifier of the story.
 */
suspend fun TelegramFlow.closeStory(storySenderChatId: Long, storyId: Int) =
    this.sendFunctionLaunch(TdApi.CloseStory(storySenderChatId, storyId))

/**
 * Suspend function, which deletes a previously sent story. Can be called only if story.canBeDeleted
 * == true.
 *
 * @param storySenderChatId Identifier of the chat that posted the story.  
 * @param storyId Identifier of the story to delete.
 */
suspend fun TelegramFlow.deleteStory(storySenderChatId: Long, storyId: Int) =
    this.sendFunctionLaunch(TdApi.DeleteStory(storySenderChatId, storyId))

/**
 * Suspend function, which changes content and caption of a story. Can be called only if
 * story.canBeEdited == true.
 *
 * @param storySenderChatId Identifier of the chat that posted the story.  
 * @param storyId Identifier of the story to edit.  
 * @param content New content of the story; pass null to keep the current content.  
 * @param areas New clickable rectangle areas to be shown on the story media; pass null to keep the
 * current areas. Areas can't be edited if story content isn't changed.  
 * @param caption New story caption; pass null to keep the current caption.
 */
suspend fun TelegramFlow.editStory(
  storySenderChatId: Long,
  storyId: Int,
  content: InputStoryContent?,
  areas: InputStoryAreas?,
  caption: FormattedText?
) = this.sendFunctionLaunch(TdApi.EditStory(storySenderChatId, storyId, content, areas, caption))

/**
 * Suspend function, which returns a story.
 *
 * @param storySenderChatId Identifier of the chat that posted the story.  
 * @param storyId Story identifier.  
 * @param onlyLocal Pass true to get only locally available information without sending network
 * requests.
 *
 * @return [Story] Represents a story.
 */
suspend fun TelegramFlow.getStory(
  storySenderChatId: Long,
  storyId: Int,
  onlyLocal: Boolean
): Story = this.sendFunctionAsync(TdApi.GetStory(storySenderChatId, storyId, onlyLocal))

/**
 * Suspend function, which returns reactions, which can be chosen for a story.
 *
 * @param rowSize Number of reaction per row, 5-25.
 *
 * @return [AvailableReactions] Represents a list of reactions that can be added to a message.
 */
suspend fun TelegramFlow.getStoryAvailableReactions(rowSize: Int): AvailableReactions =
    this.sendFunctionAsync(TdApi.GetStoryAvailableReactions(rowSize))

/**
 * Suspend function, which returns interactions with a story. The method can be called only for
 * stories posted on behalf of the current user.
 *
 * @param storyId Story identifier.  
 * @param query Query to search for in names, usernames and titles; may be empty to get all relevant
 * interactions.  
 * @param onlyContacts Pass true to get only interactions by contacts; pass false to get all
 * relevant interactions.  
 * @param preferForwards Pass true to get forwards and reposts first, then reactions, then other
 * views; pass false to get interactions sorted just by interaction date.  
 * @param preferWithReaction Pass true to get interactions with reaction first; pass false to get
 * interactions sorted just by interaction date. Ignored if preferForwards == true.  
 * @param offset Offset of the first entry to return as received from the previous request; use
 * empty string to get the first chunk of results.  
 * @param limit The maximum number of story interactions to return.
 *
 * @return [StoryInteractions] Represents a list of interactions with a story.
 */
suspend fun TelegramFlow.getStoryInteractions(
  storyId: Int,
  query: String?,
  onlyContacts: Boolean,
  preferForwards: Boolean,
  preferWithReaction: Boolean,
  offset: String?,
  limit: Int
): StoryInteractions = this.sendFunctionAsync(TdApi.GetStoryInteractions(storyId, query,
    onlyContacts, preferForwards, preferWithReaction, offset, limit))

/**
 * Suspend function, which returns the list of chats with non-default notification settings for
 * stories.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.getStoryNotificationSettingsExceptions(): Chats =
    this.sendFunctionAsync(TdApi.GetStoryNotificationSettingsExceptions())

/**
 * Suspend function, which returns forwards of a story as a message to public chats and reposts by
 * public channels. Can be used only if the story is posted on behalf of the current user or
 * story.canGetStatistics == true. For optimal performance, the number of returned messages and stories
 * is chosen by TDLib.
 *
 * @param storySenderChatId The identifier of the sender of the story.  
 * @param storyId The identifier of the story.  
 * @param offset Offset of the first entry to return as received from the previous request; use
 * empty string to get the first chunk of results.  
 * @param limit The maximum number of messages and stories to be returned; must be positive and
 * can't be greater than 100. For optimal performance, the number of returned objects is chosen by
 * TDLib and can be smaller than the specified limit.
 *
 * @return [PublicForwards] Represents a list of public forwards and reposts as a story of a message
 * or a story.
 */
suspend fun TelegramFlow.getStoryPublicForwards(
  storySenderChatId: Long,
  storyId: Int,
  offset: String?,
  limit: Int
): PublicForwards = this.sendFunctionAsync(TdApi.GetStoryPublicForwards(storySenderChatId, storyId,
    offset, limit))

/**
 * Suspend function, which returns detailed statistics about a story. Can be used only if
 * story.canGetStatistics == true.
 *
 * @param chatId Chat identifier.  
 * @param storyId Story identifier.  
 * @param isDark Pass true if a dark theme is used by the application.
 *
 * @return [StoryStatistics] A detailed statistics about a story.
 */
suspend fun TelegramFlow.getStoryStatistics(
  chatId: Long,
  storyId: Int,
  isDark: Boolean
): StoryStatistics = this.sendFunctionAsync(TdApi.GetStoryStatistics(chatId, storyId, isDark))

/**
 * Suspend function, which informs TDLib that a story is opened and is being viewed by the user.
 *
 * @param storySenderChatId The identifier of the sender of the opened story.  
 * @param storyId The identifier of the story.
 */
suspend fun TelegramFlow.openStory(storySenderChatId: Long, storyId: Int) =
    this.sendFunctionLaunch(TdApi.OpenStory(storySenderChatId, storyId))

/**
 * Suspend function, which reports a story to the Telegram moderators.
 *
 * @param storySenderChatId The identifier of the sender of the story to report.  
 * @param storyId The identifier of the story to report.  
 * @param reason The reason for reporting the story.  
 * @param text Additional report details; 0-1024 characters.
 */
suspend fun TelegramFlow.reportStory(
  storySenderChatId: Long,
  storyId: Int,
  reason: ReportReason?,
  text: String?
) = this.sendFunctionLaunch(TdApi.ReportStory(storySenderChatId, storyId, reason, text))

/**
 * Suspend function, which sends a new story to a chat; requires canPostStories right for supergroup
 * and channel chats. Returns a temporary story.
 *
 * @param chatId Identifier of the chat that will post the story.  
 * @param content Content of the story.  
 * @param areas Clickable rectangle areas to be shown on the story media; pass null if none.  
 * @param caption Story caption; pass null to use an empty caption;
 * 0-getOption(&quot;story_caption_length_max&quot;) characters; can have entities only if
 * getOption(&quot;can_use_text_entities_in_story_caption&quot;).  
 * @param privacySettings The privacy settings for the story; ignored for stories sent to supergroup
 * and channel chats.  
 * @param activePeriod Period after which the story is moved to archive, in seconds; must be one of
 * 6 * 3600, 12 * 3600, 86400, or 2 * 86400 for Telegram Premium users, and 86400 otherwise.  
 * @param fromStoryFullId Full identifier of the original story, which content was used to create
 * the story.  
 * @param isPostedToChatPage Pass true to keep the story accessible after expiration.  
 * @param protectContent Pass true if the content of the story must be protected from forwarding and
 * screenshotting.
 *
 * @return [Story] Represents a story.
 */
suspend fun TelegramFlow.sendStory(
  chatId: Long,
  content: InputStoryContent?,
  areas: InputStoryAreas?,
  caption: FormattedText?,
  privacySettings: StoryPrivacySettings?,
  activePeriod: Int,
  fromStoryFullId: StoryFullId?,
  isPostedToChatPage: Boolean,
  protectContent: Boolean
): Story = this.sendFunctionAsync(TdApi.SendStory(chatId, content, areas, caption, privacySettings,
    activePeriod, fromStoryFullId, isPostedToChatPage, protectContent))

/**
 * Suspend function, which changes privacy settings of a story. The method can be called only for
 * stories posted on behalf of the current user and if story.canBeEdited == true.
 *
 * @param storyId Identifier of the story.  
 * @param privacySettings The new privacy settigs for the story.
 */
suspend fun TelegramFlow.setStoryPrivacySettings(storyId: Int,
    privacySettings: StoryPrivacySettings?) =
    this.sendFunctionLaunch(TdApi.SetStoryPrivacySettings(storyId, privacySettings))

/**
 * Suspend function, which changes chosen reaction on a story that has already been sent.
 *
 * @param storySenderChatId The identifier of the sender of the story.  
 * @param storyId The identifier of the story.  
 * @param reactionType Type of the reaction to set; pass null to remove the reaction.
 * `reactionTypeCustomEmoji` reactions can be used only by Telegram Premium users.  
 * @param updateRecentReactions Pass true if the reaction needs to be added to recent reactions.
 */
suspend fun TelegramFlow.setStoryReaction(
  storySenderChatId: Long,
  storyId: Int,
  reactionType: ReactionType?,
  updateRecentReactions: Boolean
) = this.sendFunctionLaunch(TdApi.SetStoryReaction(storySenderChatId, storyId, reactionType,
    updateRecentReactions))
