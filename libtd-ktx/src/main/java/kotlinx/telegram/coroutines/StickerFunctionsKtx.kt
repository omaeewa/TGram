//
// NOTE: THIS FILE IS AUTO-GENERATED by the "TdApiKtxGenerator".kt
// See: https://github.com/tdlibx/td-ktx-generator/
//
package kotlinx.telegram.coroutines

import kotlin.Array
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.LongArray
import kotlin.String
import kotlinx.telegram.core.TelegramFlow
import org.drinkless.tdlib.TdApi
import org.drinkless.tdlib.TdApi.CheckStickerSetNameResult
import org.drinkless.tdlib.TdApi.InputFile
import org.drinkless.tdlib.TdApi.InputSticker
import org.drinkless.tdlib.TdApi.MaskPosition
import org.drinkless.tdlib.TdApi.StickerFormat
import org.drinkless.tdlib.TdApi.StickerSet
import org.drinkless.tdlib.TdApi.StickerSets
import org.drinkless.tdlib.TdApi.StickerType
import org.drinkless.tdlib.TdApi.Stickers
import org.drinkless.tdlib.TdApi.Text
import org.drinkless.tdlib.TdApi.TrendingStickerSets

/**
 * Suspend function, which adds a new sticker to the list of favorite stickers. The new sticker is
 * added to the top of the list. If the sticker was already in the list, it is removed from the list
 * first. Only stickers belonging to a sticker set or in WEBP or WEBM format can be added to this list.
 * Emoji stickers can't be added to favorite stickers.
 *
 * @param sticker Sticker file to add.
 */
suspend fun TelegramFlow.addFavoriteSticker(sticker: InputFile?) =
    this.sendFunctionLaunch(TdApi.AddFavoriteSticker(sticker))

/**
 * Suspend function, which manually adds a new sticker to the list of recently used stickers. The
 * new sticker is added to the top of the list. If the sticker was already in the list, it is removed
 * from the list first. Only stickers belonging to a sticker set or in WEBP or WEBM format can be added
 * to this list. Emoji stickers can't be added to recent stickers.
 *
 * @param isAttached Pass true to add the sticker to the list of stickers recently attached to photo
 * or video files; pass false to add the sticker to the list of recently sent stickers.  
 * @param sticker Sticker file to add.
 *
 * @return [Stickers] Represents a list of stickers.
 */
suspend fun TelegramFlow.addRecentSticker(isAttached: Boolean, sticker: InputFile?): Stickers =
    this.sendFunctionAsync(TdApi.AddRecentSticker(isAttached, sticker))

/**
 * Suspend function, which adds a new sticker to a set.
 *
 * @param userId Sticker set owner; ignored for regular users.  
 * @param name Sticker set name. The sticker set must be owned by the current user, and contain less
 * than 200 stickers for custom emoji sticker sets and less than 120 otherwise.  
 * @param sticker Sticker to add to the set.
 */
suspend fun TelegramFlow.addStickerToSet(
  userId: Long,
  name: String?,
  sticker: InputSticker?
) = this.sendFunctionLaunch(TdApi.AddStickerToSet(userId, name, sticker))

/**
 * Suspend function, which installs/uninstalls or activates/archives a sticker set.
 *
 * @param setId Identifier of the sticker set.  
 * @param isInstalled The new value of isInstalled.  
 * @param isArchived The new value of isArchived. A sticker set can't be installed and archived
 * simultaneously.
 */
suspend fun TelegramFlow.changeStickerSet(
  setId: Long,
  isInstalled: Boolean,
  isArchived: Boolean
) = this.sendFunctionLaunch(TdApi.ChangeStickerSet(setId, isInstalled, isArchived))

/**
 * Suspend function, which checks whether a name can be used for a new sticker set.
 *
 * @param name Name to be checked.
 *
 * @return [CheckStickerSetNameResult] This class is an abstract base class.
 */
suspend fun TelegramFlow.checkStickerSetName(name: String?): CheckStickerSetNameResult =
    this.sendFunctionAsync(TdApi.CheckStickerSetName(name))

/**
 * Suspend function, which clears the list of recently used stickers.
 *
 * @param isAttached Pass true to clear the list of stickers recently attached to photo or video
 * files; pass false to clear the list of recently sent stickers.
 */
suspend fun TelegramFlow.clearRecentStickers(isAttached: Boolean) =
    this.sendFunctionLaunch(TdApi.ClearRecentStickers(isAttached))

/**
 * Suspend function, which creates a new sticker set. Returns the newly created sticker set.
 *
 * @param userId Sticker set owner; ignored for regular users.  
 * @param title Sticker set title; 1-64 characters.  
 * @param name Sticker set name. Can contain only English letters, digits and underscores. Must end
 * with *&quot;_by_&lt;bot username&gt;&quot;* (*&lt;botUsername&gt;* is case insensitive) for bots;
 * 0-64 characters. If empty, then the name returned by getSuggestedStickerSetName will be used
 * automatically.  
 * @param stickerType Type of the stickers in the set.  
 * @param needsRepainting Pass true if stickers in the sticker set must be repainted; for custom
 * emoji sticker sets only.  
 * @param stickers List of stickers to be added to the set; 1-200 stickers for custom emoji sticker
 * sets, and 1-120 stickers otherwise. For TGS stickers, uploadStickerFile must be used before the
 * sticker is shown.  
 * @param source Source of the sticker set; may be empty if unknown.
 *
 * @return [StickerSet] Represents a sticker set.
 */
suspend fun TelegramFlow.createNewStickerSet(
  userId: Long,
  title: String?,
  name: String?,
  stickerType: StickerType?,
  needsRepainting: Boolean,
  stickers: Array<InputSticker>?,
  source: String?
): StickerSet = this.sendFunctionAsync(TdApi.CreateNewStickerSet(userId, title, name, stickerType,
    needsRepainting, stickers, source))

/**
 * Suspend function, which completely deletes a sticker set.
 *
 * @param name Sticker set name. The sticker set must be owned by the current user.
 */
suspend fun TelegramFlow.deleteStickerSet(name: String?) =
    this.sendFunctionLaunch(TdApi.DeleteStickerSet(name))

/**
 * Suspend function, which returns a list of archived sticker sets.
 *
 * @param stickerType Type of the sticker sets to return.  
 * @param offsetStickerSetId Identifier of the sticker set from which to return the result; use 0 to
 * get results from the beginning.  
 * @param limit The maximum number of sticker sets to return; up to 100.
 *
 * @return [StickerSets] Represents a list of sticker sets.
 */
suspend fun TelegramFlow.getArchivedStickerSets(
  stickerType: StickerType?,
  offsetStickerSetId: Long,
  limit: Int
): StickerSets = this.sendFunctionAsync(TdApi.GetArchivedStickerSets(stickerType,
    offsetStickerSetId, limit))

/**
 * Suspend function, which returns a list of sticker sets attached to a file, including regular,
 * mask, and emoji sticker sets. Currently, only animations, photos, and videos can have attached
 * sticker sets.
 *
 * @param fileId File identifier.
 *
 * @return [StickerSets] Represents a list of sticker sets.
 */
suspend fun TelegramFlow.getAttachedStickerSets(fileId: Int): StickerSets =
    this.sendFunctionAsync(TdApi.GetAttachedStickerSets(fileId))

/**
 * Suspend function, which returns favorite stickers.
 *
 * @return [Stickers] Represents a list of stickers.
 */
suspend fun TelegramFlow.getFavoriteStickers(): Stickers =
    this.sendFunctionAsync(TdApi.GetFavoriteStickers())

/**
 * Suspend function, which returns greeting stickers from regular sticker sets that can be used for
 * the start page of other users.
 *
 * @return [Stickers] Represents a list of stickers.
 */
suspend fun TelegramFlow.getGreetingStickers(): Stickers =
    this.sendFunctionAsync(TdApi.GetGreetingStickers())

/**
 * Suspend function, which returns a list of installed sticker sets.
 *
 * @param stickerType Type of the sticker sets to return.
 *
 * @return [StickerSets] Represents a list of sticker sets.
 */
suspend fun TelegramFlow.getInstalledStickerSets(stickerType: StickerType?): StickerSets =
    this.sendFunctionAsync(TdApi.GetInstalledStickerSets(stickerType))

/**
 * Suspend function, which returns sticker sets owned by the current user.
 *
 * @param offsetStickerSetId Identifier of the sticker set from which to return owned sticker sets;
 * use 0 to get results from the beginning.  
 * @param limit The maximum number of sticker sets to be returned; must be positive and can't be
 * greater than 100. For optimal performance, the number of returned objects is chosen by TDLib and can
 * be smaller than the specified limit.
 *
 * @return [StickerSets] Represents a list of sticker sets.
 */
suspend fun TelegramFlow.getOwnedStickerSets(offsetStickerSetId: Long, limit: Int): StickerSets =
    this.sendFunctionAsync(TdApi.GetOwnedStickerSets(offsetStickerSetId, limit))

/**
 * Suspend function, which returns examples of premium stickers for demonstration purposes.
 *
 * @return [Stickers] Represents a list of stickers.
 */
suspend fun TelegramFlow.getPremiumStickerExamples(): Stickers =
    this.sendFunctionAsync(TdApi.GetPremiumStickerExamples())

/**
 * Suspend function, which returns premium stickers from regular sticker sets.
 *
 * @param limit The maximum number of stickers to be returned; 0-100.
 *
 * @return [Stickers] Represents a list of stickers.
 */
suspend fun TelegramFlow.getPremiumStickers(limit: Int): Stickers =
    this.sendFunctionAsync(TdApi.GetPremiumStickers(limit))

/**
 * Suspend function, which returns a list of recently used stickers.
 *
 * @param isAttached Pass true to return stickers and masks that were recently attached to photos or
 * video files; pass false to return recently sent stickers.
 *
 * @return [Stickers] Represents a list of stickers.
 */
suspend fun TelegramFlow.getRecentStickers(isAttached: Boolean): Stickers =
    this.sendFunctionAsync(TdApi.GetRecentStickers(isAttached))

/**
 * Suspend function, which returns information about a sticker set by its identifier.
 *
 * @param setId Identifier of the sticker set.
 *
 * @return [StickerSet] Represents a sticker set.
 */
suspend fun TelegramFlow.getStickerSet(setId: Long): StickerSet =
    this.sendFunctionAsync(TdApi.GetStickerSet(setId))

/**
 * Suspend function, which returns stickers from the installed sticker sets that correspond to any
 * of the given emoji or can be found by sticker-specific keywords. If the query is non-empty, then
 * favorite, recently used or trending stickers may also be returned.
 *
 * @param stickerType Type of the stickers to return.  
 * @param query Search query; a space-separated list of emojis or a keyword prefix. If empty,
 * returns all known installed stickers.  
 * @param limit The maximum number of stickers to be returned.  
 * @param chatId Chat identifier for which to return stickers. Available custom emoji stickers may
 * be different for different chats.
 *
 * @return [Stickers] Represents a list of stickers.
 */
suspend fun TelegramFlow.getStickers(
  stickerType: StickerType?,
  query: String?,
  limit: Int,
  chatId: Long
): Stickers = this.sendFunctionAsync(TdApi.GetStickers(stickerType, query, limit, chatId))

/**
 * Suspend function, which returns a suggested name for a new sticker set with a given title.
 *
 * @param title Sticker set title; 1-64 characters.
 *
 * @return [Text] Contains some text.
 */
suspend fun TelegramFlow.getSuggestedStickerSetName(title: String?): Text =
    this.sendFunctionAsync(TdApi.GetSuggestedStickerSetName(title))

/**
 * Suspend function, which returns a list of trending sticker sets. For optimal performance, the
 * number of returned sticker sets is chosen by TDLib.
 *
 * @param stickerType Type of the sticker sets to return.  
 * @param offset The offset from which to return the sticker sets; must be non-negative.  
 * @param limit The maximum number of sticker sets to be returned; up to 100. For optimal
 * performance, the number of returned sticker sets is chosen by TDLib and can be smaller than the
 * specified limit, even if the end of the list has not been reached.
 *
 * @return [TrendingStickerSets] Represents a list of trending sticker sets.
 */
suspend fun TelegramFlow.getTrendingStickerSets(
  stickerType: StickerType?,
  offset: Int,
  limit: Int
): TrendingStickerSets = this.sendFunctionAsync(TdApi.GetTrendingStickerSets(stickerType, offset,
    limit))

/**
 * Suspend function, which removes a sticker from the list of favorite stickers.
 *
 * @param sticker Sticker file to delete from the list.
 */
suspend fun TelegramFlow.removeFavoriteSticker(sticker: InputFile?) =
    this.sendFunctionLaunch(TdApi.RemoveFavoriteSticker(sticker))

/**
 * Suspend function, which removes a sticker from the list of recently used stickers.
 *
 * @param isAttached Pass true to remove the sticker from the list of stickers recently attached to
 * photo or video files; pass false to remove the sticker from the list of recently sent stickers.  
 * @param sticker Sticker file to delete.
 */
suspend fun TelegramFlow.removeRecentSticker(isAttached: Boolean, sticker: InputFile?) =
    this.sendFunctionLaunch(TdApi.RemoveRecentSticker(isAttached, sticker))

/**
 * Suspend function, which removes a sticker from the set to which it belongs. The sticker set must
 * be owned by the current user.
 *
 * @param sticker Sticker to remove from the set.
 */
suspend fun TelegramFlow.removeStickerFromSet(sticker: InputFile?) =
    this.sendFunctionLaunch(TdApi.RemoveStickerFromSet(sticker))

/**
 * Suspend function, which changes the order of installed sticker sets.
 *
 * @param stickerType Type of the sticker sets to reorder.  
 * @param stickerSetIds Identifiers of installed sticker sets in the new correct order.
 */
suspend fun TelegramFlow.reorderInstalledStickerSets(stickerType: StickerType?,
    stickerSetIds: LongArray?) =
    this.sendFunctionLaunch(TdApi.ReorderInstalledStickerSets(stickerType, stickerSetIds))

/**
 * Suspend function, which replaces existing sticker in a set. The function is equivalent to
 * removeStickerFromSet, then addStickerToSet, then setStickerPositionInSet.
 *
 * @param userId Sticker set owner; ignored for regular users.  
 * @param name Sticker set name. The sticker set must be owned by the current user.  
 * @param oldSticker Sticker to remove from the set.  
 * @param newSticker Sticker to add to the set.
 */
suspend fun TelegramFlow.replaceStickerInSet(
  userId: Long,
  name: String?,
  oldSticker: InputFile?,
  newSticker: InputSticker?
) = this.sendFunctionLaunch(TdApi.ReplaceStickerInSet(userId, name, oldSticker, newSticker))

/**
 * Suspend function, which searches for installed sticker sets by looking for specified query in
 * their title and name.
 *
 * @param stickerType Type of the sticker sets to search for.  
 * @param query Query to search for.  
 * @param limit The maximum number of sticker sets to return.
 *
 * @return [StickerSets] Represents a list of sticker sets.
 */
suspend fun TelegramFlow.searchInstalledStickerSets(
  stickerType: StickerType?,
  query: String?,
  limit: Int
): StickerSets = this.sendFunctionAsync(TdApi.SearchInstalledStickerSets(stickerType, query, limit))

/**
 * Suspend function, which searches for a sticker set by its name.
 *
 * @param name Name of the sticker set.
 *
 * @return [StickerSet] Represents a sticker set.
 */
suspend fun TelegramFlow.searchStickerSet(name: String?): StickerSet =
    this.sendFunctionAsync(TdApi.SearchStickerSet(name))

/**
 * Suspend function, which searches for sticker sets by looking for specified query in their title
 * and name. Excludes installed sticker sets from the results.
 *
 * @param stickerType Type of the sticker sets to return.  
 * @param query Query to search for.
 *
 * @return [StickerSets] Represents a list of sticker sets.
 */
suspend fun TelegramFlow.searchStickerSets(stickerType: StickerType?, query: String?): StickerSets =
    this.sendFunctionAsync(TdApi.SearchStickerSets(stickerType, query))

/**
 * Suspend function, which searches for stickers from public sticker sets that correspond to any of
 * the given emoji.
 *
 * @param stickerType Type of the stickers to return.  
 * @param emojis Space-separated list of emojis to search for; must be non-empty.  
 * @param limit The maximum number of stickers to be returned; 0-100.
 *
 * @return [Stickers] Represents a list of stickers.
 */
suspend fun TelegramFlow.searchStickers(
  stickerType: StickerType?,
  emojis: String?,
  limit: Int
): Stickers = this.sendFunctionAsync(TdApi.SearchStickers(stickerType, emojis, limit))

/**
 * Suspend function, which changes the list of keywords of a sticker. The sticker must belong to a
 * regular or custom emoji sticker set that is owned by the current user.
 *
 * @param sticker Sticker.  
 * @param keywords List of up to 20 keywords with total length up to 64 characters, which can be
 * used to find the sticker.
 */
suspend fun TelegramFlow.setStickerKeywords(sticker: InputFile?, keywords: Array<String>?) =
    this.sendFunctionLaunch(TdApi.SetStickerKeywords(sticker, keywords))

/**
 * Suspend function, which changes the mask position of a mask sticker. The sticker must belong to a
 * mask sticker set that is owned by the current user.
 *
 * @param sticker Sticker.  
 * @param maskPosition Position where the mask is placed; pass null to remove mask position.
 */
suspend fun TelegramFlow.setStickerMaskPosition(sticker: InputFile?, maskPosition: MaskPosition?) =
    this.sendFunctionLaunch(TdApi.SetStickerMaskPosition(sticker, maskPosition))

/**
 * Suspend function, which changes the position of a sticker in the set to which it belongs. The
 * sticker set must be owned by the current user.
 *
 * @param sticker Sticker.  
 * @param position New position of the sticker in the set, 0-based.
 */
suspend fun TelegramFlow.setStickerPositionInSet(sticker: InputFile?, position: Int) =
    this.sendFunctionLaunch(TdApi.SetStickerPositionInSet(sticker, position))

/**
 * Suspend function, which sets a sticker set thumbnail.
 *
 * @param userId Sticker set owner; ignored for regular users.  
 * @param name Sticker set name. The sticker set must be owned by the current user.  
 * @param thumbnail Thumbnail to set; pass null to remove the sticker set thumbnail.  
 * @param format Format of the thumbnail; pass null if thumbnail is removed.
 */
suspend fun TelegramFlow.setStickerSetThumbnail(
  userId: Long,
  name: String?,
  thumbnail: InputFile?,
  format: StickerFormat?
) = this.sendFunctionLaunch(TdApi.SetStickerSetThumbnail(userId, name, thumbnail, format))

/**
 * Suspend function, which sets a sticker set title.
 *
 * @param name Sticker set name. The sticker set must be owned by the current user.  
 * @param title New sticker set title.
 */
suspend fun TelegramFlow.setStickerSetTitle(name: String?, title: String?) =
    this.sendFunctionLaunch(TdApi.SetStickerSetTitle(name, title))

/**
 * Suspend function, which changes the sticker set of a supergroup; requires canChangeInfo
 * administrator right.
 *
 * @param supergroupId Identifier of the supergroup.  
 * @param stickerSetId New value of the supergroup sticker set identifier. Use 0 to remove the
 * supergroup sticker set.
 */
suspend fun TelegramFlow.setSupergroupStickerSet(supergroupId: Long, stickerSetId: Long) =
    this.sendFunctionLaunch(TdApi.SetSupergroupStickerSet(supergroupId, stickerSetId))

/**
 * Suspend function, which informs the server that some trending sticker sets have been viewed by
 * the user.
 *
 * @param stickerSetIds Identifiers of viewed trending sticker sets.
 */
suspend fun TelegramFlow.viewTrendingStickerSets(stickerSetIds: LongArray?) =
    this.sendFunctionLaunch(TdApi.ViewTrendingStickerSets(stickerSetIds))
