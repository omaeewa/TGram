//
// NOTE: THIS FILE IS AUTO-GENERATED by the "TdApiKtxGenerator".kt
// See: https://github.com/tdlibx/td-ktx-generator/
//
package kotlinx.telegram.coroutines

import kotlin.Array
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.LongArray
import kotlin.String
import kotlinx.telegram.core.TelegramFlow
import org.drinkless.tdlib.TdApi
import org.drinkless.tdlib.TdApi.CanSendMessageToUserResult
import org.drinkless.tdlib.TdApi.ChatPhotos
import org.drinkless.tdlib.TdApi.FormattedText
import org.drinkless.tdlib.TdApi.InputChatPhoto
import org.drinkless.tdlib.TdApi.User
import org.drinkless.tdlib.TdApi.UserFullInfo
import org.drinkless.tdlib.TdApi.UserLink
import org.drinkless.tdlib.TdApi.UserPrivacySetting
import org.drinkless.tdlib.TdApi.UserPrivacySettingRules
import org.drinkless.tdlib.TdApi.UserSupportInfo

/**
 * Suspend function, which check whether the current user can message another user or try to create
 * a chat with them.
 *
 * @param userId Identifier of the other user.  
 * @param onlyLocal Pass true to get only locally available information without sending network
 * requests.
 *
 * @return [CanSendMessageToUserResult] This class is an abstract base class.
 */
suspend fun TelegramFlow.canSendMessageToUser(userId: Long, onlyLocal: Boolean):
    CanSendMessageToUserResult = this.sendFunctionAsync(TdApi.CanSendMessageToUser(userId,
    onlyLocal))

/**
 * Suspend function, which disables all active non-editable usernames of a supergroup or channel,
 * requires owner privileges in the supergroup or channel.
 *
 * @param supergroupId Identifier of the supergroup or channel.
 */
suspend fun TelegramFlow.disableAllSupergroupUsernames(supergroupId: Long) =
    this.sendFunctionLaunch(TdApi.DisableAllSupergroupUsernames(supergroupId))

/**
 * Suspend function, which returns a user that can be contacted to get support.
 *
 * @return [User] Represents a user.
 */
suspend fun TelegramFlow.getSupportUser(): User = this.sendFunctionAsync(TdApi.GetSupportUser())

/**
 * Suspend function, which returns information about a user by their identifier. This is an offline
 * request if the current user is not a bot.
 *
 * @param userId User identifier.
 *
 * @return [User] Represents a user.
 */
suspend fun TelegramFlow.getUser(userId: Long): User = this.sendFunctionAsync(TdApi.GetUser(userId))

/**
 * Suspend function, which returns full information about a user by their identifier.
 *
 * @param userId User identifier.
 *
 * @return [UserFullInfo] Contains full information about a user.
 */
suspend fun TelegramFlow.getUserFullInfo(userId: Long): UserFullInfo =
    this.sendFunctionAsync(TdApi.GetUserFullInfo(userId))

/**
 * Suspend function, which returns an HTTPS link, which can be used to get information about the
 * current user.
 *
 * @return [UserLink] Contains an HTTPS URL, which can be used to get information about a user.
 */
suspend fun TelegramFlow.getUserLink(): UserLink = this.sendFunctionAsync(TdApi.GetUserLink())

/**
 * Suspend function, which returns the current privacy settings.
 *
 * @param setting The privacy setting.
 *
 * @return [UserPrivacySettingRules] A list of privacy rules. Rules are matched in the specified
 * order. The first matched rule defines the privacy setting for a given user. If no rule matches, the
 * action is not allowed.
 */
suspend fun TelegramFlow.getUserPrivacySettingRules(setting: UserPrivacySetting?):
    UserPrivacySettingRules = this.sendFunctionAsync(TdApi.GetUserPrivacySettingRules(setting))

/**
 * Suspend function, which returns the profile photos of a user. Personal and public photo aren't
 * returned.
 *
 * @param userId User identifier.  
 * @param offset The number of photos to skip; must be non-negative.  
 * @param limit The maximum number of photos to be returned; up to 100.
 *
 * @return [ChatPhotos] Contains a list of chat or user profile photos.
 */
suspend fun TelegramFlow.getUserProfilePhotos(
  userId: Long,
  offset: Int,
  limit: Int
): ChatPhotos = this.sendFunctionAsync(TdApi.GetUserProfilePhotos(userId, offset, limit))

/**
 * Suspend function, which returns support information for the given user; for Telegram support
 * only.
 *
 * @param userId User identifier.
 *
 * @return [UserSupportInfo] Contains custom information about the user.
 */
suspend fun TelegramFlow.getUserSupportInfo(userId: Long): UserSupportInfo =
    this.sendFunctionAsync(TdApi.GetUserSupportInfo(userId))

/**
 * Suspend function, which finishes user registration. Works only when the current authorization
 * state is authorizationStateWaitRegistration.
 *
 * @param firstName The first name of the user; 1-64 characters.  
 * @param lastName The last name of the user; 0-64 characters.  
 * @param disableNotification Pass true to disable notification about the current user joining
 * Telegram for other users that added them to contact list.
 */
suspend fun TelegramFlow.registerUser(
  firstName: String?,
  lastName: String?,
  disableNotification: Boolean
) = this.sendFunctionLaunch(TdApi.RegisterUser(firstName, lastName, disableNotification))

/**
 * Suspend function, which changes order of active usernames of the current user.
 *
 * @param usernames The new order of active usernames. All currently active usernames must be
 * specified.
 */
suspend fun TelegramFlow.reorderActiveUsernames(usernames: Array<String>?) =
    this.sendFunctionLaunch(TdApi.ReorderActiveUsernames(usernames))

/**
 * Suspend function, which changes order of active usernames of a bot. Can be called only if
 * userTypeBot.canBeEdited == true.
 *
 * @param botUserId Identifier of the target bot.  
 * @param usernames The new order of active usernames. All currently active usernames must be
 * specified.
 */
suspend fun TelegramFlow.reorderBotActiveUsernames(botUserId: Long, usernames: Array<String>?) =
    this.sendFunctionLaunch(TdApi.ReorderBotActiveUsernames(botUserId, usernames))

/**
 * Suspend function, which changes order of active usernames of a supergroup or channel, requires
 * owner privileges in the supergroup or channel.
 *
 * @param supergroupId Identifier of the supergroup or channel.  
 * @param usernames The new order of active usernames. All currently active usernames must be
 * specified.
 */
suspend fun TelegramFlow.reorderSupergroupActiveUsernames(supergroupId: Long,
    usernames: Array<String>?) =
    this.sendFunctionLaunch(TdApi.ReorderSupergroupActiveUsernames(supergroupId, usernames))

/**
 * Suspend function, which searches a user by a token from the user's link.
 *
 * @param token Token to search for.
 *
 * @return [User] Represents a user.
 */
suspend fun TelegramFlow.searchUserByToken(token: String?): User =
    this.sendFunctionAsync(TdApi.SearchUserByToken(token))

/**
 * Suspend function, which changes the editable username of a supergroup or channel, requires owner
 * privileges in the supergroup or channel.
 *
 * @param supergroupId Identifier of the supergroup or channel.  
 * @param username New value of the username. Use an empty string to remove the username. The
 * username can't be completely removed if there is another active or disabled username.
 */
suspend fun TelegramFlow.setSupergroupUsername(supergroupId: Long, username: String?) =
    this.sendFunctionLaunch(TdApi.SetSupergroupUsername(supergroupId, username))

/**
 * Suspend function, which changes a personal profile photo of a contact user.
 *
 * @param userId User identifier.  
 * @param photo Profile photo to set; pass null to delete the photo; inputChatPhotoPrevious isn't
 * supported in this function.
 */
suspend fun TelegramFlow.setUserPersonalProfilePhoto(userId: Long, photo: InputChatPhoto?) =
    this.sendFunctionLaunch(TdApi.SetUserPersonalProfilePhoto(userId, photo))

/**
 * Suspend function, which changes user privacy settings.
 *
 * @param setting The privacy setting.  
 * @param rules The new privacy rules.
 */
suspend fun TelegramFlow.setUserPrivacySettingRules(setting: UserPrivacySetting?,
    rules: UserPrivacySettingRules?) =
    this.sendFunctionLaunch(TdApi.SetUserPrivacySettingRules(setting, rules))

/**
 * Suspend function, which sets support information for the given user; for Telegram support only.
 *
 * @param userId User identifier.  
 * @param message New information message.
 *
 * @return [UserSupportInfo] Contains custom information about the user.
 */
suspend fun TelegramFlow.setUserSupportInfo(userId: Long, message: FormattedText?): UserSupportInfo
    = this.sendFunctionAsync(TdApi.SetUserSupportInfo(userId, message))

/**
 * Suspend function, which changes the editable username of the current user.
 *
 * @param username The new value of the username. Use an empty string to remove the username. The
 * username can't be completely removed if there is another active or disabled username.
 */
suspend fun TelegramFlow.setUsername(username: String?) =
    this.sendFunctionLaunch(TdApi.SetUsername(username))

/**
 * Suspend function, which shares users after pressing a keyboardButtonTypeRequestUsers button with
 * the bot.
 *
 * @param chatId Identifier of the chat with the bot.  
 * @param messageId Identifier of the message with the button.  
 * @param buttonId Identifier of the button.  
 * @param sharedUserIds Identifiers of the shared users.  
 * @param onlyCheck Pass true to check that the users can be shared by the button instead of
 * actually sharing them.
 */
suspend fun TelegramFlow.shareUsersWithBot(
  chatId: Long,
  messageId: Long,
  buttonId: Int,
  sharedUserIds: LongArray?,
  onlyCheck: Boolean
) = this.sendFunctionLaunch(TdApi.ShareUsersWithBot(chatId, messageId, buttonId, sharedUserIds,
    onlyCheck))

/**
 * Suspend function, which suggests a profile photo to another regular user with common messages.
 *
 * @param userId User identifier.  
 * @param photo Profile photo to suggest; inputChatPhotoPrevious isn't supported in this function.
 */
suspend fun TelegramFlow.suggestUserProfilePhoto(userId: Long, photo: InputChatPhoto?) =
    this.sendFunctionLaunch(TdApi.SuggestUserProfilePhoto(userId, photo))

/**
 * Suspend function, which changes active state for a username of a bot. The editable username can't
 * be disabled. May return an error with a message &quot;USERNAMES_ACTIVE_TOO_MUCH&quot; if the maximum
 * number of active usernames has been reached. Can be called only if userTypeBot.canBeEdited == true.
 *
 * @param botUserId Identifier of the target bot.  
 * @param username The username to change.  
 * @param isActive Pass true to activate the username; pass false to disable it.
 */
suspend fun TelegramFlow.toggleBotUsernameIsActive(
  botUserId: Long,
  username: String?,
  isActive: Boolean
) = this.sendFunctionLaunch(TdApi.ToggleBotUsernameIsActive(botUserId, username, isActive))

/**
 * Suspend function, which changes active state for a username of a supergroup or channel, requires
 * owner privileges in the supergroup or channel. The editable username can't be disabled. May return
 * an error with a message &quot;USERNAMES_ACTIVE_TOO_MUCH&quot; if the maximum number of active
 * usernames has been reached.
 *
 * @param supergroupId Identifier of the supergroup or channel.  
 * @param username The username to change.  
 * @param isActive Pass true to activate the username; pass false to disable it.
 */
suspend fun TelegramFlow.toggleSupergroupUsernameIsActive(
  supergroupId: Long,
  username: String?,
  isActive: Boolean
) = this.sendFunctionLaunch(TdApi.ToggleSupergroupUsernameIsActive(supergroupId, username,
    isActive))

/**
 * Suspend function, which changes active state for a username of the current user. The editable
 * username can't be disabled. May return an error with a message &quot;USERNAMES_ACTIVE_TOO_MUCH&quot;
 * if the maximum number of active usernames has been reached.
 *
 * @param username The username to change.  
 * @param isActive Pass true to activate the username; pass false to disable it.
 */
suspend fun TelegramFlow.toggleUsernameIsActive(username: String?, isActive: Boolean) =
    this.sendFunctionLaunch(TdApi.ToggleUsernameIsActive(username, isActive))
