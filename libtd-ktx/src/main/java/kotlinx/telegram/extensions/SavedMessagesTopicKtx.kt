//
// NOTE: THIS FILE IS AUTO-GENERATED by the "ExtensionsGenerator".kt
// See: https://github.com/tdlibx/td-ktx-generator/
//
package kotlinx.telegram.extensions

import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlinx.telegram.core.TelegramFlow
import kotlinx.telegram.coroutines.deleteSavedMessagesTopicHistory
import kotlinx.telegram.coroutines.deleteSavedMessagesTopicMessagesByDate
import kotlinx.telegram.coroutines.getChatMessageCalendar
import kotlinx.telegram.coroutines.getChatMessageCount
import kotlinx.telegram.coroutines.getChatMessagePosition
import kotlinx.telegram.coroutines.getChatSparseMessagePositions
import kotlinx.telegram.coroutines.getSavedMessagesTags
import kotlinx.telegram.coroutines.getSavedMessagesTopicHistory
import kotlinx.telegram.coroutines.getSavedMessagesTopicMessageByDate
import kotlinx.telegram.coroutines.searchChatMessages
import kotlinx.telegram.coroutines.searchSavedMessages
import kotlinx.telegram.coroutines.toggleSavedMessagesTopicIsPinned
import org.drinkless.tdlib.TdApi
import org.drinkless.tdlib.TdApi.MessageSender
import org.drinkless.tdlib.TdApi.ReactionType
import org.drinkless.tdlib.TdApi.SavedMessagesTopic
import org.drinkless.tdlib.TdApi.SearchMessagesFilter

/**
 * Interface for access [TdApi.SavedMessagesTopic] extension functions. Can be used alongside with
 * other extension interfaces of the package. Must contain [TelegramFlow] instance field to access its
 * functionality
 */
interface SavedMessagesTopicKtx : BaseKtx {
  /**
   * Instance of the [TelegramFlow] connecting extensions to the Telegram Client
   */
  override val api: TelegramFlow

  /**
   * Suspend function, which deletes all messages in a Saved Messages topic.
   */
  suspend fun SavedMessagesTopic.deleteHistory() = api.deleteSavedMessagesTopicHistory(this.id)

  /**
   * Suspend function, which deletes all messages between the specified dates in a Saved Messages
   * topic. Messages sent in the last 30 seconds will not be deleted.
   *
   * @param minDate The minimum date of the messages to delete.  
   * @param maxDate The maximum date of the messages to delete.
   */
  suspend fun SavedMessagesTopic.deleteMessagesByDate(minDate: Int, maxDate: Int) =
      api.deleteSavedMessagesTopicMessagesByDate(this.id, minDate, maxDate)

  /**
   * Suspend function, which returns information about the next messages of the specified type in
   * the chat split by days. Returns the results in reverse chronological order. Can return partial
   * result for the last returned day. Behavior of this method depends on the value of the option
   * &quot;utc_time_offset&quot;.
   *
   * @param chatId Identifier of the chat in which to return information about messages.  
   * @param filter Filter for message content. Filters searchMessagesFilterEmpty,
   * searchMessagesFilterMention, searchMessagesFilterUnreadMention, and
   * searchMessagesFilterUnreadReaction are unsupported in this function.  
   * @param fromMessageId The message identifier from which to return information about messages;
   * use 0 to get results from the last message.  
   *
   * @return [TdApi.MessageCalendar] Contains information about found messages, split by days
   * according to the option &quot;utc_time_offset&quot;.
   */
  suspend fun SavedMessagesTopic.getChatMessageCalendar(
    chatId: Long,
    filter: SearchMessagesFilter?,
    fromMessageId: Long
  ) = api.getChatMessageCalendar(chatId, filter, fromMessageId, this.id)

  /**
   * Suspend function, which returns approximate number of messages of the specified type in the
   * chat.
   *
   * @param chatId Identifier of the chat in which to count messages.  
   * @param filter Filter for message content; searchMessagesFilterEmpty is unsupported in this
   * function.  
   * @param returnLocal Pass true to get the number of messages without sending network requests,
   * or -1 if the number of messages is unknown locally.
   *
   * @return [TdApi.Count] Contains a counter.
   */
  suspend fun SavedMessagesTopic.getChatMessageCount(
    chatId: Long,
    filter: SearchMessagesFilter?,
    returnLocal: Boolean
  ) = api.getChatMessageCount(chatId, filter, this.id, returnLocal)

  /**
   * Suspend function, which returns approximate 1-based position of a message among messages, which
   * can be found by the specified filter in the chat. Cannot be used in secret chats.
   *
   * @param chatId Identifier of the chat in which to find message position.  
   * @param messageId Message identifier.  
   * @param filter Filter for message content; searchMessagesFilterEmpty,
   * searchMessagesFilterUnreadMention, searchMessagesFilterUnreadReaction, and
   * searchMessagesFilterFailedToSend are unsupported in this function.  
   * @param messageThreadId If not 0, only messages in the specified thread will be considered;
   * supergroups only.  
   *
   * @return [TdApi.Count] Contains a counter.
   */
  suspend fun SavedMessagesTopic.getChatMessagePosition(
    chatId: Long,
    messageId: Long,
    filter: SearchMessagesFilter?,
    messageThreadId: Long
  ) = api.getChatMessagePosition(chatId, messageId, filter, messageThreadId, this.id)

  /**
   * Suspend function, which returns sparse positions of messages of the specified type in the chat
   * to be used for shared media scroll implementation. Returns the results in reverse chronological
   * order (i.e., in order of decreasing messageId). Cannot be used in secret chats or with
   * searchMessagesFilterFailedToSend filter without an enabled message database.
   *
   * @param chatId Identifier of the chat in which to return information about message positions.  
   * @param filter Filter for message content. Filters searchMessagesFilterEmpty,
   * searchMessagesFilterMention, searchMessagesFilterUnreadMention, and
   * searchMessagesFilterUnreadReaction are unsupported in this function.  
   * @param fromMessageId The message identifier from which to return information about message
   * positions.  
   * @param limit The expected number of message positions to be returned; 50-2000. A smaller number
   * of positions can be returned, if there are not enough appropriate messages.  
   *
   * @return [TdApi.MessagePositions] Contains a list of message positions.
   */
  suspend fun SavedMessagesTopic.getChatSparseMessagePositions(
    chatId: Long,
    filter: SearchMessagesFilter?,
    fromMessageId: Long,
    limit: Int
  ) = api.getChatSparseMessagePositions(chatId, filter, fromMessageId, limit, this.id)

  /**
   * Suspend function, which returns tags used in Saved Messages or a Saved Messages topic.
   *
   *
   * @return [TdApi.SavedMessagesTags] Contains a list of tags used in Saved Messages.
   */
  suspend fun SavedMessagesTopic.getSavedMessagesTags() = api.getSavedMessagesTags(this.id)

  /**
   * Suspend function, which returns messages in a Saved Messages topic. The messages are returned
   * in a reverse chronological order (i.e., in order of decreasing messageId).
   *
   * @param fromMessageId Identifier of the message starting from which messages must be fetched;
   * use 0 to get results from the last message.  
   * @param offset Specify 0 to get results from exactly the message fromMessageId or a negative
   * offset up to 99 to get additionally some newer messages.  
   * @param limit The maximum number of messages to be returned; must be positive and can't be
   * greater than 100. If the offset is negative, the limit must be greater than or equal to -offset.
   * For optimal performance, the number of returned messages is chosen by TDLib and can be smaller
   * than the specified limit.
   *
   * @return [TdApi.Messages] Contains a list of messages.
   */
  suspend fun SavedMessagesTopic.getHistory(
    fromMessageId: Long,
    offset: Int,
    limit: Int
  ) = api.getSavedMessagesTopicHistory(this.id, fromMessageId, offset, limit)

  /**
   * Suspend function, which returns the last message sent in a Saved Messages topic no later than
   * the specified date.
   *
   * @param date Point in time (Unix timestamp) relative to which to search for messages.
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun SavedMessagesTopic.getMessageByDate(date: Int) =
      api.getSavedMessagesTopicMessageByDate(this.id, date)

  /**
   * Suspend function, which searches for messages with given words in the chat. Returns the results
   * in reverse chronological order, i.e. in order of decreasing messageId. Cannot be used in secret
   * chats with a non-empty query (searchSecretMessages must be used instead), or without an enabled
   * message database. For optimal performance, the number of returned messages is chosen by TDLib and
   * can be smaller than the specified limit. A combination of query, senderId, filter and
   * messageThreadId search criteria is expected to be supported, only if it is required for Telegram
   * official application implementation.
   *
   * @param chatId Identifier of the chat in which to search messages.  
   * @param query Query to search for.  
   * @param senderId Identifier of the sender of messages to search for; pass null to search for
   * messages from any sender. Not supported in secret chats.  
   * @param fromMessageId Identifier of the message starting from which history must be fetched; use
   * 0 to get results from the last message.  
   * @param offset Specify 0 to get results from exactly the message fromMessageId or a negative
   * offset to get the specified message and some newer messages.  
   * @param limit The maximum number of messages to be returned; must be positive and can't be
   * greater than 100. If the offset is negative, the limit must be greater than -offset. For optimal
   * performance, the number of returned messages is chosen by TDLib and can be smaller than the
   * specified limit.  
   * @param filter Additional filter for messages to search; pass null to search for all messages.  
   * @param messageThreadId If not 0, only messages in the specified thread will be returned;
   * supergroups only.  
   *
   * @return [TdApi.FoundChatMessages] Contains a list of messages found by a search in a given
   * chat.
   */
  suspend fun SavedMessagesTopic.searchChatMessages(
    chatId: Long,
    query: String?,
    senderId: MessageSender?,
    fromMessageId: Long,
    offset: Int,
    limit: Int,
    filter: SearchMessagesFilter?,
    messageThreadId: Long
  ) = api.searchChatMessages(chatId, query, senderId, fromMessageId, offset, limit, filter,
      messageThreadId, this.id)

  /**
   * Suspend function, which searches for messages tagged by the given reaction and with the given
   * words in the Saved Messages chat; for Telegram Premium users only. Returns the results in reverse
   * chronological order, i.e. in order of decreasing messageId For optimal performance, the number of
   * returned messages is chosen by TDLib and can be smaller than the specified limit.
   *
   * @param tag Tag to search for; pass null to return all suitable messages.  
   * @param query Query to search for.  
   * @param fromMessageId Identifier of the message starting from which messages must be fetched;
   * use 0 to get results from the last message.  
   * @param offset Specify 0 to get results from exactly the message fromMessageId or a negative
   * offset to get the specified message and some newer messages.  
   * @param limit The maximum number of messages to be returned; must be positive and can't be
   * greater than 100. If the offset is negative, the limit must be greater than -offset. For optimal
   * performance, the number of returned messages is chosen by TDLib and can be smaller than the
   * specified limit.
   *
   * @return [TdApi.FoundChatMessages] Contains a list of messages found by a search in a given
   * chat.
   */
  suspend fun SavedMessagesTopic.searchSavedMessages(
    tag: ReactionType?,
    query: String?,
    fromMessageId: Long,
    offset: Int,
    limit: Int
  ) = api.searchSavedMessages(this.id, tag, query, fromMessageId, offset, limit)

  /**
   * Suspend function, which changes the pinned state of a Saved Messages topic. There can be up to
   * getOption(&quot;pinned_saved_messages_topic_count_max&quot;) pinned topics. The limit can be
   * increased with Telegram Premium.
   *
   * @param isPinned Pass true to pin the topic; pass false to unpin it.
   */
  suspend fun SavedMessagesTopic.toggleIsPinned(isPinned: Boolean) =
      api.toggleSavedMessagesTopicIsPinned(this.id, isPinned)
}
