//
// NOTE: THIS FILE IS AUTO-GENERATED by the "ExtensionsGenerator".kt
// See: https://github.com/tdlibx/td-ktx-generator/
//
package kotlinx.telegram.extensions

import kotlin.Array
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlinx.telegram.core.TelegramFlow
import kotlinx.telegram.coroutines.editBusinessMessageCaption
import kotlinx.telegram.coroutines.editBusinessMessageLiveLocation
import kotlinx.telegram.coroutines.editBusinessMessageMedia
import kotlinx.telegram.coroutines.editBusinessMessageReplyMarkup
import kotlinx.telegram.coroutines.editBusinessMessageText
import kotlinx.telegram.coroutines.sendBusinessMessage
import kotlinx.telegram.coroutines.sendBusinessMessageAlbum
import kotlinx.telegram.coroutines.sendChatAction
import kotlinx.telegram.coroutines.stopBusinessPoll
import org.drinkless.tdlib.TdApi
import org.drinkless.tdlib.TdApi.BusinessConnection
import org.drinkless.tdlib.TdApi.ChatAction
import org.drinkless.tdlib.TdApi.FormattedText
import org.drinkless.tdlib.TdApi.InputMessageContent
import org.drinkless.tdlib.TdApi.InputMessageReplyTo
import org.drinkless.tdlib.TdApi.Location
import org.drinkless.tdlib.TdApi.ReplyMarkup

/**
 * Interface for access [TdApi.BusinessConnection] extension functions. Can be used alongside with
 * other extension interfaces of the package. Must contain [TelegramFlow] instance field to access its
 * functionality
 */
interface BusinessConnectionKtx : BaseKtx {
  /**
   * Instance of the [TelegramFlow] connecting extensions to the Telegram Client
   */
  override val api: TelegramFlow

  /**
   * Suspend function, which edits the caption of a message sent on behalf of a business account;
   * for bots only.
   *
   * @param chatId The chat the message belongs to.  
   * @param messageId Identifier of the message.  
   * @param replyMarkup The new message reply markup; pass null if none.  
   * @param caption New message content caption; pass null to remove caption;
   * 0-getOption(&quot;message_caption_length_max&quot;) characters.  
   * @param showCaptionAboveMedia Pass true to show the caption above the media; otherwise, caption
   * will be shown below the media. Can be true only for animation, photo, and video messages.
   *
   * @return [TdApi.BusinessMessage] Describes a message from a business account as received by a
   * bot.
   */
  suspend fun BusinessConnection.editBusinessMessageCaption(
    chatId: Long,
    messageId: Long,
    replyMarkup: ReplyMarkup?,
    caption: FormattedText?,
    showCaptionAboveMedia: Boolean
  ) = api.editBusinessMessageCaption(this.id, chatId, messageId, replyMarkup, caption,
      showCaptionAboveMedia)

  /**
   * Suspend function, which edits the content of a live location in a message sent on behalf of a
   * business account; for bots only.
   *
   * @param chatId The chat the message belongs to.  
   * @param messageId Identifier of the message.  
   * @param replyMarkup The new message reply markup; pass null if none.  
   * @param location New location content of the message; pass null to stop sharing the live
   * location.  
   * @param livePeriod New time relative to the message send date, for which the location can be
   * updated, in seconds. If 0x7FFFFFFF specified, then the location can be updated forever. Otherwise,
   * must not exceed the current livePeriod by more than a day, and the live location expiration date
   * must remain in the next 90 days. Pass 0 to keep the current livePeriod.  
   * @param heading The new direction in which the location moves, in degrees; 1-360. Pass 0 if
   * unknown.  
   * @param proximityAlertRadius The new maximum distance for proximity alerts, in meters
   * (0-100000). Pass 0 if the notification is disabled.
   *
   * @return [TdApi.BusinessMessage] Describes a message from a business account as received by a
   * bot.
   */
  suspend fun BusinessConnection.editBusinessMessageLiveLocation(
    chatId: Long,
    messageId: Long,
    replyMarkup: ReplyMarkup?,
    location: Location?,
    livePeriod: Int,
    heading: Int,
    proximityAlertRadius: Int
  ) = api.editBusinessMessageLiveLocation(this.id, chatId, messageId, replyMarkup, location,
      livePeriod, heading, proximityAlertRadius)

  /**
   * Suspend function, which edits the content of a message with an animation, an audio, a document,
   * a photo or a video in a message sent on behalf of a business account; for bots only.
   *
   * @param chatId The chat the message belongs to.  
   * @param messageId Identifier of the message.  
   * @param replyMarkup The new message reply markup; pass null if none; for bots only.  
   * @param inputMessageContent New content of the message. Must be one of the following types:
   * inputMessageAnimation, inputMessageAudio, inputMessageDocument, inputMessagePhoto or
   * inputMessageVideo.
   *
   * @return [TdApi.BusinessMessage] Describes a message from a business account as received by a
   * bot.
   */
  suspend fun BusinessConnection.editBusinessMessageMedia(
    chatId: Long,
    messageId: Long,
    replyMarkup: ReplyMarkup?,
    inputMessageContent: InputMessageContent?
  ) = api.editBusinessMessageMedia(this.id, chatId, messageId, replyMarkup, inputMessageContent)

  /**
   * Suspend function, which edits the reply markup of a message sent on behalf of a business
   * account; for bots only.
   *
   * @param chatId The chat the message belongs to.  
   * @param messageId Identifier of the message.  
   * @param replyMarkup The new message reply markup; pass null if none.
   *
   * @return [TdApi.BusinessMessage] Describes a message from a business account as received by a
   * bot.
   */
  suspend fun BusinessConnection.editBusinessMessageReplyMarkup(
    chatId: Long,
    messageId: Long,
    replyMarkup: ReplyMarkup?
  ) = api.editBusinessMessageReplyMarkup(this.id, chatId, messageId, replyMarkup)

  /**
   * Suspend function, which edits the text of a text or game message sent on behalf of a business
   * account; for bots only.
   *
   * @param chatId The chat the message belongs to.  
   * @param messageId Identifier of the message.  
   * @param replyMarkup The new message reply markup; pass null if none.  
   * @param inputMessageContent New text content of the message. Must be of type inputMessageText.
   *
   * @return [TdApi.BusinessMessage] Describes a message from a business account as received by a
   * bot.
   */
  suspend fun BusinessConnection.editBusinessMessageText(
    chatId: Long,
    messageId: Long,
    replyMarkup: ReplyMarkup?,
    inputMessageContent: InputMessageContent?
  ) = api.editBusinessMessageText(this.id, chatId, messageId, replyMarkup, inputMessageContent)

  /**
   * Suspend function, which sends a message on behalf of a business account; for bots only. Returns
   * the message after it was sent.
   *
   * @param chatId Target chat.  
   * @param replyTo Information about the message to be replied; pass null if none.  
   * @param disableNotification Pass true to disable notification for the message.  
   * @param protectContent Pass true if the content of the message must be protected from forwarding
   * and saving.  
   * @param effectId Identifier of the effect to apply to the message.  
   * @param replyMarkup Markup for replying to the message; pass null if none.  
   * @param inputMessageContent The content of the message to be sent.
   *
   * @return [TdApi.BusinessMessage] Describes a message from a business account as received by a
   * bot.
   */
  suspend fun BusinessConnection.sendBusinessMessage(
    chatId: Long,
    replyTo: InputMessageReplyTo?,
    disableNotification: Boolean,
    protectContent: Boolean,
    effectId: Long,
    replyMarkup: ReplyMarkup?,
    inputMessageContent: InputMessageContent?
  ) = api.sendBusinessMessage(this.id, chatId, replyTo, disableNotification, protectContent,
      effectId, replyMarkup, inputMessageContent)

  /**
   * Suspend function, which sends 2-10 messages grouped together into an album on behalf of a
   * business account; for bots only. Currently, only audio, document, photo and video messages can be
   * grouped into an album. Documents and audio files can be only grouped in an album with messages of
   * the same type. Returns sent messages.
   *
   * @param chatId Target chat.  
   * @param replyTo Information about the message to be replied; pass null if none.  
   * @param disableNotification Pass true to disable notification for the message.  
   * @param protectContent Pass true if the content of the message must be protected from forwarding
   * and saving.  
   * @param effectId Identifier of the effect to apply to the message.  
   * @param inputMessageContents Contents of messages to be sent. At most 10 messages can be added
   * to an album. All messages must have the same value of showCaptionAboveMedia.
   *
   * @return [TdApi.BusinessMessages] Contains a list of messages from a business account as
   * received by a bot.
   */
  suspend fun BusinessConnection.sendBusinessMessageAlbum(
    chatId: Long,
    replyTo: InputMessageReplyTo?,
    disableNotification: Boolean,
    protectContent: Boolean,
    effectId: Long,
    inputMessageContents: Array<InputMessageContent>?
  ) = api.sendBusinessMessageAlbum(this.id, chatId, replyTo, disableNotification, protectContent,
      effectId, inputMessageContents)

  /**
   * Suspend function, which sends a notification about user activity in a chat.
   *
   * @param chatId Chat identifier.  
   * @param messageThreadId If not 0, the message thread identifier in which the action was
   * performed.  
   * @param action The action description; pass null to cancel the currently active action.
   */
  suspend fun BusinessConnection.sendChatAction(
    chatId: Long,
    messageThreadId: Long,
    action: ChatAction?
  ) = api.sendChatAction(chatId, messageThreadId, this.id, action)

  /**
   * Suspend function, which stops a poll sent on behalf of a business account; for bots only.
   *
   * @param chatId The chat the message belongs to.  
   * @param messageId Identifier of the message containing the poll.  
   * @param replyMarkup The new message reply markup; pass null if none.
   *
   * @return [TdApi.BusinessMessage] Describes a message from a business account as received by a
   * bot.
   */
  suspend fun BusinessConnection.stopBusinessPoll(
    chatId: Long,
    messageId: Long,
    replyMarkup: ReplyMarkup?
  ) = api.stopBusinessPoll(this.id, chatId, messageId, replyMarkup)
}
