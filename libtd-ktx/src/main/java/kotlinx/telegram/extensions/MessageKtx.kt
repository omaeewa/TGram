//
// NOTE: THIS FILE IS AUTO-GENERATED by the "ExtensionsGenerator".kt
// See: https://github.com/tdlibx/td-ktx-generator/
//
package kotlinx.telegram.extensions

import kotlin.Array
import kotlin.Boolean
import kotlin.ByteArray
import kotlin.Int
import kotlin.IntArray
import kotlin.Long
import kotlin.LongArray
import kotlin.String
import kotlinx.telegram.core.TelegramFlow
import kotlinx.telegram.coroutines.addFileToDownloads
import kotlinx.telegram.coroutines.addMessageReaction
import kotlinx.telegram.coroutines.blockMessageSenderFromReplies
import kotlinx.telegram.coroutines.clickAnimatedEmojiMessage
import kotlinx.telegram.coroutines.clickChatSponsoredMessage
import kotlinx.telegram.coroutines.deleteChatReplyMarkup
import kotlinx.telegram.coroutines.editBusinessMessageCaption
import kotlinx.telegram.coroutines.editBusinessMessageLiveLocation
import kotlinx.telegram.coroutines.editBusinessMessageMedia
import kotlinx.telegram.coroutines.editBusinessMessageReplyMarkup
import kotlinx.telegram.coroutines.editBusinessMessageText
import kotlinx.telegram.coroutines.editMessageCaption
import kotlinx.telegram.coroutines.editMessageLiveLocation
import kotlinx.telegram.coroutines.editMessageMedia
import kotlinx.telegram.coroutines.editMessageReplyMarkup
import kotlinx.telegram.coroutines.editMessageSchedulingState
import kotlinx.telegram.coroutines.editMessageText
import kotlinx.telegram.coroutines.editQuickReplyMessage
import kotlinx.telegram.coroutines.getCallbackQueryAnswer
import kotlinx.telegram.coroutines.getCallbackQueryMessage
import kotlinx.telegram.coroutines.getChatMessagePosition
import kotlinx.telegram.coroutines.getGameHighScores
import kotlinx.telegram.coroutines.getLoginUrl
import kotlinx.telegram.coroutines.getLoginUrlInfo
import kotlinx.telegram.coroutines.getMessage
import kotlinx.telegram.coroutines.getMessageAddedReactions
import kotlinx.telegram.coroutines.getMessageAvailableReactions
import kotlinx.telegram.coroutines.getMessageEmbeddingCode
import kotlinx.telegram.coroutines.getMessageLink
import kotlinx.telegram.coroutines.getMessageLocally
import kotlinx.telegram.coroutines.getMessagePublicForwards
import kotlinx.telegram.coroutines.getMessageReadDate
import kotlinx.telegram.coroutines.getMessageStatistics
import kotlinx.telegram.coroutines.getMessageThread
import kotlinx.telegram.coroutines.getMessageThreadHistory
import kotlinx.telegram.coroutines.getMessageViewers
import kotlinx.telegram.coroutines.getPaymentReceipt
import kotlinx.telegram.coroutines.getPollVoters
import kotlinx.telegram.coroutines.getPremiumGiveawayInfo
import kotlinx.telegram.coroutines.getRepliedMessage
import kotlinx.telegram.coroutines.openMessageContent
import kotlinx.telegram.coroutines.pinChatMessage
import kotlinx.telegram.coroutines.rateSpeechRecognition
import kotlinx.telegram.coroutines.recognizeSpeech
import kotlinx.telegram.coroutines.removeMessageReaction
import kotlinx.telegram.coroutines.reportChatSponsoredMessage
import kotlinx.telegram.coroutines.reportMessageReactions
import kotlinx.telegram.coroutines.reportSupergroupAntiSpamFalsePositive
import kotlinx.telegram.coroutines.setGameScore
import kotlinx.telegram.coroutines.setMessageFactCheck
import kotlinx.telegram.coroutines.setMessageReactions
import kotlinx.telegram.coroutines.setPollAnswer
import kotlinx.telegram.coroutines.shareChatWithBot
import kotlinx.telegram.coroutines.shareUsersWithBot
import kotlinx.telegram.coroutines.stopBusinessPoll
import kotlinx.telegram.coroutines.stopPoll
import kotlinx.telegram.coroutines.translateMessageText
import kotlinx.telegram.coroutines.unpinChatMessage
import org.drinkless.tdlib.TdApi
import org.drinkless.tdlib.TdApi.CallbackQueryPayload
import org.drinkless.tdlib.TdApi.FormattedText
import org.drinkless.tdlib.TdApi.InputMessageContent
import org.drinkless.tdlib.TdApi.Location
import org.drinkless.tdlib.TdApi.Message
import org.drinkless.tdlib.TdApi.MessageSchedulingState
import org.drinkless.tdlib.TdApi.MessageSender
import org.drinkless.tdlib.TdApi.ReactionType
import org.drinkless.tdlib.TdApi.ReplyMarkup
import org.drinkless.tdlib.TdApi.SearchMessagesFilter

/**
 * Interface for access [TdApi.Message] extension functions. Can be used alongside with other
 * extension interfaces of the package. Must contain [TelegramFlow] instance field to access its
 * functionality
 */
interface MessageKtx : BaseKtx {
  /**
   * Instance of the [TelegramFlow] connecting extensions to the Telegram Client
   */
  override val api: TelegramFlow

  /**
   * Suspend function, which adds a file from a message to the list of file downloads. Download
   * progress and completion of the download will be notified through updateFile updates. If message
   * database is used, the list of file downloads is persistent across application restarts. The
   * downloading is independent of download using downloadFile, i.e. it continues if downloadFile is
   * canceled or is used to download a part of the file.
   *
   * @param fileId Identifier of the file to download.  
   * @param chatId Chat identifier of the message with the file.  
   * @param priority Priority of the download (1-32). The higher the priority, the earlier the file
   * will be downloaded. If the priorities of two files are equal, then the last one for which
   * downloadFile/addFileToDownloads was called will be downloaded first.
   *
   * @return [TdApi.File] Represents a file.
   */
  suspend fun Message.addFileToDownloads(
    fileId: Int,
    chatId: Long,
    priority: Int
  ) = api.addFileToDownloads(fileId, chatId, this.id, priority)

  /**
   * Suspend function, which adds a reaction or a tag to a message. Use getMessageAvailableReactions
   * to receive the list of available reactions for the message.
   *
   * @param chatId Identifier of the chat to which the message belongs.  
   * @param reactionType Type of the reaction to add.  
   * @param isBig Pass true if the reaction is added with a big animation.  
   * @param updateRecentReactions Pass true if the reaction needs to be added to recent reactions;
   * tags are never added to the list of recent reactions.
   */
  suspend fun Message.addReaction(
    chatId: Long,
    reactionType: ReactionType?,
    isBig: Boolean,
    updateRecentReactions: Boolean
  ) = api.addMessageReaction(chatId, this.id, reactionType, isBig, updateRecentReactions)

  /**
   * Suspend function, which blocks an original sender of a message in the Replies chat.
   *
   * @param deleteMessage Pass true to delete the message.  
   * @param deleteAllMessages Pass true to delete all messages from the same sender.  
   * @param reportSpam Pass true to report the sender to the Telegram moderators.
   */
  suspend fun Message.blockSenderFromReplies(
    deleteMessage: Boolean,
    deleteAllMessages: Boolean,
    reportSpam: Boolean
  ) = api.blockMessageSenderFromReplies(this.id, deleteMessage, deleteAllMessages, reportSpam)

  /**
   * Suspend function, which informs TDLib that a message with an animated emoji was clicked by the
   * user. Returns a big animated sticker to be played or a 404 error if usual animation needs to be
   * played.
   *
   * @param chatId Chat identifier of the message.  
   *
   * @return [TdApi.Sticker] Describes a sticker.
   */
  suspend fun Message.clickAnimatedEmoji(chatId: Long) = api.clickAnimatedEmojiMessage(chatId,
      this.id)

  /**
   * Suspend function, which informs TDLib that the user opened the sponsored chat via the button,
   * the name, the photo, or a mention in the sponsored message.
   *
   * @param chatId Chat identifier of the sponsored message.  
   */
  suspend fun Message.clickChatSponsored(chatId: Long) = api.clickChatSponsoredMessage(chatId,
      this.id)

  /**
   * Suspend function, which deletes the default reply markup from a chat. Must be called after a
   * one-time keyboard or a replyMarkupForceReply reply markup has been used. An updateChatReplyMarkup
   * update will be sent if the reply markup is changed.
   *
   * @param chatId Chat identifier.  
   */
  suspend fun Message.deleteChatReplyMarkup(chatId: Long) = api.deleteChatReplyMarkup(chatId,
      this.id)

  /**
   * Suspend function, which edits the caption of a message sent on behalf of a business account;
   * for bots only.
   *
   * @param businessConnectionId Unique identifier of business connection on behalf of which the
   * message was sent.  
   * @param chatId The chat the message belongs to.  
   * @param replyMarkup The new message reply markup; pass null if none.  
   * @param caption New message content caption; pass null to remove caption;
   * 0-getOption(&quot;message_caption_length_max&quot;) characters.  
   * @param showCaptionAboveMedia Pass true to show the caption above the media; otherwise, caption
   * will be shown below the media. Can be true only for animation, photo, and video messages.
   *
   * @return [TdApi.BusinessMessage] Describes a message from a business account as received by a
   * bot.
   */
  suspend fun Message.editBusinessCaption(
    businessConnectionId: String?,
    chatId: Long,
    replyMarkup: ReplyMarkup?,
    caption: FormattedText?,
    showCaptionAboveMedia: Boolean
  ) = api.editBusinessMessageCaption(businessConnectionId, chatId, this.id, replyMarkup, caption,
      showCaptionAboveMedia)

  /**
   * Suspend function, which edits the content of a live location in a message sent on behalf of a
   * business account; for bots only.
   *
   * @param businessConnectionId Unique identifier of business connection on behalf of which the
   * message was sent.  
   * @param chatId The chat the message belongs to.  
   * @param replyMarkup The new message reply markup; pass null if none.  
   * @param location New location content of the message; pass null to stop sharing the live
   * location.  
   * @param livePeriod New time relative to the message send date, for which the location can be
   * updated, in seconds. If 0x7FFFFFFF specified, then the location can be updated forever. Otherwise,
   * must not exceed the current livePeriod by more than a day, and the live location expiration date
   * must remain in the next 90 days. Pass 0 to keep the current livePeriod.  
   * @param heading The new direction in which the location moves, in degrees; 1-360. Pass 0 if
   * unknown.  
   * @param proximityAlertRadius The new maximum distance for proximity alerts, in meters
   * (0-100000). Pass 0 if the notification is disabled.
   *
   * @return [TdApi.BusinessMessage] Describes a message from a business account as received by a
   * bot.
   */
  suspend fun Message.editBusinessLiveLocation(
    businessConnectionId: String?,
    chatId: Long,
    replyMarkup: ReplyMarkup?,
    location: Location?,
    livePeriod: Int,
    heading: Int,
    proximityAlertRadius: Int
  ) = api.editBusinessMessageLiveLocation(businessConnectionId, chatId, this.id, replyMarkup,
      location, livePeriod, heading, proximityAlertRadius)

  /**
   * Suspend function, which edits the content of a message with an animation, an audio, a document,
   * a photo or a video in a message sent on behalf of a business account; for bots only.
   *
   * @param businessConnectionId Unique identifier of business connection on behalf of which the
   * message was sent.  
   * @param chatId The chat the message belongs to.  
   * @param replyMarkup The new message reply markup; pass null if none; for bots only.  
   * @param inputMessageContent New content of the message. Must be one of the following types:
   * inputMessageAnimation, inputMessageAudio, inputMessageDocument, inputMessagePhoto or
   * inputMessageVideo.
   *
   * @return [TdApi.BusinessMessage] Describes a message from a business account as received by a
   * bot.
   */
  suspend fun Message.editBusinessMedia(
    businessConnectionId: String?,
    chatId: Long,
    replyMarkup: ReplyMarkup?,
    inputMessageContent: InputMessageContent?
  ) = api.editBusinessMessageMedia(businessConnectionId, chatId, this.id, replyMarkup,
      inputMessageContent)

  /**
   * Suspend function, which edits the reply markup of a message sent on behalf of a business
   * account; for bots only.
   *
   * @param businessConnectionId Unique identifier of business connection on behalf of which the
   * message was sent.  
   * @param chatId The chat the message belongs to.  
   * @param replyMarkup The new message reply markup; pass null if none.
   *
   * @return [TdApi.BusinessMessage] Describes a message from a business account as received by a
   * bot.
   */
  suspend fun Message.editBusinessReplyMarkup(
    businessConnectionId: String?,
    chatId: Long,
    replyMarkup: ReplyMarkup?
  ) = api.editBusinessMessageReplyMarkup(businessConnectionId, chatId, this.id, replyMarkup)

  /**
   * Suspend function, which edits the text of a text or game message sent on behalf of a business
   * account; for bots only.
   *
   * @param businessConnectionId Unique identifier of business connection on behalf of which the
   * message was sent.  
   * @param chatId The chat the message belongs to.  
   * @param replyMarkup The new message reply markup; pass null if none.  
   * @param inputMessageContent New text content of the message. Must be of type inputMessageText.
   *
   * @return [TdApi.BusinessMessage] Describes a message from a business account as received by a
   * bot.
   */
  suspend fun Message.editBusinessText(
    businessConnectionId: String?,
    chatId: Long,
    replyMarkup: ReplyMarkup?,
    inputMessageContent: InputMessageContent?
  ) = api.editBusinessMessageText(businessConnectionId, chatId, this.id, replyMarkup,
      inputMessageContent)

  /**
   * Suspend function, which edits the message content caption. Returns the edited message after the
   * edit is completed on the server side. Can be used only if message.canBeEdited == true.
   *
   * @param chatId The chat the message belongs to.  
   * @param replyMarkup The new message reply markup; pass null if none; for bots only.  
   * @param caption New message content caption; 0-getOption(&quot;message_caption_length_max&quot;)
   * characters; pass null to remove caption.  
   * @param showCaptionAboveMedia Pass true to show the caption above the media; otherwise, caption
   * will be shown below the media. Can be true only for animation, photo, and video messages.
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun Message.editCaption(
    chatId: Long,
    replyMarkup: ReplyMarkup?,
    caption: FormattedText?,
    showCaptionAboveMedia: Boolean
  ) = api.editMessageCaption(chatId, this.id, replyMarkup, caption, showCaptionAboveMedia)

  /**
   * Suspend function, which edits the message content of a live location. Messages can be edited
   * for a limited period of time specified in the live location. Returns the edited message after the
   * edit is completed on the server side. Can be used only if message.canBeEdited == true.
   *
   * @param chatId The chat the message belongs to.  
   * @param replyMarkup The new message reply markup; pass null if none; for bots only.  
   * @param location New location content of the message; pass null to stop sharing the live
   * location.  
   * @param livePeriod New time relative to the message send date, for which the location can be
   * updated, in seconds. If 0x7FFFFFFF specified, then the location can be updated forever. Otherwise,
   * must not exceed the current livePeriod by more than a day, and the live location expiration date
   * must remain in the next 90 days. Pass 0 to keep the current livePeriod.  
   * @param heading The new direction in which the location moves, in degrees; 1-360. Pass 0 if
   * unknown.  
   * @param proximityAlertRadius The new maximum distance for proximity alerts, in meters
   * (0-100000). Pass 0 if the notification is disabled.
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun Message.editLiveLocation(
    chatId: Long,
    replyMarkup: ReplyMarkup?,
    location: Location?,
    livePeriod: Int,
    heading: Int,
    proximityAlertRadius: Int
  ) = api.editMessageLiveLocation(chatId, this.id, replyMarkup, location, livePeriod, heading,
      proximityAlertRadius)

  /**
   * Suspend function, which edits the content of a message with an animation, an audio, a document,
   * a photo or a video, including message caption. If only the caption needs to be edited, use
   * editMessageCaption instead. The media can't be edited if the message was set to self-destruct or
   * to a self-destructing media. The type of message content in an album can't be changed with
   * exception of replacing a photo with a video or vice versa. Returns the edited message after the
   * edit is completed on the server side. Can be used only if message.canBeEdited == true.
   *
   * @param chatId The chat the message belongs to.  
   * @param replyMarkup The new message reply markup; pass null if none; for bots only.  
   * @param inputMessageContent New content of the message. Must be one of the following types:
   * inputMessageAnimation, inputMessageAudio, inputMessageDocument, inputMessagePhoto or
   * inputMessageVideo.
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun Message.editMedia(
    chatId: Long,
    replyMarkup: ReplyMarkup?,
    inputMessageContent: InputMessageContent?
  ) = api.editMessageMedia(chatId, this.id, replyMarkup, inputMessageContent)

  /**
   * Suspend function, which edits the message reply markup; for bots only. Returns the edited
   * message after the edit is completed on the server side. Can be used only if message.canBeEdited ==
   * true.
   *
   * @param chatId The chat the message belongs to.  
   * @param replyMarkup The new message reply markup; pass null if none.
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun Message.editReplyMarkup(chatId: Long, replyMarkup: ReplyMarkup?) =
      api.editMessageReplyMarkup(chatId, this.id, replyMarkup)

  /**
   * Suspend function, which edits the time when a scheduled message will be sent. Scheduling state
   * of all messages in the same album or forwarded together with the message will be also changed.
   *
   * @param chatId The chat the message belongs to.  
   * @param schedulingState The new message scheduling state; pass null to send the message
   * immediately.
   */
  suspend fun Message.editSchedulingState(chatId: Long, schedulingState: MessageSchedulingState?) =
      api.editMessageSchedulingState(chatId, this.id, schedulingState)

  /**
   * Suspend function, which edits the text of a message (or a text of a game message). Returns the
   * edited message after the edit is completed on the server side. Can be used only if
   * message.canBeEdited == true.
   *
   * @param chatId The chat the message belongs to.  
   * @param replyMarkup The new message reply markup; pass null if none; for bots only.  
   * @param inputMessageContent New text content of the message. Must be of type inputMessageText.
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun Message.editText(
    chatId: Long,
    replyMarkup: ReplyMarkup?,
    inputMessageContent: InputMessageContent?
  ) = api.editMessageText(chatId, this.id, replyMarkup, inputMessageContent)

  /**
   * Suspend function, which asynchronously edits the text, media or caption of a quick reply
   * message. Use quickReplyMessage.canBeEdited to check whether a message can be edited. Text message
   * can be edited only to a text message. The type of message content in an album can't be changed
   * with exception of replacing a photo with a video or vice versa.
   *
   * @param shortcutId Unique identifier of the quick reply shortcut with the message.  
   * @param inputMessageContent New content of the message. Must be one of the following types:
   * inputMessageText, inputMessageAnimation, inputMessageAudio, inputMessageDocument,
   * inputMessagePhoto or inputMessageVideo.
   */
  suspend fun Message.editQuickReply(shortcutId: Int, inputMessageContent: InputMessageContent?) =
      api.editQuickReplyMessage(shortcutId, this.id, inputMessageContent)

  /**
   * Suspend function, which sends a callback query to a bot and returns an answer. Returns an error
   * with code 502 if the bot fails to answer the query before the query timeout expires.
   *
   * @param chatId Identifier of the chat with the message.  
   * @param payload Query payload.
   *
   * @return [TdApi.CallbackQueryAnswer] Contains a bot's answer to a callback query.
   */
  suspend fun Message.getCallbackQueryAnswer(chatId: Long, payload: CallbackQueryPayload?) =
      api.getCallbackQueryAnswer(chatId, this.id, payload)

  /**
   * Suspend function, which returns information about a message with the callback button that
   * originated a callback query; for bots only.
   *
   * @param chatId Identifier of the chat the message belongs to.  
   * @param callbackQueryId Identifier of the callback query.
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun Message.getCallbackQuery(chatId: Long, callbackQueryId: Long) =
      api.getCallbackQueryMessage(chatId, this.id, callbackQueryId)

  /**
   * Suspend function, which returns approximate 1-based position of a message among messages, which
   * can be found by the specified filter in the chat. Cannot be used in secret chats.
   *
   * @param chatId Identifier of the chat in which to find message position.  
   * @param filter Filter for message content; searchMessagesFilterEmpty,
   * searchMessagesFilterUnreadMention, searchMessagesFilterUnreadReaction, and
   * searchMessagesFilterFailedToSend are unsupported in this function.  
   * @param messageThreadId If not 0, only messages in the specified thread will be considered;
   * supergroups only.  
   * @param savedMessagesTopicId If not 0, only messages in the specified Saved Messages topic will
   * be considered; pass 0 to consider all relevant messages, or for chats other than Saved Messages.
   *
   * @return [TdApi.Count] Contains a counter.
   */
  suspend fun Message.getChatPosition(
    chatId: Long,
    filter: SearchMessagesFilter?,
    messageThreadId: Long,
    savedMessagesTopicId: Long
  ) = api.getChatMessagePosition(chatId, this.id, filter, messageThreadId, savedMessagesTopicId)

  /**
   * Suspend function, which returns the high scores for a game and some part of the high score
   * table in the range of the specified user; for bots only.
   *
   * @param chatId The chat that contains the message with the game.  
   * @param userId User identifier.
   *
   * @return [TdApi.GameHighScores] Contains a list of game high scores.
   */
  suspend fun Message.getGameHighScores(chatId: Long, userId: Long) = api.getGameHighScores(chatId,
      this.id, userId)

  /**
   * Suspend function, which returns an HTTP URL which can be used to automatically authorize the
   * user on a website after clicking an inline button of type inlineKeyboardButtonTypeLoginUrl. Use
   * the method getLoginUrlInfo to find whether a prior user confirmation is needed. If an error is
   * returned, then the button must be handled as an ordinary URL button.
   *
   * @param chatId Chat identifier of the message with the button.  
   * @param buttonId Button identifier.  
   * @param allowWriteAccess Pass true to allow the bot to send messages to the current user.
   *
   * @return [TdApi.HttpUrl] Contains an HTTP URL.
   */
  suspend fun Message.getLoginUrl(
    chatId: Long,
    buttonId: Long,
    allowWriteAccess: Boolean
  ) = api.getLoginUrl(chatId, this.id, buttonId, allowWriteAccess)

  /**
   * Suspend function, which returns information about a button of type
   * inlineKeyboardButtonTypeLoginUrl. The method needs to be called when the user presses the button.
   *
   * @param chatId Chat identifier of the message with the button.  
   * @param buttonId Button identifier.
   *
   * @return [TdApi.LoginUrlInfo] This class is an abstract base class.
   */
  suspend fun Message.getLoginUrlInfo(chatId: Long, buttonId: Long) = api.getLoginUrlInfo(chatId,
      this.id, buttonId)

  /**
   * Suspend function, which returns information about a message.
   *
   * @param chatId Identifier of the chat the message belongs to.  
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun Message.get(chatId: Long) = api.getMessage(chatId, this.id)

  /**
   * Suspend function, which returns reactions added for a message, along with their sender.
   *
   * @param chatId Identifier of the chat to which the message belongs.  
   * @param reactionType Type of the reactions to return; pass null to return all added reactions.  
   * @param offset Offset of the first entry to return as received from the previous request; use
   * empty string to get the first chunk of results.  
   * @param limit The maximum number of reactions to be returned; must be positive and can't be
   * greater than 100.
   *
   * @return [TdApi.AddedReactions] Represents a list of reactions added to a message.
   */
  suspend fun Message.getAddedReactions(
    chatId: Long,
    reactionType: ReactionType?,
    offset: String?,
    limit: Int
  ) = api.getMessageAddedReactions(chatId, this.id, reactionType, offset, limit)

  /**
   * Suspend function, which returns reactions, which can be added to a message. The list can change
   * after updateActiveEmojiReactions, updateChatAvailableReactions for the chat, or
   * updateMessageInteractionInfo for the message.
   *
   * @param chatId Identifier of the chat to which the message belongs.  
   * @param rowSize Number of reaction per row, 5-25.
   *
   * @return [TdApi.AvailableReactions] Represents a list of reactions that can be added to a
   * message.
   */
  suspend fun Message.getAvailableReactions(chatId: Long, rowSize: Int) =
      api.getMessageAvailableReactions(chatId, this.id, rowSize)

  /**
   * Suspend function, which returns an HTML code for embedding the message. Available only for
   * messages in supergroups and channels with a username.
   *
   * @param chatId Identifier of the chat to which the message belongs.  
   * @param forAlbum Pass true to return an HTML code for embedding of the whole media album.
   *
   * @return [TdApi.Text] Contains some text.
   */
  suspend fun Message.getEmbeddingCode(chatId: Long, forAlbum: Boolean) =
      api.getMessageEmbeddingCode(chatId, this.id, forAlbum)

  /**
   * Suspend function, which returns an HTTPS link to a message in a chat. Available only for
   * already sent messages in supergroups and channels, or if message.canGetMediaTimestampLinks and a
   * media timestamp link is generated. This is an offline request.
   *
   * @param chatId Identifier of the chat to which the message belongs.  
   * @param mediaTimestamp If not 0, timestamp from which the video/audio/video note/voice
   * note/story playing must start, in seconds. The media can be in the message content or in its web
   * page preview.  
   * @param forAlbum Pass true to create a link for the whole media album.  
   * @param inMessageThread Pass true to create a link to the message as a channel post comment, in
   * a message thread, or a forum topic.
   *
   * @return [TdApi.MessageLink] Contains an HTTPS link to a message in a supergroup or channel, or
   * a forum topic.
   */
  suspend fun Message.getLink(
    chatId: Long,
    mediaTimestamp: Int,
    forAlbum: Boolean,
    inMessageThread: Boolean
  ) = api.getMessageLink(chatId, this.id, mediaTimestamp, forAlbum, inMessageThread)

  /**
   * Suspend function, which returns information about a message, if it is available without sending
   * network request. This is an offline request.
   *
   * @param chatId Identifier of the chat the message belongs to.  
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun Message.getLocally(chatId: Long) = api.getMessageLocally(chatId, this.id)

  /**
   * Suspend function, which returns forwarded copies of a channel message to different public
   * channels and public reposts as a story. Can be used only if message.canGetStatistics == true. For
   * optimal performance, the number of returned messages and stories is chosen by TDLib.
   *
   * @param chatId Chat identifier of the message.  
   * @param offset Offset of the first entry to return as received from the previous request; use
   * empty string to get the first chunk of results.  
   * @param limit The maximum number of messages and stories to be returned; must be positive and
   * can't be greater than 100. For optimal performance, the number of returned objects is chosen by
   * TDLib and can be smaller than the specified limit.
   *
   * @return [TdApi.PublicForwards] Represents a list of public forwards and reposts as a story of a
   * message or a story.
   */
  suspend fun Message.getPublicForwards(
    chatId: Long,
    offset: String?,
    limit: Int
  ) = api.getMessagePublicForwards(chatId, this.id, offset, limit)

  /**
   * Suspend function, which returns read date of a recent outgoing message in a private chat. The
   * method can be called if message.canGetReadDate == true and the message is read.
   *
   * @param chatId Chat identifier.  
   *
   * @return [TdApi.MessageReadDate] This class is an abstract base class.
   */
  suspend fun Message.getReadDate(chatId: Long) = api.getMessageReadDate(chatId, this.id)

  /**
   * Suspend function, which returns detailed statistics about a message. Can be used only if
   * message.canGetStatistics == true.
   *
   * @param chatId Chat identifier.  
   * @param isDark Pass true if a dark theme is used by the application.
   *
   * @return [TdApi.MessageStatistics] A detailed statistics about a message.
   */
  suspend fun Message.getStatistics(chatId: Long, isDark: Boolean) =
      api.getMessageStatistics(chatId, this.id, isDark)

  /**
   * Suspend function, which returns information about a message thread. Can be used only if
   * message.canGetMessageThread == true.
   *
   * @param chatId Chat identifier.  
   *
   * @return [TdApi.MessageThreadInfo] Contains information about a message thread.
   */
  suspend fun Message.getThread(chatId: Long) = api.getMessageThread(chatId, this.id)

  /**
   * Suspend function, which returns messages in a message thread of a message. Can be used only if
   * message.canGetMessageThread == true. Message thread of a channel message is in the channel's
   * linked supergroup. The messages are returned in a reverse chronological order (i.e., in order of
   * decreasing messageId). For optimal performance, the number of returned messages is chosen by
   * TDLib.
   *
   * @param chatId Chat identifier.  
   * @param fromMessageId Identifier of the message starting from which history must be fetched; use
   * 0 to get results from the last message.  
   * @param offset Specify 0 to get results from exactly the message fromMessageId or a negative
   * offset up to 99 to get additionally some newer messages.  
   * @param limit The maximum number of messages to be returned; must be positive and can't be
   * greater than 100. If the offset is negative, the limit must be greater than or equal to -offset.
   * For optimal performance, the number of returned messages is chosen by TDLib and can be smaller
   * than the specified limit.
   *
   * @return [TdApi.Messages] Contains a list of messages.
   */
  suspend fun Message.getThreadHistory(
    chatId: Long,
    fromMessageId: Long,
    offset: Int,
    limit: Int
  ) = api.getMessageThreadHistory(chatId, this.id, fromMessageId, offset, limit)

  /**
   * Suspend function, which returns viewers of a recent outgoing message in a basic group or a
   * supergroup chat. For video notes and voice notes only users, opened content of the message, are
   * returned. The method can be called if message.canGetViewers == true.
   *
   * @param chatId Chat identifier.  
   *
   * @return [TdApi.MessageViewers] Represents a list of message viewers.
   */
  suspend fun Message.getViewers(chatId: Long) = api.getMessageViewers(chatId, this.id)

  /**
   * Suspend function, which returns information about a successful payment.
   *
   * @param chatId Chat identifier of the messagePaymentSuccessful message.  
   *
   * @return [TdApi.PaymentReceipt] Contains information about a successful payment.
   */
  suspend fun Message.getPaymentReceipt(chatId: Long) = api.getPaymentReceipt(chatId, this.id)

  /**
   * Suspend function, which returns message senders voted for the specified option in a
   * non-anonymous polls. For optimal performance, the number of returned users is chosen by TDLib.
   *
   * @param chatId Identifier of the chat to which the poll belongs.  
   * @param optionId 0-based identifier of the answer option.  
   * @param offset Number of voters to skip in the result; must be non-negative.  
   * @param limit The maximum number of voters to be returned; must be positive and can't be greater
   * than 50. For optimal performance, the number of returned voters is chosen by TDLib and can be
   * smaller than the specified limit, even if the end of the voter list has not been reached.
   *
   * @return [TdApi.MessageSenders] Represents a list of message senders.
   */
  suspend fun Message.getPollVoters(
    chatId: Long,
    optionId: Int,
    offset: Int,
    limit: Int
  ) = api.getPollVoters(chatId, this.id, optionId, offset, limit)

  /**
   * Suspend function, which returns information about a Telegram Premium giveaway.
   *
   * @param chatId Identifier of the channel chat which started the giveaway.  
   *
   * @return [TdApi.PremiumGiveawayInfo] This class is an abstract base class.
   */
  suspend fun Message.getPremiumGiveawayInfo(chatId: Long) = api.getPremiumGiveawayInfo(chatId,
      this.id)

  /**
   * Suspend function, which returns information about a non-bundled message that is replied by a
   * given message. Also, returns the pinned message, the game message, the invoice message, the
   * message with a previously set same background, the giveaway message, and the topic creation
   * message for messages of the types messagePinMessage, messageGameScore, messagePaymentSuccessful,
   * messageChatSetBackground, messagePremiumGiveawayCompleted and topic messages without non-bundled
   * replied message respectively.
   *
   * @param chatId Identifier of the chat the message belongs to.  
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun Message.getReplied(chatId: Long) = api.getRepliedMessage(chatId, this.id)

  /**
   * Suspend function, which informs TDLib that the message content has been opened (e.g., the user
   * has opened a photo, video, document, location or venue, or has listened to an audio file or voice
   * note message). An updateMessageContentOpened update will be generated if something has changed.
   *
   * @param chatId Chat identifier of the message.  
   */
  suspend fun Message.openContent(chatId: Long) = api.openMessageContent(chatId, this.id)

  /**
   * Suspend function, which pins a message in a chat; requires canPinMessages member right if the
   * chat is a basic group or supergroup, or canEditMessages administrator right if the chat is a
   * channel.
   *
   * @param chatId Identifier of the chat.  
   * @param disableNotification Pass true to disable notification about the pinned message.
   * Notifications are always disabled in channels and private chats.  
   * @param onlyForSelf Pass true to pin the message only for self; private chats only.
   */
  suspend fun Message.pinChat(
    chatId: Long,
    disableNotification: Boolean,
    onlyForSelf: Boolean
  ) = api.pinChatMessage(chatId, this.id, disableNotification, onlyForSelf)

  /**
   * Suspend function, which rates recognized speech in a video note or a voice note message.
   *
   * @param chatId Identifier of the chat to which the message belongs.  
   * @param isGood Pass true if the speech recognition is good.
   */
  suspend fun Message.rateSpeechRecognition(chatId: Long, isGood: Boolean) =
      api.rateSpeechRecognition(chatId, this.id, isGood)

  /**
   * Suspend function, which recognizes speech in a video note or a voice note message. The message
   * must be successfully sent, must not be scheduled, and must be from a non-secret chat.
   *
   * @param chatId Identifier of the chat to which the message belongs.  
   */
  suspend fun Message.recognizeSpeech(chatId: Long) = api.recognizeSpeech(chatId, this.id)

  /**
   * Suspend function, which removes a reaction from a message. A chosen reaction can always be
   * removed.
   *
   * @param chatId Identifier of the chat to which the message belongs.  
   * @param reactionType Type of the reaction to remove.
   */
  suspend fun Message.removeReaction(chatId: Long, reactionType: ReactionType?) =
      api.removeMessageReaction(chatId, this.id, reactionType)

  /**
   * Suspend function, which reports a sponsored message to Telegram moderators.
   *
   * @param chatId Chat identifier of the sponsored message.  
   * @param optionId Option identifier chosen by the user; leave empty for the initial request.
   *
   * @return [TdApi.ReportChatSponsoredMessageResult] This class is an abstract base class.
   */
  suspend fun Message.reportChatSponsored(chatId: Long, optionId: ByteArray?) =
      api.reportChatSponsoredMessage(chatId, this.id, optionId)

  /**
   * Suspend function, which reports reactions set on a message to the Telegram moderators.
   * Reactions on a message can be reported only if message.canReportReactions.
   *
   * @param chatId Chat identifier.  
   * @param senderId Identifier of the sender, which added the reaction.
   */
  suspend fun Message.reportReactions(chatId: Long, senderId: MessageSender?) =
      api.reportMessageReactions(chatId, this.id, senderId)

  /**
   * Suspend function, which reports a false deletion of a message by aggressive anti-spam checks;
   * requires administrator rights in the supergroup. Can be called only for messages from
   * chatEventMessageDeleted with canReportAntiSpamFalsePositive == true.
   *
   * @param supergroupId Supergroup identifier.  
   */
  suspend fun Message.reportSupergroupAntiSpamFalsePositive(supergroupId: Long) =
      api.reportSupergroupAntiSpamFalsePositive(supergroupId, this.id)

  /**
   * Suspend function, which updates the game score of the specified user in the game; for bots
   * only.
   *
   * @param chatId The chat to which the message with the game belongs.  
   * @param editMessage Pass true to edit the game message to include the current scoreboard.  
   * @param userId User identifier.  
   * @param score The new score.  
   * @param force Pass true to update the score even if it decreases. If the score is 0, the user
   * will be deleted from the high score table.
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun Message.setGameScore(
    chatId: Long,
    editMessage: Boolean,
    userId: Long,
    score: Int,
    force: Boolean
  ) = api.setGameScore(chatId, this.id, editMessage, userId, score, force)

  /**
   * Suspend function, which changes the fact-check of a message. Can be only used if
   * getOption(&quot;can_edit_fact_check&quot;) == true.
   *
   * @param chatId The channel chat the message belongs to.  
   * @param text New text of the fact-check; 0-getOption(&quot;fact_check_length_max&quot;)
   * characters; pass null to remove it. Only Bold, Italic, and TextUrl entities with https://t.me/
   * links are supported.
   */
  suspend fun Message.setFactCheck(chatId: Long, text: FormattedText?) =
      api.setMessageFactCheck(chatId, this.id, text)

  /**
   * Suspend function, which sets reactions on a message; for bots only.
   *
   * @param chatId Identifier of the chat to which the message belongs.  
   * @param reactionTypes Types of the reaction to set.  
   * @param isBig Pass true if the reactions are added with a big animation.
   */
  suspend fun Message.setReactions(
    chatId: Long,
    reactionTypes: Array<ReactionType>?,
    isBig: Boolean
  ) = api.setMessageReactions(chatId, this.id, reactionTypes, isBig)

  /**
   * Suspend function, which changes the user answer to a poll. A poll in quiz mode can be answered
   * only once.
   *
   * @param chatId Identifier of the chat to which the poll belongs.  
   * @param optionIds 0-based identifiers of answer options, chosen by the user. User can choose
   * more than 1 answer option only is the poll allows multiple answers.
   */
  suspend fun Message.setPollAnswer(chatId: Long, optionIds: IntArray?) = api.setPollAnswer(chatId,
      this.id, optionIds)

  /**
   * Suspend function, which shares a chat after pressing a keyboardButtonTypeRequestChat button
   * with the bot.
   *
   * @param chatId Identifier of the chat with the bot.  
   * @param buttonId Identifier of the button.  
   * @param sharedChatId Identifier of the shared chat.  
   * @param onlyCheck Pass true to check that the chat can be shared by the button instead of
   * actually sharing it. Doesn't check botIsMember and botAdministratorRights restrictions. If the bot
   * must be a member, then all chats from getGroupsInCommon and all chats, where the user can add the
   * bot, are suitable. In the latter case the bot will be automatically added to the chat. If the bot
   * must be an administrator, then all chats, where the bot already has requested rights or can be
   * added to administrators by the user, are suitable. In the latter case the bot will be
   * automatically granted requested rights.
   */
  suspend fun Message.shareChatWithBot(
    chatId: Long,
    buttonId: Int,
    sharedChatId: Long,
    onlyCheck: Boolean
  ) = api.shareChatWithBot(chatId, this.id, buttonId, sharedChatId, onlyCheck)

  /**
   * Suspend function, which shares users after pressing a keyboardButtonTypeRequestUsers button
   * with the bot.
   *
   * @param chatId Identifier of the chat with the bot.  
   * @param buttonId Identifier of the button.  
   * @param sharedUserIds Identifiers of the shared users.  
   * @param onlyCheck Pass true to check that the users can be shared by the button instead of
   * actually sharing them.
   */
  suspend fun Message.shareUsersWithBot(
    chatId: Long,
    buttonId: Int,
    sharedUserIds: LongArray?,
    onlyCheck: Boolean
  ) = api.shareUsersWithBot(chatId, this.id, buttonId, sharedUserIds, onlyCheck)

  /**
   * Suspend function, which stops a poll sent on behalf of a business account; for bots only.
   *
   * @param businessConnectionId Unique identifier of business connection on behalf of which the
   * message with the poll was sent.  
   * @param chatId The chat the message belongs to.  
   * @param replyMarkup The new message reply markup; pass null if none.
   *
   * @return [TdApi.BusinessMessage] Describes a message from a business account as received by a
   * bot.
   */
  suspend fun Message.stopBusinessPoll(
    businessConnectionId: String?,
    chatId: Long,
    replyMarkup: ReplyMarkup?
  ) = api.stopBusinessPoll(businessConnectionId, chatId, this.id, replyMarkup)

  /**
   * Suspend function, which stops a poll. A poll in a message can be stopped when the message has
   * canBeEdited flag is set.
   *
   * @param chatId Identifier of the chat to which the poll belongs.  
   * @param replyMarkup The new message reply markup; pass null if none; for bots only.
   */
  suspend fun Message.stopPoll(chatId: Long, replyMarkup: ReplyMarkup?) = api.stopPoll(chatId,
      this.id, replyMarkup)

  /**
   * Suspend function, which extracts text or caption of the given message and translates it to the
   * given language. If the current user is a Telegram Premium user, then text formatting is preserved.
   *
   * @param chatId Identifier of the chat to which the message belongs.  
   * @param toLanguageCode Language code of the language to which the message is translated. Must be
   * one of &quot;af&quot;, &quot;sq&quot;, &quot;am&quot;, &quot;ar&quot;, &quot;hy&quot;,
   * &quot;az&quot;, &quot;eu&quot;, &quot;be&quot;, &quot;bn&quot;, &quot;bs&quot;, &quot;bg&quot;,
   * &quot;ca&quot;, &quot;ceb&quot;, &quot;zh-CN&quot;, &quot;zh&quot;, &quot;zh-Hans&quot;,
   * &quot;zh-TW&quot;, &quot;zh-Hant&quot;, &quot;co&quot;, &quot;hr&quot;, &quot;cs&quot;,
   * &quot;da&quot;, &quot;nl&quot;, &quot;en&quot;, &quot;eo&quot;, &quot;et&quot;, &quot;fi&quot;,
   * &quot;fr&quot;, &quot;fy&quot;, &quot;gl&quot;, &quot;ka&quot;, &quot;de&quot;, &quot;el&quot;,
   * &quot;gu&quot;, &quot;ht&quot;, &quot;ha&quot;, &quot;haw&quot;, &quot;he&quot;, &quot;iw&quot;,
   * &quot;hi&quot;, &quot;hmn&quot;, &quot;hu&quot;, &quot;is&quot;, &quot;ig&quot;, &quot;id&quot;,
   * &quot;in&quot;, &quot;ga&quot;, &quot;it&quot;, &quot;ja&quot;, &quot;jv&quot;, &quot;kn&quot;,
   * &quot;kk&quot;, &quot;km&quot;, &quot;rw&quot;, &quot;ko&quot;, &quot;ku&quot;, &quot;ky&quot;,
   * &quot;lo&quot;, &quot;la&quot;, &quot;lv&quot;, &quot;lt&quot;, &quot;lb&quot;, &quot;mk&quot;,
   * &quot;mg&quot;, &quot;ms&quot;, &quot;ml&quot;, &quot;mt&quot;, &quot;mi&quot;, &quot;mr&quot;,
   * &quot;mn&quot;, &quot;my&quot;, &quot;ne&quot;, &quot;no&quot;, &quot;ny&quot;, &quot;or&quot;,
   * &quot;ps&quot;, &quot;fa&quot;, &quot;pl&quot;, &quot;pt&quot;, &quot;pa&quot;, &quot;ro&quot;,
   * &quot;ru&quot;, &quot;sm&quot;, &quot;gd&quot;, &quot;sr&quot;, &quot;st&quot;, &quot;sn&quot;,
   * &quot;sd&quot;, &quot;si&quot;, &quot;sk&quot;, &quot;sl&quot;, &quot;so&quot;, &quot;es&quot;,
   * &quot;su&quot;, &quot;sw&quot;, &quot;sv&quot;, &quot;tl&quot;, &quot;tg&quot;, &quot;ta&quot;,
   * &quot;tt&quot;, &quot;te&quot;, &quot;th&quot;, &quot;tr&quot;, &quot;tk&quot;, &quot;uk&quot;,
   * &quot;ur&quot;, &quot;ug&quot;, &quot;uz&quot;, &quot;vi&quot;, &quot;cy&quot;, &quot;xh&quot;,
   * &quot;yi&quot;, &quot;ji&quot;, &quot;yo&quot;, &quot;zu&quot;.
   *
   * @return [TdApi.FormattedText] A text with some entities.
   */
  suspend fun Message.translateText(chatId: Long, toLanguageCode: String?) =
      api.translateMessageText(chatId, this.id, toLanguageCode)

  /**
   * Suspend function, which removes a pinned message from a chat; requires canPinMessages member
   * right if the chat is a basic group or supergroup, or canEditMessages administrator right if the
   * chat is a channel.
   *
   * @param chatId Identifier of the chat.  
   */
  suspend fun Message.unpinChat(chatId: Long) = api.unpinChatMessage(chatId, this.id)
}
