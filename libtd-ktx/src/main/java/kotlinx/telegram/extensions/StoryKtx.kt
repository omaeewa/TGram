//
// NOTE: THIS FILE IS AUTO-GENERATED by the "ExtensionsGenerator".kt
// See: https://github.com/tdlibx/td-ktx-generator/
//
package kotlinx.telegram.extensions

import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlinx.telegram.core.TelegramFlow
import kotlinx.telegram.coroutines.closeStory
import kotlinx.telegram.coroutines.deleteStory
import kotlinx.telegram.coroutines.editStory
import kotlinx.telegram.coroutines.getChatStoryInteractions
import kotlinx.telegram.coroutines.getStory
import kotlinx.telegram.coroutines.getStoryInteractions
import kotlinx.telegram.coroutines.getStoryPublicForwards
import kotlinx.telegram.coroutines.getStoryStatistics
import kotlinx.telegram.coroutines.openStory
import kotlinx.telegram.coroutines.reportStory
import kotlinx.telegram.coroutines.setStoryPrivacySettings
import kotlinx.telegram.coroutines.setStoryReaction
import kotlinx.telegram.coroutines.toggleStoryIsPostedToChatPage
import org.drinkless.tdlib.TdApi
import org.drinkless.tdlib.TdApi.FormattedText
import org.drinkless.tdlib.TdApi.InputStoryAreas
import org.drinkless.tdlib.TdApi.InputStoryContent
import org.drinkless.tdlib.TdApi.ReactionType
import org.drinkless.tdlib.TdApi.ReportReason
import org.drinkless.tdlib.TdApi.Story
import org.drinkless.tdlib.TdApi.StoryPrivacySettings

/**
 * Interface for access [TdApi.Story] extension functions. Can be used alongside with other
 * extension interfaces of the package. Must contain [TelegramFlow] instance field to access its
 * functionality
 */
interface StoryKtx : BaseKtx {
  /**
   * Instance of the [TelegramFlow] connecting extensions to the Telegram Client
   */
  override val api: TelegramFlow

  /**
   * Suspend function, which informs TDLib that a story is closed by the user.
   *
   * @param storySenderChatId The identifier of the sender of the story to close.  
   */
  suspend fun Story.close(storySenderChatId: Long) = api.closeStory(storySenderChatId, this.id)

  /**
   * Suspend function, which deletes a previously sent story. Can be called only if
   * story.canBeDeleted == true.
   *
   * @param storySenderChatId Identifier of the chat that posted the story.  
   */
  suspend fun Story.delete(storySenderChatId: Long) = api.deleteStory(storySenderChatId, this.id)

  /**
   * Suspend function, which changes content and caption of a story. Can be called only if
   * story.canBeEdited == true.
   *
   * @param storySenderChatId Identifier of the chat that posted the story.  
   * @param content New content of the story; pass null to keep the current content.  
   * @param areas New clickable rectangle areas to be shown on the story media; pass null to keep
   * the current areas. Areas can't be edited if story content isn't changed.  
   * @param caption New story caption; pass null to keep the current caption.
   */
  suspend fun Story.edit(
    storySenderChatId: Long,
    content: InputStoryContent?,
    areas: InputStoryAreas?,
    caption: FormattedText?
  ) = api.editStory(storySenderChatId, this.id, content, areas, caption)

  /**
   * Suspend function, which returns interactions with a story posted in a chat. Can be used only if
   * story is posted on behalf of a chat and the user is an administrator in the chat.
   *
   * @param storySenderChatId The identifier of the sender of the story.  
   * @param reactionType Pass the default heart reaction or a suggested reaction type to receive
   * only interactions with the specified reaction type; pass null to receive all interactions.  
   * @param preferForwards Pass true to get forwards and reposts first, then reactions, then other
   * views; pass false to get interactions sorted just by interaction date.  
   * @param offset Offset of the first entry to return as received from the previous request; use
   * empty string to get the first chunk of results.  
   * @param limit The maximum number of story interactions to return.
   *
   * @return [TdApi.StoryInteractions] Represents a list of interactions with a story.
   */
  suspend fun Story.getChatInteractions(
    storySenderChatId: Long,
    reactionType: ReactionType?,
    preferForwards: Boolean,
    offset: String?,
    limit: Int
  ) = api.getChatStoryInteractions(storySenderChatId, this.id, reactionType, preferForwards, offset,
      limit)

  /**
   * Suspend function, which returns a story.
   *
   * @param storySenderChatId Identifier of the chat that posted the story.  
   * @param onlyLocal Pass true to get only locally available information without sending network
   * requests.
   *
   * @return [TdApi.Story] Represents a story.
   */
  suspend fun Story.get(storySenderChatId: Long, onlyLocal: Boolean) =
      api.getStory(storySenderChatId, this.id, onlyLocal)

  /**
   * Suspend function, which returns interactions with a story. The method can be called only for
   * stories posted on behalf of the current user.
   *
   * @param query Query to search for in names, usernames and titles; may be empty to get all
   * relevant interactions.  
   * @param onlyContacts Pass true to get only interactions by contacts; pass false to get all
   * relevant interactions.  
   * @param preferForwards Pass true to get forwards and reposts first, then reactions, then other
   * views; pass false to get interactions sorted just by interaction date.  
   * @param preferWithReaction Pass true to get interactions with reaction first; pass false to get
   * interactions sorted just by interaction date. Ignored if preferForwards == true.  
   * @param offset Offset of the first entry to return as received from the previous request; use
   * empty string to get the first chunk of results.  
   * @param limit The maximum number of story interactions to return.
   *
   * @return [TdApi.StoryInteractions] Represents a list of interactions with a story.
   */
  suspend fun Story.getInteractions(
    query: String?,
    onlyContacts: Boolean,
    preferForwards: Boolean,
    preferWithReaction: Boolean,
    offset: String?,
    limit: Int
  ) = api.getStoryInteractions(this.id, query, onlyContacts, preferForwards, preferWithReaction,
      offset, limit)

  /**
   * Suspend function, which returns forwards of a story as a message to public chats and reposts by
   * public channels. Can be used only if the story is posted on behalf of the current user or
   * story.canGetStatistics == true. For optimal performance, the number of returned messages and
   * stories is chosen by TDLib.
   *
   * @param storySenderChatId The identifier of the sender of the story.  
   * @param offset Offset of the first entry to return as received from the previous request; use
   * empty string to get the first chunk of results.  
   * @param limit The maximum number of messages and stories to be returned; must be positive and
   * can't be greater than 100. For optimal performance, the number of returned objects is chosen by
   * TDLib and can be smaller than the specified limit.
   *
   * @return [TdApi.PublicForwards] Represents a list of public forwards and reposts as a story of a
   * message or a story.
   */
  suspend fun Story.getPublicForwards(
    storySenderChatId: Long,
    offset: String?,
    limit: Int
  ) = api.getStoryPublicForwards(storySenderChatId, this.id, offset, limit)

  /**
   * Suspend function, which returns detailed statistics about a story. Can be used only if
   * story.canGetStatistics == true.
   *
   * @param chatId Chat identifier.  
   * @param isDark Pass true if a dark theme is used by the application.
   *
   * @return [TdApi.StoryStatistics] A detailed statistics about a story.
   */
  suspend fun Story.getStatistics(chatId: Long, isDark: Boolean) = api.getStoryStatistics(chatId,
      this.id, isDark)

  /**
   * Suspend function, which informs TDLib that a story is opened and is being viewed by the user.
   *
   * @param storySenderChatId The identifier of the sender of the opened story.  
   */
  suspend fun Story.open(storySenderChatId: Long) = api.openStory(storySenderChatId, this.id)

  /**
   * Suspend function, which reports a story to the Telegram moderators.
   *
   * @param storySenderChatId The identifier of the sender of the story to report.  
   * @param reason The reason for reporting the story.  
   * @param text Additional report details; 0-1024 characters.
   */
  suspend fun Story.report(
    storySenderChatId: Long,
    reason: ReportReason?,
    text: String?
  ) = api.reportStory(storySenderChatId, this.id, reason, text)

  /**
   * Suspend function, which changes privacy settings of a story. The method can be called only for
   * stories posted on behalf of the current user and if story.canBeEdited == true.
   *
   * @param privacySettings The new privacy settigs for the story.
   */
  suspend fun Story.setPrivacySettings(privacySettings: StoryPrivacySettings?) =
      api.setStoryPrivacySettings(this.id, privacySettings)

  /**
   * Suspend function, which changes chosen reaction on a story that has already been sent.
   *
   * @param storySenderChatId The identifier of the sender of the story.  
   * @param reactionType Type of the reaction to set; pass null to remove the reaction.
   * `reactionTypeCustomEmoji` reactions can be used only by Telegram Premium users.  
   * @param updateRecentReactions Pass true if the reaction needs to be added to recent reactions.
   */
  suspend fun Story.setReaction(
    storySenderChatId: Long,
    reactionType: ReactionType?,
    updateRecentReactions: Boolean
  ) = api.setStoryReaction(storySenderChatId, this.id, reactionType, updateRecentReactions)

  /**
   * Suspend function, which toggles whether a story is accessible after expiration. Can be called
   * only if story.canToggleIsPostedToChatPage == true.
   *
   * @param storySenderChatId Identifier of the chat that posted the story.  
   * @param isPostedToChatPage Pass true to make the story accessible after expiration; pass false
   * to make it private.
   */
  suspend fun Story.toggleIsPostedToChatPage(storySenderChatId: Long, isPostedToChatPage: Boolean) =
      api.toggleStoryIsPostedToChatPage(storySenderChatId, this.id, isPostedToChatPage)
}
