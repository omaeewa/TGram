//
// NOTE: THIS FILE IS AUTO-GENERATED by the "TdApiKtxGenerator".kt
// See: https://github.com/tdlibx/td-ktx-generator/
//
package kotlinx.telegram.flows

import kotlin.Long
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.mapNotNull
import kotlinx.telegram.core.TelegramFlow
import org.drinkless.tdlib.TdApi
import org.drinkless.tdlib.TdApi.Message
import org.drinkless.tdlib.TdApi.SavedMessagesTopic
import org.drinkless.tdlib.TdApi.UpdateAnimatedEmojiMessageClicked
import org.drinkless.tdlib.TdApi.UpdateAvailableMessageEffects
import org.drinkless.tdlib.TdApi.UpdateBusinessMessageEdited
import org.drinkless.tdlib.TdApi.UpdateBusinessMessagesDeleted
import org.drinkless.tdlib.TdApi.UpdateDeleteMessages
import org.drinkless.tdlib.TdApi.UpdateMessageContent
import org.drinkless.tdlib.TdApi.UpdateMessageContentOpened
import org.drinkless.tdlib.TdApi.UpdateMessageEdited
import org.drinkless.tdlib.TdApi.UpdateMessageFactCheck
import org.drinkless.tdlib.TdApi.UpdateMessageInteractionInfo
import org.drinkless.tdlib.TdApi.UpdateMessageIsPinned
import org.drinkless.tdlib.TdApi.UpdateMessageLiveLocationViewed
import org.drinkless.tdlib.TdApi.UpdateMessageMentionRead
import org.drinkless.tdlib.TdApi.UpdateMessageReaction
import org.drinkless.tdlib.TdApi.UpdateMessageReactions
import org.drinkless.tdlib.TdApi.UpdateMessageSendAcknowledged
import org.drinkless.tdlib.TdApi.UpdateMessageSendFailed
import org.drinkless.tdlib.TdApi.UpdateMessageSendSucceeded
import org.drinkless.tdlib.TdApi.UpdateMessageUnreadReactions
import org.drinkless.tdlib.TdApi.UpdateNewBusinessMessage
import org.drinkless.tdlib.TdApi.UpdateQuickReplyShortcutMessages
import org.drinkless.tdlib.TdApi.UpdateSavedMessagesTags

/**
 * emits [Message] if a new message was received; can also be an outgoing message.
 */
fun TelegramFlow.newMessageFlow(): Flow<Message> =
    this.getUpdatesFlowOfType<TdApi.UpdateNewMessage>()
    .mapNotNull { it.message }

/**
 * emits [UpdateMessageSendAcknowledged] if a request to send a message has reached the Telegram
 * server. This doesn't mean that the message will be sent successfully. This update is sent only if
 * the option &quot;use_quick_ack&quot; is set to true. This update may be sent multiple times for the
 * same message.
 */
fun TelegramFlow.messageSendAcknowledgedFlow(): Flow<UpdateMessageSendAcknowledged> =
    this.getUpdatesFlowOfType()

/**
 * emits [UpdateMessageSendSucceeded] if a message has been successfully sent.
 */
fun TelegramFlow.messageSendSucceededFlow(): Flow<UpdateMessageSendSucceeded> =
    this.getUpdatesFlowOfType()

/**
 * emits [UpdateMessageSendFailed] if a message failed to send. Be aware that some messages being
 * sent can be irrecoverably deleted, in which case updateDeleteMessages will be received instead of
 * this update.
 */
fun TelegramFlow.messageSendFailedFlow(): Flow<UpdateMessageSendFailed> =
    this.getUpdatesFlowOfType()

/**
 * emits [UpdateMessageContent] if the message content has changed.
 */
fun TelegramFlow.messageContentFlow(): Flow<UpdateMessageContent> = this.getUpdatesFlowOfType()

/**
 * emits [UpdateMessageEdited] if a message was edited. Changes in the message content will come in
 * a separate updateMessageContent.
 */
fun TelegramFlow.messageEditedFlow(): Flow<UpdateMessageEdited> = this.getUpdatesFlowOfType()

/**
 * emits [UpdateMessageIsPinned] if the message pinned state was changed.
 */
fun TelegramFlow.messageIsPinnedFlow(): Flow<UpdateMessageIsPinned> = this.getUpdatesFlowOfType()

/**
 * emits [UpdateMessageInteractionInfo] if the information about interactions with a message has
 * changed.
 */
fun TelegramFlow.messageInteractionInfoFlow(): Flow<UpdateMessageInteractionInfo> =
    this.getUpdatesFlowOfType()

/**
 * emits [UpdateMessageContentOpened] if the message content was opened. Updates voice note messages
 * to &quot;listened&quot;, video note messages to &quot;viewed&quot; and starts the self-destruct
 * timer.
 */
fun TelegramFlow.messageContentOpenedFlow(): Flow<UpdateMessageContentOpened> =
    this.getUpdatesFlowOfType()

/**
 * emits [UpdateMessageMentionRead] if a message with an unread mention was read.
 */
fun TelegramFlow.messageMentionReadFlow(): Flow<UpdateMessageMentionRead> =
    this.getUpdatesFlowOfType()

/**
 * emits [UpdateMessageUnreadReactions] if the list of unread reactions added to a message was
 * changed.
 */
fun TelegramFlow.messageUnreadReactionsFlow(): Flow<UpdateMessageUnreadReactions> =
    this.getUpdatesFlowOfType()

/**
 * emits [UpdateMessageFactCheck] if a fact-check added to a message was changed.
 */
fun TelegramFlow.messageFactCheckFlow(): Flow<UpdateMessageFactCheck> = this.getUpdatesFlowOfType()

/**
 * emits [UpdateMessageLiveLocationViewed] if a message with a live location was viewed. When the
 * update is received, the application is supposed to update the live location.
 */
fun TelegramFlow.messageLiveLocationViewedFlow(): Flow<UpdateMessageLiveLocationViewed> =
    this.getUpdatesFlowOfType()

/**
 * emits topic [SavedMessagesTopic] if basic information about a Saved Messages topic has changed.
 * This update is guaranteed to come before the topic identifier is returned to the application.
 */
fun TelegramFlow.savedMessagesTopicFlow(): Flow<SavedMessagesTopic> =
    this.getUpdatesFlowOfType<TdApi.UpdateSavedMessagesTopic>()
    .mapNotNull { it.topic }

/**
 * emits [UpdateQuickReplyShortcutMessages] if the list of quick reply shortcut messages has
 * changed.
 */
fun TelegramFlow.quickReplyShortcutMessagesFlow(): Flow<UpdateQuickReplyShortcutMessages> =
    this.getUpdatesFlowOfType()

/**
 * emits [UpdateDeleteMessages] if some messages were deleted.
 */
fun TelegramFlow.deleteMessagesFlow(): Flow<UpdateDeleteMessages> = this.getUpdatesFlowOfType()

/**
 * emits webAppLaunchId [Long] if a message was sent by an opened Web App, so the Web App needs to
 * be closed.
 */
fun TelegramFlow.webAppMessageSentFlow(): Flow<Long> =
    this.getUpdatesFlowOfType<TdApi.UpdateWebAppMessageSent>()
    .mapNotNull { it.webAppLaunchId }

/**
 * emits [UpdateAvailableMessageEffects] if the list of available message effects has changed.
 */
fun TelegramFlow.availableMessageEffectsFlow(): Flow<UpdateAvailableMessageEffects> =
    this.getUpdatesFlowOfType()

/**
 * emits [UpdateSavedMessagesTags] if tags used in Saved Messages or a Saved Messages topic have
 * changed.
 */
fun TelegramFlow.savedMessagesTagsFlow(): Flow<UpdateSavedMessagesTags> =
    this.getUpdatesFlowOfType()

/**
 * emits [UpdateAnimatedEmojiMessageClicked] if some animated emoji message was clicked and a big
 * animated sticker must be played if the message is visible on the screen.
 * chatActionWatchingAnimations with the text of the message needs to be sent if the sticker is played.
 */
fun TelegramFlow.animatedEmojiMessageClickedFlow(): Flow<UpdateAnimatedEmojiMessageClicked> =
    this.getUpdatesFlowOfType()

/**
 * emits [UpdateNewBusinessMessage] if a new message was added to a business account; for bots only.
 */
fun TelegramFlow.newBusinessMessageFlow(): Flow<UpdateNewBusinessMessage> =
    this.getUpdatesFlowOfType()

/**
 * emits [UpdateBusinessMessageEdited] if a message in a business account was edited; for bots only.
 */
fun TelegramFlow.businessMessageEditedFlow(): Flow<UpdateBusinessMessageEdited> =
    this.getUpdatesFlowOfType()

/**
 * emits [UpdateBusinessMessagesDeleted] if messages in a business account were deleted; for bots
 * only.
 */
fun TelegramFlow.businessMessagesDeletedFlow(): Flow<UpdateBusinessMessagesDeleted> =
    this.getUpdatesFlowOfType()

/**
 * emits [UpdateMessageReaction] if user changed its reactions on a message with public reactions;
 * for bots only.
 */
fun TelegramFlow.messageReactionFlow(): Flow<UpdateMessageReaction> = this.getUpdatesFlowOfType()

/**
 * emits [UpdateMessageReactions] if reactions added to a message with anonymous reactions have
 * changed; for bots only.
 */
fun TelegramFlow.messageReactionsFlow(): Flow<UpdateMessageReactions> = this.getUpdatesFlowOfType()
